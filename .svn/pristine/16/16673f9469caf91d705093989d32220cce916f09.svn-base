/*
 * Led Cube 10x10x10 Red
 * main.c
 *
 * Created: 29.09.2011 13:02:42
 *  Author: Øystein
 */ 

#include "cube.h"
#include "main.h"
#include "draw.h"
#include "effect.h"
#include "snake.h"



int main(void)
{
	// Need to seed the random function
	setup(); // Initialize IO-Ports etc.
	sei(); // Enable interrupts
	nesControllerData=2;
	delay_ms(1000); // give the NES-controller interrupt time to run
    if (nesControllerData & 0x08){ // If the start button is currently pressed play snake
		snake_start_anim();
		while (1)
		{snake_game();}	
	}
	/*
	if (nesControllerData & 0x04){ // If select pressed
		while (1)
		{usb_buffer_get();}
	}
	*/
	else{ // Run effects
		while(1)
		{			
			fill(0xffff);
			delay_ms(1000);
			clear();
			
			effect_path_bitmap(80,0,3);
			
			//effect_ball_grow(100, 1, 4, 4, 4, 4);
			//delay_ms(1000);
			//clear();
			for (int i=0; i<10; i++){
				snake_ai();
			}
			
			effect_planboing(AXIS_Z,100);
			effect_planboing(AXIS_X,100);
			effect_planboing(AXIS_Y,100);
			clear();
			//delay_ms(1000);
			//effect_path_text(120,"OV!");
			
			//effect_rand_patharound(80,60);
			//effect_stringfly2("TG12!");
			effect_rain (200,80);
			effect_stars (80,70);
			clear();
			
			effect_randfill2(800,100);
			delay_ms(2000);
			//clear();
			//effect_path_text(120,"SCT.OMEGA BRODERSKAB, NTNU");
			effect_rand_planeboing_z(50, 80);
			//clear();
			//effect_path_text(120,"LEDS ARE FUN");
			//clear();
			effect_randfill (300,100);
			clear();
		}
	}	
}

void setup(void)
{	
	DDRA = 0xff; // Columns C2(PE0)-C9(PE7)
	DDRB = 0xdb; // NES_A, NES_B, 4Pin header (PB6-PB7)
	DDRC = 0xff; // Layers  L7(PC0)-L0(PC7)
	DDRD = 0xc0; // RCK (PD7), SCK (PD6)
	DDRE = 0x03; // L8 (PE1), L9 (PE0), 4Pin header (PE4-PE5)
	DDRF = 0x03; // C0 (PF0), C1 (PF1)
	
	PORTA = 0x00; // Turn all outputs off, just in case.
	PORTB = 0x00;
	PORTC = 0x00;
	PORTD = 0x00;
	PORTE = 0x00;
	PORTF = 0x00;
	
	// NES_A
	/*	PB0 = STROBE(OUT)
		PB1 = CLOCK	(OUT)
		PB2 = DATA	(IN)
	*/
	
	// NES_B
	/*	PB3 = STROBE(OUT)
		PB4 = CLOCK	(OUT)
		PB5 = DATA	(IN)
	*/
	
	// FPS formula:
	// fps = F/(P*T*10)
	// F = Clock frequency [Hz]
	// P = Prescaler setting
	// T = Count to
	
	// Setup timer 1 for interrupts (LED-output)
	// Frame buffer interrupt
	// 16 000 000/256/62 = 2083 interrupts per second
	// 1000/10 = 100 frames per second
	OCR1A = 60; 								// Interrupt counter at 60
    TCCR1B |= (1 << CS12) | (1 << WGM12);		// Set Clock prescaler to 256. Set CTC mode.
	TCNT1 = 0x00;								// Set initial value of counter to 0
	TIMSK1 |= (1 << OCIE1A);					// Enable interrupt.
	
	
	// Setup timer 3 for interrupts (NES-controller)
	// 16 000 000/1024/520 = 30Hz
	OCR3A = 520;								// Interrupt counter at
	TCCR3B |= (1 << CS30) | (1 << CS32) | (1 << WGM32);		// Set clock prescaler to 1024. Set CTC mode.
	TCNT3 = 0x00;								// Set initial value of counter to 0
	TIMSK3 |= (1 << OCIE3A);					// Enable interrupt on timer 0
	
	// Initiate USART
    // USART Baud rate is defined in MYUBRR
    //UBRRH = BAUD >> 8;
    //UBRRL = BAUD;
	UBRR1 = 103; // 9600 BAUD from table in datasheet (f_osc = 16,0 MHz, U2Xn = 0)
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10); // usync, no parity, 1 stop bit, frame length = 8, clock rising
    // Enable USART, tx and rx
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
    UDR1 = 0x00; // send an empty byte to indicate powerup.
}


ISR(TIMER3_COMPA_vect) // Read from NES-controller (A)
{
	nesControllerData = 0x00;
	// Strobe
	PORTB |=  (1 << 0) | (1 << 3);
	//_delay_us(12);
	PORTB &= ~( (1 << 0) | (1 << 3) );
	//input data
	for (int i=0; i<8; i++)
	{
		nesControllerData |= ( ( (~PINB & (1 << 2) ) >> 2 ) << i);
		//nesControllerData_B |= ( ( (~PINB & (1 << 5) ) >> 5 ) << i);
		//_delay_us(6);
		PORTB |=  (1 << 1) | (1 << 4); // Clock
		//_delay_us(6);
		PORTB &= ~( (1 << 1) | (1 << 4) );
	}
	// Lag snake input fra kontrollerinput
	if      ((nesControllerData & 0x40) && !(sdir==SOUTH))
	{sinput = NORTH;} 
	else if ((nesControllerData & 0x80) && !(sdir==NORTH))
	{sinput = SOUTH;}
	else if ((nesControllerData & 0x10) && !(sdir==WEST))
	{sinput = EAST;}
	else if ((nesControllerData & 0x20) && !(sdir==EAST))
	{sinput = WEST;}
	else if ((nesControllerData & 0x02) && !(sdir==DOWN))
	{sinput = UP;}
	else if ((nesControllerData & 0x01) && !(sdir==UP))
	{sinput = DOWN;}
		
	if ((nesControllerData & NES_SELECT) /*|| (nesControllerData_B & NES_SELECT)*/){
		selectPressed = 0xff;
	}
	
	if ((nesControllerData & NES_START) /*|| (nesControllerData_B & NES_START)*/){
		startPressed  = 0xff;
	}
	
	
	// NES-Controller button map
	/*	01 = A
		02 = B
		04 = SELECT
		08 = START
		10 = UP
		20 = DOWN
		40 = LEFT
		80 = RIGHT
	*/
}