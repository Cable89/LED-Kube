
Led_Cube-10x10x10-Red-v-0-1-4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000152  00800100  000034d0  00003584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034d0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e1  00800252  00800252  000036d6  2**0
                  ALLOC
  3 .eeprom       000001f9  00810000  00810000  000036d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000cfc  00000000  00000000  000038d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000039f  00000000  00000000  000045cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000240  00000000  00000000  0000496b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000994  00000000  00000000  00004bab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000038b6  00000000  00000000  0000553f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000015de  00000000  00000000  00008df5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000339a  00000000  00000000  0000a3d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000600  00000000  00000000  0000d770  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000a55  00000000  00000000  0000dd70  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002caf  00000000  00000000  0000e7c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 000005a5  00000000  00000000  00011474  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000110  00000000  00000000  00011a19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
       4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      40:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_17>
      48:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      4c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      68:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      6c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      70:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      74:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      78:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      7c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      80:	0c 94 89 0d 	jmp	0x1b12	; 0x1b12 <__vector_32>
      84:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      88:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      8c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      90:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      94:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

00000098 <paths>:
      98:	99 98 97 96 95 94 93 92 91 90 80 70 60 50 40 30     ...........p`P@0
      a8:	20 10 00 01 02 03 04 05 06 07 08 09 19 29 39 49      ............)9I
      b8:	59 69 79 89 04 03 12 21 30 40 51 62 73 74 65 56     Yiy....!0@QbsteV
      c8:	47 37 26 00                                         G7&.

000000cc <__ctors_end>:
      cc:	11 24       	eor	r1, r1
      ce:	1f be       	out	0x3f, r1	; 63
      d0:	cf ef       	ldi	r28, 0xFF	; 255
      d2:	d0 e2       	ldi	r29, 0x20	; 32
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
      d8:	12 e0       	ldi	r17, 0x02	; 2
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b1 e0       	ldi	r27, 0x01	; 1
      de:	e0 ed       	ldi	r30, 0xD0	; 208
      e0:	f4 e3       	ldi	r31, 0x34	; 52
      e2:	00 e0       	ldi	r16, 0x00	; 0
      e4:	0b bf       	out	0x3b, r16	; 59
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
      e8:	07 90       	elpm	r0, Z+
      ea:	0d 92       	st	X+, r0
      ec:	a2 35       	cpi	r26, 0x52	; 82
      ee:	b1 07       	cpc	r27, r17
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>

000000f2 <__do_clear_bss>:
      f2:	13 e0       	ldi	r17, 0x03	; 3
      f4:	a2 e5       	ldi	r26, 0x52	; 82
      f6:	b2 e0       	ldi	r27, 0x02	; 2
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
      fc:	a3 33       	cpi	r26, 0x33	; 51
      fe:	b1 07       	cpc	r27, r17
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
     102:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <main>
     106:	0c 94 66 1a 	jmp	0x34cc	; 0x34cc <_exit>

0000010a <__bad_interrupt>:
     10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <__vector_17>:
#include "cube.h"
#include "draw.h"
#include <avr/io.h>

ISR(TIMER1_COMPA_vect) // This function runs when timer1 interrupts.
{
     10e:	1f 92       	push	r1
     110:	0f 92       	push	r0
     112:	0f b6       	in	r0, 0x3f	; 63
     114:	0f 92       	push	r0
     116:	0b b6       	in	r0, 0x3b	; 59
     118:	0f 92       	push	r0
     11a:	11 24       	eor	r1, r1
     11c:	2f 93       	push	r18
     11e:	3f 93       	push	r19
     120:	4f 93       	push	r20
     122:	5f 93       	push	r21
     124:	6f 93       	push	r22
     126:	7f 93       	push	r23
     128:	8f 93       	push	r24
     12a:	9f 93       	push	r25
     12c:	ef 93       	push	r30
     12e:	ff 93       	push	r31
	PORTC = 0x00; // Turn all cathode layers off.
     130:	18 b8       	out	0x08, r1	; 8
	PORTE &= ~( (1 << 0) | (1 << 1) );
     132:	8e b1       	in	r24, 0x0e	; 14
     134:	8c 7f       	andi	r24, 0xFC	; 252
     136:	8e b9       	out	0x0e, r24	; 14
	
	PORTD &= ~(1 << 7); // Set RCK Low.
     138:	5f 98       	cbi	0x0b, 7	; 11
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	90 e0       	ldi	r25, 0x00	; 0
	for (char i = 0; i<CUBE_SIZE; i++)
	{
		_delay_us(1);
		PORTD &= ~(1 << 6); // Set SCK Low.
		_delay_us(1);
		PORTA = cube[current_layer][i] >> 2;
     13e:	45 e5       	ldi	r20, 0x55	; 85
     140:	52 e0       	ldi	r21, 0x02	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     142:	25 e0       	ldi	r18, 0x05	; 5
     144:	2a 95       	dec	r18
     146:	f1 f7       	brne	.-4      	; 0x144 <__vector_17+0x36>
     148:	00 00       	nop
	
	// Write data from buffer to shift registers.
	for (char i = 0; i<CUBE_SIZE; i++)
	{
		_delay_us(1);
		PORTD &= ~(1 << 6); // Set SCK Low.
     14a:	5e 98       	cbi	0x0b, 6	; 11
     14c:	25 e0       	ldi	r18, 0x05	; 5
     14e:	2a 95       	dec	r18
     150:	f1 f7       	brne	.-4      	; 0x14e <__vector_17+0x40>
     152:	00 00       	nop
		_delay_us(1);
		PORTA = cube[current_layer][i] >> 2;
     154:	60 91 1e 03 	lds	r22, 0x031E
     158:	26 2f       	mov	r18, r22
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	f9 01       	movw	r30, r18
     15e:	ee 0f       	add	r30, r30
     160:	ff 1f       	adc	r31, r31
     162:	22 0f       	add	r18, r18
     164:	33 1f       	adc	r19, r19
     166:	22 0f       	add	r18, r18
     168:	33 1f       	adc	r19, r19
     16a:	22 0f       	add	r18, r18
     16c:	33 1f       	adc	r19, r19
     16e:	e2 0f       	add	r30, r18
     170:	f3 1f       	adc	r31, r19
     172:	e8 0f       	add	r30, r24
     174:	f9 1f       	adc	r31, r25
     176:	ee 0f       	add	r30, r30
     178:	ff 1f       	adc	r31, r31
     17a:	e4 0f       	add	r30, r20
     17c:	f5 1f       	adc	r31, r21
     17e:	20 81       	ld	r18, Z
     180:	31 81       	ldd	r19, Z+1	; 0x01
     182:	36 95       	lsr	r19
     184:	27 95       	ror	r18
     186:	36 95       	lsr	r19
     188:	27 95       	ror	r18
     18a:	22 b9       	out	0x02, r18	; 2
		PORTF = ( (PORTD&(~0x03) ) | (cube[current_layer][i] & 0x0003) );
     18c:	6b b1       	in	r22, 0x0b	; 11
     18e:	70 91 1e 03 	lds	r23, 0x031E
     192:	27 2f       	mov	r18, r23
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	f9 01       	movw	r30, r18
     198:	ee 0f       	add	r30, r30
     19a:	ff 1f       	adc	r31, r31
     19c:	22 0f       	add	r18, r18
     19e:	33 1f       	adc	r19, r19
     1a0:	22 0f       	add	r18, r18
     1a2:	33 1f       	adc	r19, r19
     1a4:	22 0f       	add	r18, r18
     1a6:	33 1f       	adc	r19, r19
     1a8:	e2 0f       	add	r30, r18
     1aa:	f3 1f       	adc	r31, r19
     1ac:	e8 0f       	add	r30, r24
     1ae:	f9 1f       	adc	r31, r25
     1b0:	ee 0f       	add	r30, r30
     1b2:	ff 1f       	adc	r31, r31
     1b4:	e4 0f       	add	r30, r20
     1b6:	f5 1f       	adc	r31, r21
     1b8:	20 81       	ld	r18, Z
     1ba:	31 81       	ldd	r19, Z+1	; 0x01
     1bc:	23 70       	andi	r18, 0x03	; 3
     1be:	36 2f       	mov	r19, r22
     1c0:	3c 7f       	andi	r19, 0xFC	; 252
     1c2:	23 2b       	or	r18, r19
     1c4:	21 bb       	out	0x11, r18	; 17
     1c6:	25 e0       	ldi	r18, 0x05	; 5
     1c8:	2a 95       	dec	r18
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <__vector_17+0xba>
     1cc:	00 00       	nop
		_delay_us(1);
		PORTD |= (1 << 6);  // Pull SCK High
     1ce:	5e 9a       	sbi	0x0b, 6	; 11
     1d0:	01 96       	adiw	r24, 0x01	; 1
	PORTE &= ~( (1 << 0) | (1 << 1) );
	
	PORTD &= ~(1 << 7); // Set RCK Low.
	
	// Write data from buffer to shift registers.
	for (char i = 0; i<CUBE_SIZE; i++)
     1d2:	8a 30       	cpi	r24, 0x0A	; 10
     1d4:	91 05       	cpc	r25, r1
     1d6:	09 f0       	breq	.+2      	; 0x1da <__vector_17+0xcc>
     1d8:	b4 cf       	rjmp	.-152    	; 0x142 <__vector_17+0x34>
     1da:	45 e0       	ldi	r20, 0x05	; 5
     1dc:	4a 95       	dec	r20
     1de:	f1 f7       	brne	.-4      	; 0x1dc <__vector_17+0xce>
     1e0:	00 00       	nop
		_delay_us(1);
		PORTD |= (1 << 6);  // Pull SCK High
	}
	
	_delay_us(1);
	PORTD |= (1 << 7);  // Pull RCK High.
     1e2:	5f 9a       	sbi	0x0b, 7	; 11
	
	// Turn on the current cathode layer.
	if ( (CUBE_SIZE-1-current_layer) < 2 )
     1e4:	20 91 1e 03 	lds	r18, 0x031E
     1e8:	89 e0       	ldi	r24, 0x09	; 9
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	82 1b       	sub	r24, r18
     1ee:	91 09       	sbc	r25, r1
     1f0:	82 30       	cpi	r24, 0x02	; 2
     1f2:	91 05       	cpc	r25, r1
     1f4:	94 f4       	brge	.+36     	; 0x21a <__vector_17+0x10c>
	{
		PORTE |= ( 0x01 << (CUBE_SIZE-1-current_layer) );
     1f6:	6e b1       	in	r22, 0x0e	; 14
     1f8:	80 91 1e 03 	lds	r24, 0x031E
     1fc:	29 e0       	ldi	r18, 0x09	; 9
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	28 1b       	sub	r18, r24
     202:	31 09       	sbc	r19, r1
     204:	41 e0       	ldi	r20, 0x01	; 1
     206:	50 e0       	ldi	r21, 0x00	; 0
     208:	ca 01       	movw	r24, r20
     20a:	02 c0       	rjmp	.+4      	; 0x210 <__vector_17+0x102>
     20c:	88 0f       	add	r24, r24
     20e:	99 1f       	adc	r25, r25
     210:	2a 95       	dec	r18
     212:	e2 f7       	brpl	.-8      	; 0x20c <__vector_17+0xfe>
     214:	86 2b       	or	r24, r22
     216:	8e b9       	out	0x0e, r24	; 14
     218:	0f c0       	rjmp	.+30     	; 0x238 <__vector_17+0x12a>
	} 
	else
	{
		PORTC = ( 0x01 << (CUBE_SIZE-1-current_layer - 2) );
     21a:	20 91 1e 03 	lds	r18, 0x031E
     21e:	87 e0       	ldi	r24, 0x07	; 7
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	82 1b       	sub	r24, r18
     224:	91 09       	sbc	r25, r1
     226:	21 e0       	ldi	r18, 0x01	; 1
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	a9 01       	movw	r20, r18
     22c:	02 c0       	rjmp	.+4      	; 0x232 <__vector_17+0x124>
     22e:	44 0f       	add	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	8a 95       	dec	r24
     234:	e2 f7       	brpl	.-8      	; 0x22e <__vector_17+0x120>
     236:	48 b9       	out	0x08, r20	; 8
     238:	55 e3       	ldi	r21, 0x35	; 53
     23a:	5a 95       	dec	r21
     23c:	f1 f7       	brne	.-4      	; 0x23a <__vector_17+0x12c>
     23e:	00 00       	nop
		//PORTC = ( 0x01 << (current_layer) );
	}
	_delay_us(10);
	current_layer++;				// Increment the layer counter.
     240:	80 91 1e 03 	lds	r24, 0x031E
     244:	8f 5f       	subi	r24, 0xFF	; 255
     246:	80 93 1e 03 	sts	0x031E, r24
	if (current_layer>=CUBE_SIZE)	// If we have written all the layers to the shift registers, start over.
     24a:	80 91 1e 03 	lds	r24, 0x031E
     24e:	8a 30       	cpi	r24, 0x0A	; 10
     250:	10 f0       	brcs	.+4      	; 0x256 <__vector_17+0x148>
	{
		current_layer=0;
     252:	10 92 1e 03 	sts	0x031E, r1
	}
	
}
     256:	ff 91       	pop	r31
     258:	ef 91       	pop	r30
     25a:	9f 91       	pop	r25
     25c:	8f 91       	pop	r24
     25e:	7f 91       	pop	r23
     260:	6f 91       	pop	r22
     262:	5f 91       	pop	r21
     264:	4f 91       	pop	r20
     266:	3f 91       	pop	r19
     268:	2f 91       	pop	r18
     26a:	0f 90       	pop	r0
     26c:	0b be       	out	0x3b, r0	; 59
     26e:	0f 90       	pop	r0
     270:	0f be       	out	0x3f, r0	; 63
     272:	0f 90       	pop	r0
     274:	1f 90       	pop	r1
     276:	18 95       	reti

00000278 <inrange>:

// Check if the coordinates are inside the cube.
unsigned char inrange(int x, int y, int z)
{
	if (x>=0 && x<CUBE_SIZE && y>=0 && y<CUBE_SIZE && z>=0 && z<CUBE_SIZE)
     278:	8a 30       	cpi	r24, 0x0A	; 10
     27a:	91 05       	cpc	r25, r1
     27c:	68 f4       	brcc	.+26     	; 0x298 <inrange+0x20>
     27e:	77 23       	and	r23, r23
     280:	6c f0       	brlt	.+26     	; 0x29c <inrange+0x24>
     282:	6a 30       	cpi	r22, 0x0A	; 10
     284:	71 05       	cpc	r23, r1
     286:	64 f4       	brge	.+24     	; 0x2a0 <inrange+0x28>
     288:	55 23       	and	r21, r21
     28a:	64 f0       	brlt	.+24     	; 0x2a4 <inrange+0x2c>
	}
	
}

// Check if the coordinates are inside the cube.
unsigned char inrange(int x, int y, int z)
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	4a 30       	cpi	r20, 0x0A	; 10
     290:	51 05       	cpc	r21, r1
     292:	4c f0       	brlt	.+18     	; 0x2a6 <inrange+0x2e>
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	08 95       	ret
	{
		return 1;
	} 
	else
	{
		return 0; // Not inside.
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	08 95       	ret
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	08 95       	ret
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	08 95       	ret
     2a4:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     2a6:	08 95       	ret

000002a8 <set_voxel>:


// Set a specific voxel
void set_voxel(int x, int y,int z)
{
     2a8:	ff 92       	push	r15
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	f8 2e       	mov	r15, r24
     2b4:	eb 01       	movw	r28, r22
     2b6:	04 2f       	mov	r16, r20
     2b8:	15 2f       	mov	r17, r21
	if (inrange(x,y,z))
     2ba:	0e 94 3c 01 	call	0x278	; 0x278 <inrange>
     2be:	88 23       	and	r24, r24
     2c0:	b1 f1       	breq	.+108    	; 0x32e <set_voxel+0x86>
	{
		cube[z][y] |= (0x0001 << x);
     2c2:	80 2f       	mov	r24, r16
     2c4:	91 2f       	mov	r25, r17
     2c6:	fc 01       	movw	r30, r24
     2c8:	ee 0f       	add	r30, r30
     2ca:	ff 1f       	adc	r31, r31
     2cc:	88 0f       	add	r24, r24
     2ce:	99 1f       	adc	r25, r25
     2d0:	88 0f       	add	r24, r24
     2d2:	99 1f       	adc	r25, r25
     2d4:	88 0f       	add	r24, r24
     2d6:	99 1f       	adc	r25, r25
     2d8:	e8 0f       	add	r30, r24
     2da:	f9 1f       	adc	r31, r25
     2dc:	ec 0f       	add	r30, r28
     2de:	fd 1f       	adc	r31, r29
     2e0:	25 e5       	ldi	r18, 0x55	; 85
     2e2:	32 e0       	ldi	r19, 0x02	; 2
     2e4:	ee 0f       	add	r30, r30
     2e6:	ff 1f       	adc	r31, r31
     2e8:	e2 0f       	add	r30, r18
     2ea:	f3 1f       	adc	r31, r19
     2ec:	80 81       	ld	r24, Z
     2ee:	91 81       	ldd	r25, Z+1	; 0x01
     2f0:	41 e0       	ldi	r20, 0x01	; 1
     2f2:	50 e0       	ldi	r21, 0x00	; 0
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <set_voxel+0x52>
     2f6:	44 0f       	add	r20, r20
     2f8:	55 1f       	adc	r21, r21
     2fa:	fa 94       	dec	r15
     2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <set_voxel+0x4e>
     2fe:	48 2b       	or	r20, r24
     300:	59 2b       	or	r21, r25
     302:	80 2f       	mov	r24, r16
     304:	91 2f       	mov	r25, r17
     306:	bc 01       	movw	r22, r24
     308:	66 0f       	add	r22, r22
     30a:	77 1f       	adc	r23, r23
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	88 0f       	add	r24, r24
     316:	99 1f       	adc	r25, r25
     318:	86 0f       	add	r24, r22
     31a:	97 1f       	adc	r25, r23
     31c:	c8 0f       	add	r28, r24
     31e:	d9 1f       	adc	r29, r25
     320:	cc 0f       	add	r28, r28
     322:	dd 1f       	adc	r29, r29
     324:	2c 0f       	add	r18, r28
     326:	3d 1f       	adc	r19, r29
     328:	f9 01       	movw	r30, r18
     32a:	51 83       	std	Z+1, r21	; 0x01
     32c:	40 83       	st	Z, r20
	}
}
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	1f 91       	pop	r17
     334:	0f 91       	pop	r16
     336:	ff 90       	pop	r15
     338:	08 95       	ret

0000033a <clr_voxel>:

// Clear a specific voxel
void clr_voxel(int x, int y, int z)
{
     33a:	ff 92       	push	r15
     33c:	0f 93       	push	r16
     33e:	1f 93       	push	r17
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	f8 2e       	mov	r15, r24
     346:	eb 01       	movw	r28, r22
     348:	04 2f       	mov	r16, r20
     34a:	15 2f       	mov	r17, r21
	if (inrange(x,y,z))
     34c:	0e 94 3c 01 	call	0x278	; 0x278 <inrange>
     350:	88 23       	and	r24, r24
     352:	c1 f1       	breq	.+112    	; 0x3c4 <clr_voxel+0x8a>
	{
		cube[z][y] &= ~(0x0001 << x);
     354:	80 2f       	mov	r24, r16
     356:	91 2f       	mov	r25, r17
     358:	fc 01       	movw	r30, r24
     35a:	ee 0f       	add	r30, r30
     35c:	ff 1f       	adc	r31, r31
     35e:	88 0f       	add	r24, r24
     360:	99 1f       	adc	r25, r25
     362:	88 0f       	add	r24, r24
     364:	99 1f       	adc	r25, r25
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	e8 0f       	add	r30, r24
     36c:	f9 1f       	adc	r31, r25
     36e:	ec 0f       	add	r30, r28
     370:	fd 1f       	adc	r31, r29
     372:	25 e5       	ldi	r18, 0x55	; 85
     374:	32 e0       	ldi	r19, 0x02	; 2
     376:	ee 0f       	add	r30, r30
     378:	ff 1f       	adc	r31, r31
     37a:	e2 0f       	add	r30, r18
     37c:	f3 1f       	adc	r31, r19
     37e:	80 81       	ld	r24, Z
     380:	91 81       	ldd	r25, Z+1	; 0x01
     382:	41 e0       	ldi	r20, 0x01	; 1
     384:	50 e0       	ldi	r21, 0x00	; 0
     386:	02 c0       	rjmp	.+4      	; 0x38c <clr_voxel+0x52>
     388:	44 0f       	add	r20, r20
     38a:	55 1f       	adc	r21, r21
     38c:	fa 94       	dec	r15
     38e:	e2 f7       	brpl	.-8      	; 0x388 <clr_voxel+0x4e>
     390:	40 95       	com	r20
     392:	50 95       	com	r21
     394:	48 23       	and	r20, r24
     396:	59 23       	and	r21, r25
     398:	80 2f       	mov	r24, r16
     39a:	91 2f       	mov	r25, r17
     39c:	bc 01       	movw	r22, r24
     39e:	66 0f       	add	r22, r22
     3a0:	77 1f       	adc	r23, r23
     3a2:	88 0f       	add	r24, r24
     3a4:	99 1f       	adc	r25, r25
     3a6:	88 0f       	add	r24, r24
     3a8:	99 1f       	adc	r25, r25
     3aa:	88 0f       	add	r24, r24
     3ac:	99 1f       	adc	r25, r25
     3ae:	86 0f       	add	r24, r22
     3b0:	97 1f       	adc	r25, r23
     3b2:	c8 0f       	add	r28, r24
     3b4:	d9 1f       	adc	r29, r25
     3b6:	cc 0f       	add	r28, r28
     3b8:	dd 1f       	adc	r29, r29
     3ba:	2c 0f       	add	r18, r28
     3bc:	3d 1f       	adc	r19, r29
     3be:	f9 01       	movw	r30, r18
     3c0:	51 83       	std	Z+1, r21	; 0x01
     3c2:	40 83       	st	Z, r20
	}
}
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	08 95       	ret

000003d0 <getvoxel>:

// Get the current status of a voxel
unsigned char getvoxel(int x, int y, int z)
{
     3d0:	ff 92       	push	r15
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	18 2f       	mov	r17, r24
     3dc:	eb 01       	movw	r28, r22
     3de:	f4 2e       	mov	r15, r20
     3e0:	05 2f       	mov	r16, r21
	if (inrange(x,y,z))
     3e2:	0e 94 3c 01 	call	0x278	; 0x278 <inrange>
     3e6:	88 23       	and	r24, r24
     3e8:	21 f1       	breq	.+72     	; 0x432 <getvoxel+0x62>
	{
		if (cube[z][y] & (1 << x))
     3ea:	8f 2d       	mov	r24, r15
     3ec:	90 2f       	mov	r25, r16
     3ee:	9c 01       	movw	r18, r24
     3f0:	22 0f       	add	r18, r18
     3f2:	33 1f       	adc	r19, r19
     3f4:	88 0f       	add	r24, r24
     3f6:	99 1f       	adc	r25, r25
     3f8:	88 0f       	add	r24, r24
     3fa:	99 1f       	adc	r25, r25
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	82 0f       	add	r24, r18
     402:	93 1f       	adc	r25, r19
     404:	c8 0f       	add	r28, r24
     406:	d9 1f       	adc	r29, r25
     408:	cc 0f       	add	r28, r28
     40a:	dd 1f       	adc	r29, r29
     40c:	cb 5a       	subi	r28, 0xAB	; 171
     40e:	dd 4f       	sbci	r29, 0xFD	; 253
     410:	88 81       	ld	r24, Y
     412:	99 81       	ldd	r25, Y+1	; 0x01
     414:	21 e0       	ldi	r18, 0x01	; 1
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	02 c0       	rjmp	.+4      	; 0x41e <getvoxel+0x4e>
     41a:	22 0f       	add	r18, r18
     41c:	33 1f       	adc	r19, r19
     41e:	1a 95       	dec	r17
     420:	e2 f7       	brpl	.-8      	; 0x41a <getvoxel+0x4a>
     422:	28 23       	and	r18, r24
     424:	39 23       	and	r19, r25
		{
			return 1;
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	21 15       	cp	r18, r1
     42a:	31 05       	cpc	r19, r1
     42c:	19 f4       	brne	.+6      	; 0x434 <getvoxel+0x64>
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	01 c0       	rjmp	.+2      	; 0x434 <getvoxel+0x64>
			return 0;
		}
	}
	else
	{
		return 0;
     432:	80 e0       	ldi	r24, 0x00	; 0
	}		
}
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	1f 91       	pop	r17
     43a:	0f 91       	pop	r16
     43c:	ff 90       	pop	r15
     43e:	08 95       	ret

00000440 <altervoxel>:

// Alter the state of a voxel with a bool value
void altervoxel(int x, int y, int z, int state)
{
     440:	cf 92       	push	r12
     442:	df 92       	push	r13
     444:	ef 92       	push	r14
     446:	ff 92       	push	r15
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	8c 01       	movw	r16, r24
     452:	7b 01       	movw	r14, r22
     454:	6a 01       	movw	r12, r20
     456:	e9 01       	movw	r28, r18
	if (inrange(x,y,z))
     458:	0e 94 3c 01 	call	0x278	; 0x278 <inrange>
     45c:	88 23       	and	r24, r24
     45e:	71 f0       	breq	.+28     	; 0x47c <altervoxel+0x3c>
	{
		if (state == 1)
     460:	c1 30       	cpi	r28, 0x01	; 1
     462:	d1 05       	cpc	r29, r1
     464:	31 f4       	brne	.+12     	; 0x472 <altervoxel+0x32>
		{
			set_voxel(x,y,z);
     466:	c8 01       	movw	r24, r16
     468:	b7 01       	movw	r22, r14
     46a:	a6 01       	movw	r20, r12
     46c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_voxel>
     470:	05 c0       	rjmp	.+10     	; 0x47c <altervoxel+0x3c>
		} 
		else
		{
			clr_voxel(x,y,z);
     472:	c8 01       	movw	r24, r16
     474:	b7 01       	movw	r22, r14
     476:	a6 01       	movw	r20, r12
     478:	0e 94 9d 01 	call	0x33a	; 0x33a <clr_voxel>
		}
	}
}
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	1f 91       	pop	r17
     482:	0f 91       	pop	r16
     484:	ff 90       	pop	r15
     486:	ef 90       	pop	r14
     488:	df 90       	pop	r13
     48a:	cf 90       	pop	r12
     48c:	08 95       	ret

0000048e <flipvoxel>:

// Flip a voxel
void flipvoxel(int x, int y, int z)
{
     48e:	ff 92       	push	r15
     490:	0f 93       	push	r16
     492:	1f 93       	push	r17
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	f8 2e       	mov	r15, r24
     49a:	eb 01       	movw	r28, r22
     49c:	04 2f       	mov	r16, r20
     49e:	15 2f       	mov	r17, r21
	if (inrange(x,y,z))
     4a0:	0e 94 3c 01 	call	0x278	; 0x278 <inrange>
     4a4:	88 23       	and	r24, r24
     4a6:	b1 f1       	breq	.+108    	; 0x514 <flipvoxel+0x86>
	{
		cube[z][y] ^= (1 << x);
     4a8:	80 2f       	mov	r24, r16
     4aa:	91 2f       	mov	r25, r17
     4ac:	fc 01       	movw	r30, r24
     4ae:	ee 0f       	add	r30, r30
     4b0:	ff 1f       	adc	r31, r31
     4b2:	88 0f       	add	r24, r24
     4b4:	99 1f       	adc	r25, r25
     4b6:	88 0f       	add	r24, r24
     4b8:	99 1f       	adc	r25, r25
     4ba:	88 0f       	add	r24, r24
     4bc:	99 1f       	adc	r25, r25
     4be:	e8 0f       	add	r30, r24
     4c0:	f9 1f       	adc	r31, r25
     4c2:	ec 0f       	add	r30, r28
     4c4:	fd 1f       	adc	r31, r29
     4c6:	25 e5       	ldi	r18, 0x55	; 85
     4c8:	32 e0       	ldi	r19, 0x02	; 2
     4ca:	ee 0f       	add	r30, r30
     4cc:	ff 1f       	adc	r31, r31
     4ce:	e2 0f       	add	r30, r18
     4d0:	f3 1f       	adc	r31, r19
     4d2:	80 81       	ld	r24, Z
     4d4:	91 81       	ldd	r25, Z+1	; 0x01
     4d6:	41 e0       	ldi	r20, 0x01	; 1
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <flipvoxel+0x52>
     4dc:	44 0f       	add	r20, r20
     4de:	55 1f       	adc	r21, r21
     4e0:	fa 94       	dec	r15
     4e2:	e2 f7       	brpl	.-8      	; 0x4dc <flipvoxel+0x4e>
     4e4:	48 27       	eor	r20, r24
     4e6:	59 27       	eor	r21, r25
     4e8:	80 2f       	mov	r24, r16
     4ea:	91 2f       	mov	r25, r17
     4ec:	bc 01       	movw	r22, r24
     4ee:	66 0f       	add	r22, r22
     4f0:	77 1f       	adc	r23, r23
     4f2:	88 0f       	add	r24, r24
     4f4:	99 1f       	adc	r25, r25
     4f6:	88 0f       	add	r24, r24
     4f8:	99 1f       	adc	r25, r25
     4fa:	88 0f       	add	r24, r24
     4fc:	99 1f       	adc	r25, r25
     4fe:	86 0f       	add	r24, r22
     500:	97 1f       	adc	r25, r23
     502:	c8 0f       	add	r28, r24
     504:	d9 1f       	adc	r29, r25
     506:	cc 0f       	add	r28, r28
     508:	dd 1f       	adc	r29, r29
     50a:	2c 0f       	add	r18, r28
     50c:	3d 1f       	adc	r19, r29
     50e:	f9 01       	movw	r30, r18
     510:	51 83       	std	Z+1, r21	; 0x01
     512:	40 83       	st	Z, r20
	}
}
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	1f 91       	pop	r17
     51a:	0f 91       	pop	r16
     51c:	ff 90       	pop	r15
     51e:	08 95       	ret

00000520 <setplane_x>:
}


// Set a specific plane along the X-axis
void setplane_x(int x)
{
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
	int y;
	int z;
	if (x>=0 && x<CUBE_SIZE)
     524:	8a 30       	cpi	r24, 0x0A	; 10
     526:	91 05       	cpc	r25, r1
     528:	88 f5       	brcc	.+98     	; 0x58c <setplane_x+0x6c>
	{
		for (y=0; y<CUBE_SIZE; y++)
		{
			for (z=0; z<CUBE_SIZE; z++)
			{
				cube[z][y] |= (1 << x);
     52a:	a1 e0       	ldi	r26, 0x01	; 1
     52c:	b0 e0       	ldi	r27, 0x00	; 0
     52e:	02 c0       	rjmp	.+4      	; 0x534 <setplane_x+0x14>
     530:	aa 0f       	add	r26, r26
     532:	bb 1f       	adc	r27, r27
     534:	8a 95       	dec	r24
     536:	e2 f7       	brpl	.-8      	; 0x530 <setplane_x+0x10>
     538:	40 e0       	ldi	r20, 0x00	; 0
     53a:	50 e0       	ldi	r21, 0x00	; 0
}


// Set a specific plane along the X-axis
void setplane_x(int x)
{
     53c:	c0 e0       	ldi	r28, 0x00	; 0
     53e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for (y=0; y<CUBE_SIZE; y++)
		{
			for (z=0; z<CUBE_SIZE; z++)
			{
				cube[z][y] |= (1 << x);
     540:	65 e5       	ldi	r22, 0x55	; 85
     542:	72 e0       	ldi	r23, 0x02	; 2
     544:	21 c0       	rjmp	.+66     	; 0x588 <setplane_x+0x68>
     546:	fc 01       	movw	r30, r24
     548:	ee 0f       	add	r30, r30
     54a:	ff 1f       	adc	r31, r31
     54c:	9c 01       	movw	r18, r24
     54e:	22 0f       	add	r18, r18
     550:	33 1f       	adc	r19, r19
     552:	22 0f       	add	r18, r18
     554:	33 1f       	adc	r19, r19
     556:	22 0f       	add	r18, r18
     558:	33 1f       	adc	r19, r19
     55a:	e2 0f       	add	r30, r18
     55c:	f3 1f       	adc	r31, r19
     55e:	e4 0f       	add	r30, r20
     560:	f5 1f       	adc	r31, r21
     562:	ee 0f       	add	r30, r30
     564:	ff 1f       	adc	r31, r31
     566:	e6 0f       	add	r30, r22
     568:	f7 1f       	adc	r31, r23
     56a:	20 81       	ld	r18, Z
     56c:	31 81       	ldd	r19, Z+1	; 0x01
     56e:	2a 2b       	or	r18, r26
     570:	3b 2b       	or	r19, r27
     572:	31 83       	std	Z+1, r19	; 0x01
     574:	20 83       	st	Z, r18
	int z;
	if (x>=0 && x<CUBE_SIZE)
	{
		for (y=0; y<CUBE_SIZE; y++)
		{
			for (z=0; z<CUBE_SIZE; z++)
     576:	01 96       	adiw	r24, 0x01	; 1
     578:	8a 30       	cpi	r24, 0x0A	; 10
     57a:	91 05       	cpc	r25, r1
     57c:	21 f7       	brne	.-56     	; 0x546 <setplane_x+0x26>
{
	int y;
	int z;
	if (x>=0 && x<CUBE_SIZE)
	{
		for (y=0; y<CUBE_SIZE; y++)
     57e:	4f 5f       	subi	r20, 0xFF	; 255
     580:	5f 4f       	sbci	r21, 0xFF	; 255
     582:	4a 30       	cpi	r20, 0x0A	; 10
     584:	51 05       	cpc	r21, r1
     586:	11 f0       	breq	.+4      	; 0x58c <setplane_x+0x6c>
}


// Set a specific plane along the X-axis
void setplane_x(int x)
{
     588:	ce 01       	movw	r24, r28
     58a:	dd cf       	rjmp	.-70     	; 0x546 <setplane_x+0x26>
			{
				cube[z][y] |= (1 << x);
			}
		}
	}
}
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	08 95       	ret

00000592 <clrplane_x>:

// Clear a specific plane along the X-axis
void clrplane_x(int x)
{
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
	int y;
	int z;
	if (x>=0 && x<CUBE_SIZE)
     596:	8a 30       	cpi	r24, 0x0A	; 10
     598:	91 05       	cpc	r25, r1
     59a:	88 f5       	brcc	.+98     	; 0x5fe <clrplane_x+0x6c>
	{
		for (y=0; y<CUBE_SIZE; y++)
		{
			for (z=0; z<CUBE_SIZE; z++)
			{
				cube[z][y] &= (~0x0001 << x);
     59c:	ae ef       	ldi	r26, 0xFE	; 254
     59e:	bf ef       	ldi	r27, 0xFF	; 255
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <clrplane_x+0x14>
     5a2:	aa 0f       	add	r26, r26
     5a4:	bb 1f       	adc	r27, r27
     5a6:	8a 95       	dec	r24
     5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <clrplane_x+0x10>
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	50 e0       	ldi	r21, 0x00	; 0
	}
}

// Clear a specific plane along the X-axis
void clrplane_x(int x)
{
     5ae:	c0 e0       	ldi	r28, 0x00	; 0
     5b0:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for (y=0; y<CUBE_SIZE; y++)
		{
			for (z=0; z<CUBE_SIZE; z++)
			{
				cube[z][y] &= (~0x0001 << x);
     5b2:	65 e5       	ldi	r22, 0x55	; 85
     5b4:	72 e0       	ldi	r23, 0x02	; 2
     5b6:	21 c0       	rjmp	.+66     	; 0x5fa <clrplane_x+0x68>
     5b8:	fc 01       	movw	r30, r24
     5ba:	ee 0f       	add	r30, r30
     5bc:	ff 1f       	adc	r31, r31
     5be:	9c 01       	movw	r18, r24
     5c0:	22 0f       	add	r18, r18
     5c2:	33 1f       	adc	r19, r19
     5c4:	22 0f       	add	r18, r18
     5c6:	33 1f       	adc	r19, r19
     5c8:	22 0f       	add	r18, r18
     5ca:	33 1f       	adc	r19, r19
     5cc:	e2 0f       	add	r30, r18
     5ce:	f3 1f       	adc	r31, r19
     5d0:	e4 0f       	add	r30, r20
     5d2:	f5 1f       	adc	r31, r21
     5d4:	ee 0f       	add	r30, r30
     5d6:	ff 1f       	adc	r31, r31
     5d8:	e6 0f       	add	r30, r22
     5da:	f7 1f       	adc	r31, r23
     5dc:	20 81       	ld	r18, Z
     5de:	31 81       	ldd	r19, Z+1	; 0x01
     5e0:	2a 23       	and	r18, r26
     5e2:	3b 23       	and	r19, r27
     5e4:	31 83       	std	Z+1, r19	; 0x01
     5e6:	20 83       	st	Z, r18
	int z;
	if (x>=0 && x<CUBE_SIZE)
	{
		for (y=0; y<CUBE_SIZE; y++)
		{
			for (z=0; z<CUBE_SIZE; z++)
     5e8:	01 96       	adiw	r24, 0x01	; 1
     5ea:	8a 30       	cpi	r24, 0x0A	; 10
     5ec:	91 05       	cpc	r25, r1
     5ee:	21 f7       	brne	.-56     	; 0x5b8 <clrplane_x+0x26>
{
	int y;
	int z;
	if (x>=0 && x<CUBE_SIZE)
	{
		for (y=0; y<CUBE_SIZE; y++)
     5f0:	4f 5f       	subi	r20, 0xFF	; 255
     5f2:	5f 4f       	sbci	r21, 0xFF	; 255
     5f4:	4a 30       	cpi	r20, 0x0A	; 10
     5f6:	51 05       	cpc	r21, r1
     5f8:	11 f0       	breq	.+4      	; 0x5fe <clrplane_x+0x6c>
	}
}

// Clear a specific plane along the X-axis
void clrplane_x(int x)
{
     5fa:	ce 01       	movw	r24, r28
     5fc:	dd cf       	rjmp	.-70     	; 0x5b8 <clrplane_x+0x26>
			{
				cube[z][y] &= (~0x0001 << x);
			}
		}
	}
}
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <setplane_y>:

// Set a specific plane along the Y-axis
void setplane_y(int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
     604:	8a 30       	cpi	r24, 0x0A	; 10
     606:	91 05       	cpc	r25, r1
     608:	f8 f4       	brcc	.+62     	; 0x648 <setplane_y+0x44>
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (z=0; z<CUBE_SIZE; z++)
		{
			cube[z][y] = 0xffff;
     60e:	65 e5       	ldi	r22, 0x55	; 85
     610:	72 e0       	ldi	r23, 0x02	; 2
     612:	4f ef       	ldi	r20, 0xFF	; 255
     614:	5f ef       	ldi	r21, 0xFF	; 255
     616:	d9 01       	movw	r26, r18
     618:	aa 0f       	add	r26, r26
     61a:	bb 1f       	adc	r27, r27
     61c:	f9 01       	movw	r30, r18
     61e:	ee 0f       	add	r30, r30
     620:	ff 1f       	adc	r31, r31
     622:	ee 0f       	add	r30, r30
     624:	ff 1f       	adc	r31, r31
     626:	ee 0f       	add	r30, r30
     628:	ff 1f       	adc	r31, r31
     62a:	ea 0f       	add	r30, r26
     62c:	fb 1f       	adc	r31, r27
     62e:	e8 0f       	add	r30, r24
     630:	f9 1f       	adc	r31, r25
     632:	ee 0f       	add	r30, r30
     634:	ff 1f       	adc	r31, r31
     636:	e6 0f       	add	r30, r22
     638:	f7 1f       	adc	r31, r23
     63a:	51 83       	std	Z+1, r21	; 0x01
     63c:	40 83       	st	Z, r20
void setplane_y(int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
	{
		for (z=0; z<CUBE_SIZE; z++)
     63e:	2f 5f       	subi	r18, 0xFF	; 255
     640:	3f 4f       	sbci	r19, 0xFF	; 255
     642:	2a 30       	cpi	r18, 0x0A	; 10
     644:	31 05       	cpc	r19, r1
     646:	39 f7       	brne	.-50     	; 0x616 <setplane_y+0x12>
     648:	08 95       	ret

0000064a <clrplane_y>:

// Clear a specific plane along the Y-axis
void clrplane_y(int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
     64a:	8a 30       	cpi	r24, 0x0A	; 10
     64c:	91 05       	cpc	r25, r1
     64e:	e8 f4       	brcc	.+58     	; 0x68a <clrplane_y+0x40>
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (z=0; z<CUBE_SIZE; z++)
		{
			cube[z][y] = 0x0000;
     654:	45 e5       	ldi	r20, 0x55	; 85
     656:	52 e0       	ldi	r21, 0x02	; 2
     658:	f9 01       	movw	r30, r18
     65a:	ee 0f       	add	r30, r30
     65c:	ff 1f       	adc	r31, r31
     65e:	b9 01       	movw	r22, r18
     660:	66 0f       	add	r22, r22
     662:	77 1f       	adc	r23, r23
     664:	66 0f       	add	r22, r22
     666:	77 1f       	adc	r23, r23
     668:	66 0f       	add	r22, r22
     66a:	77 1f       	adc	r23, r23
     66c:	e6 0f       	add	r30, r22
     66e:	f7 1f       	adc	r31, r23
     670:	e8 0f       	add	r30, r24
     672:	f9 1f       	adc	r31, r25
     674:	ee 0f       	add	r30, r30
     676:	ff 1f       	adc	r31, r31
     678:	e4 0f       	add	r30, r20
     67a:	f5 1f       	adc	r31, r21
     67c:	11 82       	std	Z+1, r1	; 0x01
     67e:	10 82       	st	Z, r1
void clrplane_y(int y)
{
	int z;
	if (y>=0 && y<CUBE_SIZE)
	{
		for (z=0; z<CUBE_SIZE; z++)
     680:	2f 5f       	subi	r18, 0xFF	; 255
     682:	3f 4f       	sbci	r19, 0xFF	; 255
     684:	2a 30       	cpi	r18, 0x0A	; 10
     686:	31 05       	cpc	r19, r1
     688:	39 f7       	brne	.-50     	; 0x658 <clrplane_y+0xe>
     68a:	08 95       	ret

0000068c <setplane_z>:

// Set a specific plane along the Z-axis
void setplane_z(int z)
{
	int y;
	if (z>=0 && z<CUBE_SIZE)
     68c:	8a 30       	cpi	r24, 0x0A	; 10
     68e:	91 05       	cpc	r25, r1
     690:	f8 f4       	brcc	.+62     	; 0x6d0 <setplane_z+0x44>
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (y=0; y<CUBE_SIZE; y++)
		{
			cube[z][y] = 0xffff;
     696:	bc 01       	movw	r22, r24
     698:	66 0f       	add	r22, r22
     69a:	77 1f       	adc	r23, r23
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	88 0f       	add	r24, r24
     6a2:	99 1f       	adc	r25, r25
     6a4:	88 0f       	add	r24, r24
     6a6:	99 1f       	adc	r25, r25
     6a8:	68 0f       	add	r22, r24
     6aa:	79 1f       	adc	r23, r25
     6ac:	45 e5       	ldi	r20, 0x55	; 85
     6ae:	52 e0       	ldi	r21, 0x02	; 2
     6b0:	8f ef       	ldi	r24, 0xFF	; 255
     6b2:	9f ef       	ldi	r25, 0xFF	; 255
     6b4:	fb 01       	movw	r30, r22
     6b6:	e2 0f       	add	r30, r18
     6b8:	f3 1f       	adc	r31, r19
     6ba:	ee 0f       	add	r30, r30
     6bc:	ff 1f       	adc	r31, r31
     6be:	e4 0f       	add	r30, r20
     6c0:	f5 1f       	adc	r31, r21
     6c2:	91 83       	std	Z+1, r25	; 0x01
     6c4:	80 83       	st	Z, r24
void setplane_z(int z)
{
	int y;
	if (z>=0 && z<CUBE_SIZE)
	{
		for (y=0; y<CUBE_SIZE; y++)
     6c6:	2f 5f       	subi	r18, 0xFF	; 255
     6c8:	3f 4f       	sbci	r19, 0xFF	; 255
     6ca:	2a 30       	cpi	r18, 0x0A	; 10
     6cc:	31 05       	cpc	r19, r1
     6ce:	91 f7       	brne	.-28     	; 0x6b4 <setplane_z+0x28>
     6d0:	08 95       	ret

000006d2 <setplane>:
}

// Set a specific plane along a specific axis
void setplane (char axis, unsigned char i)
{
	switch (axis)
     6d2:	89 37       	cpi	r24, 0x79	; 121
     6d4:	49 f0       	breq	.+18     	; 0x6e8 <setplane+0x16>
     6d6:	8a 37       	cpi	r24, 0x7A	; 122
     6d8:	61 f0       	breq	.+24     	; 0x6f2 <setplane+0x20>
     6da:	88 37       	cpi	r24, 0x78	; 120
     6dc:	71 f4       	brne	.+28     	; 0x6fa <setplane+0x28>
	{
		case AXIS_X:
			setplane_x(i);
     6de:	86 2f       	mov	r24, r22
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 90 02 	call	0x520	; 0x520 <setplane_x>
			break;
     6e6:	08 95       	ret
		case AXIS_Y:
			setplane_y(i);
     6e8:	86 2f       	mov	r24, r22
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	0e 94 02 03 	call	0x604	; 0x604 <setplane_y>
			break;
     6f0:	08 95       	ret
		case AXIS_Z:
			setplane_z(i);
     6f2:	86 2f       	mov	r24, r22
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 46 03 	call	0x68c	; 0x68c <setplane_z>
     6fa:	08 95       	ret

000006fc <clrplane_z>:

// Clear a specific plane along the Z-axis
void clrplane_z(int z)
{
	int y;
	if (z>=0 && z<CUBE_SIZE)
     6fc:	8a 30       	cpi	r24, 0x0A	; 10
     6fe:	91 05       	cpc	r25, r1
     700:	e8 f4       	brcc	.+58     	; 0x73c <clrplane_z+0x40>
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (y=0; y<CUBE_SIZE; y++)
		{
			cube[z][y] = 0x0000;
     706:	ac 01       	movw	r20, r24
     708:	44 0f       	add	r20, r20
     70a:	55 1f       	adc	r21, r21
     70c:	88 0f       	add	r24, r24
     70e:	99 1f       	adc	r25, r25
     710:	88 0f       	add	r24, r24
     712:	99 1f       	adc	r25, r25
     714:	88 0f       	add	r24, r24
     716:	99 1f       	adc	r25, r25
     718:	48 0f       	add	r20, r24
     71a:	59 1f       	adc	r21, r25
     71c:	85 e5       	ldi	r24, 0x55	; 85
     71e:	92 e0       	ldi	r25, 0x02	; 2
     720:	fa 01       	movw	r30, r20
     722:	e2 0f       	add	r30, r18
     724:	f3 1f       	adc	r31, r19
     726:	ee 0f       	add	r30, r30
     728:	ff 1f       	adc	r31, r31
     72a:	e8 0f       	add	r30, r24
     72c:	f9 1f       	adc	r31, r25
     72e:	11 82       	std	Z+1, r1	; 0x01
     730:	10 82       	st	Z, r1
void clrplane_z(int z)
{
	int y;
	if (z>=0 && z<CUBE_SIZE)
	{
		for (y=0; y<CUBE_SIZE; y++)
     732:	2f 5f       	subi	r18, 0xFF	; 255
     734:	3f 4f       	sbci	r19, 0xFF	; 255
     736:	2a 30       	cpi	r18, 0x0A	; 10
     738:	31 05       	cpc	r19, r1
     73a:	91 f7       	brne	.-28     	; 0x720 <clrplane_z+0x24>
     73c:	08 95       	ret

0000073e <clrplane>:
}

// Clear a specific plane along a specific axis
void clrplane (char axis, unsigned char i)
{
	switch (axis)
     73e:	89 37       	cpi	r24, 0x79	; 121
     740:	49 f0       	breq	.+18     	; 0x754 <clrplane+0x16>
     742:	8a 37       	cpi	r24, 0x7A	; 122
     744:	61 f0       	breq	.+24     	; 0x75e <clrplane+0x20>
     746:	88 37       	cpi	r24, 0x78	; 120
     748:	71 f4       	brne	.+28     	; 0x766 <clrplane+0x28>
	{
		case AXIS_X:
			clrplane_x(i);
     74a:	86 2f       	mov	r24, r22
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 c9 02 	call	0x592	; 0x592 <clrplane_x>
			break;
     752:	08 95       	ret
		case AXIS_Y:
			clrplane_y(i);
     754:	86 2f       	mov	r24, r22
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 25 03 	call	0x64a	; 0x64a <clrplane_y>
			break;
     75c:	08 95       	ret
		case AXIS_Z:
			clrplane_z(i);
     75e:	86 2f       	mov	r24, r22
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 7e 03 	call	0x6fc	; 0x6fc <clrplane_z>
     766:	08 95       	ret

00000768 <fill>:
}


// Fill the cube with a pattern (fill entire cube 0xffff)
void fill (int pattern)
{
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
	int y;
	int z;
	for (y=0; y<CUBE_SIZE; y++)
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	70 e0       	ldi	r23, 0x00	; 0
}


// Fill the cube with a pattern (fill entire cube 0xffff)
void fill (int pattern)
{
     774:	c0 e0       	ldi	r28, 0x00	; 0
     776:	d0 e0       	ldi	r29, 0x00	; 0
	int z;
	for (y=0; y<CUBE_SIZE; y++)
	{
		for (z=0; z<CUBE_SIZE; z++)
		{
			cube[z][y] = pattern;
     778:	a5 e5       	ldi	r26, 0x55	; 85
     77a:	b2 e0       	ldi	r27, 0x02	; 2
     77c:	20 c0       	rjmp	.+64     	; 0x7be <fill+0x56>
     77e:	48 2f       	mov	r20, r24
     780:	59 2f       	mov	r21, r25
     782:	89 01       	movw	r16, r18
     784:	00 0f       	add	r16, r16
     786:	11 1f       	adc	r17, r17
     788:	f9 01       	movw	r30, r18
     78a:	ee 0f       	add	r30, r30
     78c:	ff 1f       	adc	r31, r31
     78e:	ee 0f       	add	r30, r30
     790:	ff 1f       	adc	r31, r31
     792:	ee 0f       	add	r30, r30
     794:	ff 1f       	adc	r31, r31
     796:	e0 0f       	add	r30, r16
     798:	f1 1f       	adc	r31, r17
     79a:	e6 0f       	add	r30, r22
     79c:	f7 1f       	adc	r31, r23
     79e:	ee 0f       	add	r30, r30
     7a0:	ff 1f       	adc	r31, r31
     7a2:	ea 0f       	add	r30, r26
     7a4:	fb 1f       	adc	r31, r27
     7a6:	51 83       	std	Z+1, r21	; 0x01
     7a8:	40 83       	st	Z, r20
{
	int y;
	int z;
	for (y=0; y<CUBE_SIZE; y++)
	{
		for (z=0; z<CUBE_SIZE; z++)
     7aa:	2f 5f       	subi	r18, 0xFF	; 255
     7ac:	3f 4f       	sbci	r19, 0xFF	; 255
     7ae:	2a 30       	cpi	r18, 0x0A	; 10
     7b0:	31 05       	cpc	r19, r1
     7b2:	29 f7       	brne	.-54     	; 0x77e <fill+0x16>
// Fill the cube with a pattern (fill entire cube 0xffff)
void fill (int pattern)
{
	int y;
	int z;
	for (y=0; y<CUBE_SIZE; y++)
     7b4:	6f 5f       	subi	r22, 0xFF	; 255
     7b6:	7f 4f       	sbci	r23, 0xFF	; 255
     7b8:	6a 30       	cpi	r22, 0x0A	; 10
     7ba:	71 05       	cpc	r23, r1
     7bc:	11 f0       	breq	.+4      	; 0x7c2 <fill+0x5a>
}


// Fill the cube with a pattern (fill entire cube 0xffff)
void fill (int pattern)
{
     7be:	9e 01       	movw	r18, r28
     7c0:	de cf       	rjmp	.-68     	; 0x77e <fill+0x16>
		for (z=0; z<CUBE_SIZE; z++)
		{
			cube[z][y] = pattern;
		}
	}
}
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	08 95       	ret

000007cc <clear>:
// Clear the entire cube
void clear (void)
{
	int y;
	int z;
	for (y=0; y<CUBE_SIZE; y++)
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e0       	ldi	r19, 0x00	; 0
	}
}

// Clear the entire cube
void clear (void)
{
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	70 e0       	ldi	r23, 0x00	; 0
	int z;
	for (y=0; y<CUBE_SIZE; y++)
	{
		for (z=0; z<CUBE_SIZE; z++)
		{
			cube[z][y] = 0x0000;
     7d4:	45 e5       	ldi	r20, 0x55	; 85
     7d6:	52 e0       	ldi	r21, 0x02	; 2
     7d8:	1d c0       	rjmp	.+58     	; 0x814 <clear+0x48>
     7da:	dc 01       	movw	r26, r24
     7dc:	aa 0f       	add	r26, r26
     7de:	bb 1f       	adc	r27, r27
     7e0:	fc 01       	movw	r30, r24
     7e2:	ee 0f       	add	r30, r30
     7e4:	ff 1f       	adc	r31, r31
     7e6:	ee 0f       	add	r30, r30
     7e8:	ff 1f       	adc	r31, r31
     7ea:	ee 0f       	add	r30, r30
     7ec:	ff 1f       	adc	r31, r31
     7ee:	ea 0f       	add	r30, r26
     7f0:	fb 1f       	adc	r31, r27
     7f2:	e2 0f       	add	r30, r18
     7f4:	f3 1f       	adc	r31, r19
     7f6:	ee 0f       	add	r30, r30
     7f8:	ff 1f       	adc	r31, r31
     7fa:	e4 0f       	add	r30, r20
     7fc:	f5 1f       	adc	r31, r21
     7fe:	11 82       	std	Z+1, r1	; 0x01
     800:	10 82       	st	Z, r1
{
	int y;
	int z;
	for (y=0; y<CUBE_SIZE; y++)
	{
		for (z=0; z<CUBE_SIZE; z++)
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	8a 30       	cpi	r24, 0x0A	; 10
     806:	91 05       	cpc	r25, r1
     808:	41 f7       	brne	.-48     	; 0x7da <clear+0xe>
// Clear the entire cube
void clear (void)
{
	int y;
	int z;
	for (y=0; y<CUBE_SIZE; y++)
     80a:	2f 5f       	subi	r18, 0xFF	; 255
     80c:	3f 4f       	sbci	r19, 0xFF	; 255
     80e:	2a 30       	cpi	r18, 0x0A	; 10
     810:	31 05       	cpc	r19, r1
     812:	11 f0       	breq	.+4      	; 0x818 <clear+0x4c>
	}
}

// Clear the entire cube
void clear (void)
{
     814:	cb 01       	movw	r24, r22
     816:	e1 cf       	rjmp	.-62     	; 0x7da <clear+0xe>
     818:	08 95       	ret

0000081a <delay_ms>:
*/

// Expanded delay function
void delay_ms(int x)
{
	for (int i=0;i<x;i++)
     81a:	18 16       	cp	r1, r24
     81c:	19 06       	cpc	r1, r25
     81e:	6c f4       	brge	.+26     	; 0x83a <delay_ms+0x20>
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     824:	ef e9       	ldi	r30, 0x9F	; 159
     826:	ff e0       	ldi	r31, 0x0F	; 15
     828:	31 97       	sbiw	r30, 0x01	; 1
     82a:	f1 f7       	brne	.-4      	; 0x828 <delay_ms+0xe>
     82c:	00 c0       	rjmp	.+0      	; 0x82e <delay_ms+0x14>
     82e:	00 00       	nop
     830:	2f 5f       	subi	r18, 0xFF	; 255
     832:	3f 4f       	sbci	r19, 0xFF	; 255
     834:	28 17       	cp	r18, r24
     836:	39 07       	cpc	r19, r25
     838:	ac f3       	brlt	.-22     	; 0x824 <delay_ms+0xa>
     83a:	08 95       	ret

0000083c <shift>:
	}
}


void shift (char axis, int direction)
{
     83c:	2f 92       	push	r2
     83e:	3f 92       	push	r3
     840:	5f 92       	push	r5
     842:	6f 92       	push	r6
     844:	7f 92       	push	r7
     846:	8f 92       	push	r8
     848:	9f 92       	push	r9
     84a:	af 92       	push	r10
     84c:	bf 92       	push	r11
     84e:	cf 92       	push	r12
     850:	df 92       	push	r13
     852:	ef 92       	push	r14
     854:	ff 92       	push	r15
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	df 93       	push	r29
     85c:	cf 93       	push	r28
     85e:	00 d0       	rcall	.+0      	; 0x860 <shift+0x24>
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
     864:	18 2f       	mov	r17, r24
     866:	6b 01       	movw	r12, r22
	int i, x ,y;
	int ii, iii;
	int state;

	for (i = 0; i < CUBE_SIZE; i++)
     868:	1a 82       	std	Y+2, r1	; 0x02
     86a:	19 82       	std	Y+1, r1	; 0x01
	{
		if (direction == -1)
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	08 2f       	mov	r16, r24
     872:	59 2e       	mov	r5, r25
     874:	8f ef       	ldi	r24, 0xFF	; 255
     876:	c8 16       	cp	r12, r24
     878:	8f ef       	ldi	r24, 0xFF	; 255
     87a:	d8 06       	cpc	r13, r24
     87c:	51 f0       	breq	.+20     	; 0x892 <shift+0x56>
		_delay_ms(1);
	}
}


void shift (char axis, int direction)
     87e:	0f 2e       	mov	r0, r31
     880:	f9 e0       	ldi	r31, 0x09	; 9
     882:	8f 2e       	mov	r8, r31
     884:	99 24       	eor	r9, r9
     886:	f0 2d       	mov	r31, r0
     888:	e9 81       	ldd	r30, Y+1	; 0x01
     88a:	fa 81       	ldd	r31, Y+2	; 0x02
     88c:	8e 1a       	sub	r8, r30
     88e:	9f 0a       	sbc	r9, r31
     890:	02 c0       	rjmp	.+4      	; 0x896 <shift+0x5a>
	int ii, iii;
	int state;

	for (i = 0; i < CUBE_SIZE; i++)
	{
		if (direction == -1)
     892:	89 80       	ldd	r8, Y+1	; 0x01
     894:	9a 80       	ldd	r9, Y+2	; 0x02
		{
			ii = (9-i);
		}	
	
	
		for (x = 0; x < CUBE_SIZE; x++)
     896:	ee 24       	eor	r14, r14
     898:	ff 24       	eor	r15, r15
				if (direction == -1)
				{
					iii = ii+1;
				} else
				{
					iii = ii-1;
     89a:	54 01       	movw	r10, r8
     89c:	08 94       	sec
     89e:	a1 08       	sbc	r10, r1
     8a0:	b1 08       	sbc	r11, r1
		{
			for (y = 0; y < CUBE_SIZE; y++)
			{
				if (direction == -1)
				{
					iii = ii+1;
     8a2:	34 01       	movw	r6, r8
     8a4:	08 94       	sec
     8a6:	61 1c       	adc	r6, r1
     8a8:	71 1c       	adc	r7, r1
     8aa:	48 c0       	rjmp	.+144    	; 0x93c <shift+0x100>
	
		for (x = 0; x < CUBE_SIZE; x++)
		{
			for (y = 0; y < CUBE_SIZE; y++)
			{
				if (direction == -1)
     8ac:	ff ef       	ldi	r31, 0xFF	; 255
     8ae:	cf 16       	cp	r12, r31
     8b0:	ff ef       	ldi	r31, 0xFF	; 255
     8b2:	df 06       	cpc	r13, r31
     8b4:	21 f4       	brne	.+8      	; 0x8be <shift+0x82>
				{
					iii = ii+1;
     8b6:	93 01       	movw	r18, r6
     8b8:	46 2d       	mov	r20, r6
     8ba:	53 2f       	mov	r21, r19
     8bc:	03 c0       	rjmp	.+6      	; 0x8c4 <shift+0x88>
				} else
				{
					iii = ii-1;
     8be:	95 01       	movw	r18, r10
     8c0:	4a 2d       	mov	r20, r10
     8c2:	53 2f       	mov	r21, r19
				}
				
				if (axis == AXIS_Z)
     8c4:	1a 37       	cpi	r17, 0x7A	; 122
     8c6:	61 f4       	brne	.+24     	; 0x8e0 <shift+0xa4>
				{
					state = getvoxel(x,y,iii);
     8c8:	c7 01       	movw	r24, r14
     8ca:	b1 01       	movw	r22, r2
     8cc:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <getvoxel>
     8d0:	28 2f       	mov	r18, r24
					altervoxel(x,y,ii,state);
     8d2:	c7 01       	movw	r24, r14
     8d4:	b1 01       	movw	r22, r2
     8d6:	a4 01       	movw	r20, r8
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	0e 94 20 02 	call	0x440	; 0x440 <altervoxel>
     8de:	1f c0       	rjmp	.+62     	; 0x91e <shift+0xe2>
				}
				
				if (axis == AXIS_Y)
     8e0:	19 37       	cpi	r17, 0x79	; 121
     8e2:	71 f4       	brne	.+28     	; 0x900 <shift+0xc4>
				{
					state = getvoxel(x,iii,y);
     8e4:	c7 01       	movw	r24, r14
     8e6:	64 2f       	mov	r22, r20
     8e8:	75 2f       	mov	r23, r21
     8ea:	a1 01       	movw	r20, r2
     8ec:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <getvoxel>
     8f0:	28 2f       	mov	r18, r24
					altervoxel(x,ii,y,state);
     8f2:	c7 01       	movw	r24, r14
     8f4:	b4 01       	movw	r22, r8
     8f6:	a1 01       	movw	r20, r2
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	0e 94 20 02 	call	0x440	; 0x440 <altervoxel>
     8fe:	0f c0       	rjmp	.+30     	; 0x91e <shift+0xe2>
				}
				
				if (axis == AXIS_X)
     900:	18 37       	cpi	r17, 0x78	; 120
     902:	69 f4       	brne	.+26     	; 0x91e <shift+0xe2>
				{
					state = getvoxel(iii,y,x);
     904:	84 2f       	mov	r24, r20
     906:	95 2f       	mov	r25, r21
     908:	b1 01       	movw	r22, r2
     90a:	a7 01       	movw	r20, r14
     90c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <getvoxel>
     910:	28 2f       	mov	r18, r24
					altervoxel(ii,y,x,state);
     912:	c4 01       	movw	r24, r8
     914:	b1 01       	movw	r22, r2
     916:	a7 01       	movw	r20, r14
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	0e 94 20 02 	call	0x440	; 0x440 <altervoxel>
		}	
	
	
		for (x = 0; x < CUBE_SIZE; x++)
		{
			for (y = 0; y < CUBE_SIZE; y++)
     91e:	08 94       	sec
     920:	21 1c       	adc	r2, r1
     922:	31 1c       	adc	r3, r1
     924:	8a e0       	ldi	r24, 0x0A	; 10
     926:	28 16       	cp	r2, r24
     928:	31 04       	cpc	r3, r1
     92a:	09 f0       	breq	.+2      	; 0x92e <shift+0xf2>
     92c:	bf cf       	rjmp	.-130    	; 0x8ac <shift+0x70>
		{
			ii = (9-i);
		}	
	
	
		for (x = 0; x < CUBE_SIZE; x++)
     92e:	08 94       	sec
     930:	e1 1c       	adc	r14, r1
     932:	f1 1c       	adc	r15, r1
     934:	9a e0       	ldi	r25, 0x0A	; 10
     936:	e9 16       	cp	r14, r25
     938:	f1 04       	cpc	r15, r1
     93a:	21 f0       	breq	.+8      	; 0x944 <shift+0x108>
	int ii, iii;
	int state;

	for (i = 0; i < CUBE_SIZE; i++)
	{
		if (direction == -1)
     93c:	20 2f       	mov	r18, r16
     93e:	35 2d       	mov	r19, r5
     940:	19 01       	movw	r2, r18
     942:	b4 cf       	rjmp	.-152    	; 0x8ac <shift+0x70>
{
	int i, x ,y;
	int ii, iii;
	int state;

	for (i = 0; i < CUBE_SIZE; i++)
     944:	e9 81       	ldd	r30, Y+1	; 0x01
     946:	fa 81       	ldd	r31, Y+2	; 0x02
     948:	31 96       	adiw	r30, 0x01	; 1
     94a:	fa 83       	std	Y+2, r31	; 0x02
     94c:	e9 83       	std	Y+1, r30	; 0x01
     94e:	ea 30       	cpi	r30, 0x0A	; 10
     950:	f1 05       	cpc	r31, r1
     952:	09 f0       	breq	.+2      	; 0x956 <shift+0x11a>
     954:	8f cf       	rjmp	.-226    	; 0x874 <shift+0x38>
				}
			}
		}
	}
	
	if (direction == -1)
     956:	ff ef       	ldi	r31, 0xFF	; 255
     958:	cf 16       	cp	r12, r31
     95a:	ff ef       	ldi	r31, 0xFF	; 255
     95c:	df 06       	cpc	r13, r31
     95e:	31 f4       	brne	.+12     	; 0x96c <shift+0x130>
	{
		i = 9;
     960:	0f 2e       	mov	r0, r31
     962:	f9 e0       	ldi	r31, 0x09	; 9
     964:	cf 2e       	mov	r12, r31
     966:	dd 24       	eor	r13, r13
     968:	f0 2d       	mov	r31, r0
     96a:	02 c0       	rjmp	.+4      	; 0x970 <shift+0x134>
	} else
	{
		i = 0;
     96c:	cc 24       	eor	r12, r12
     96e:	dd 24       	eor	r13, r13
	}	
	
	for (x = 0; x < CUBE_SIZE; x++)
     970:	ee 24       	eor	r14, r14
     972:	ff 24       	eor	r15, r15
	if (direction == -1)
	{
		i = 9;
	} else
	{
		i = 0;
     974:	aa 24       	eor	r10, r10
     976:	bb 24       	eor	r11, r11
     978:	25 c0       	rjmp	.+74     	; 0x9c4 <shift+0x188>
	
	for (x = 0; x < CUBE_SIZE; x++)
	{
		for (y = 0; y < CUBE_SIZE; y++)
		{
			if (axis == AXIS_Z)
     97a:	1a 37       	cpi	r17, 0x7A	; 122
     97c:	31 f4       	brne	.+12     	; 0x98a <shift+0x14e>
				clr_voxel(x,y,i);
     97e:	c7 01       	movw	r24, r14
     980:	b4 01       	movw	r22, r8
     982:	a6 01       	movw	r20, r12
     984:	0e 94 9d 01 	call	0x33a	; 0x33a <clr_voxel>
     988:	0f c0       	rjmp	.+30     	; 0x9a8 <shift+0x16c>
				
			if (axis == AXIS_Y)
     98a:	19 37       	cpi	r17, 0x79	; 121
     98c:	31 f4       	brne	.+12     	; 0x99a <shift+0x15e>
				clr_voxel(x,i,y);
     98e:	c7 01       	movw	r24, r14
     990:	b6 01       	movw	r22, r12
     992:	a4 01       	movw	r20, r8
     994:	0e 94 9d 01 	call	0x33a	; 0x33a <clr_voxel>
     998:	07 c0       	rjmp	.+14     	; 0x9a8 <shift+0x16c>
			
			if (axis == AXIS_X)
     99a:	18 37       	cpi	r17, 0x78	; 120
     99c:	29 f4       	brne	.+10     	; 0x9a8 <shift+0x16c>
				clr_voxel(i,y,x);
     99e:	c6 01       	movw	r24, r12
     9a0:	b4 01       	movw	r22, r8
     9a2:	a7 01       	movw	r20, r14
     9a4:	0e 94 9d 01 	call	0x33a	; 0x33a <clr_voxel>
		i = 0;
	}	
	
	for (x = 0; x < CUBE_SIZE; x++)
	{
		for (y = 0; y < CUBE_SIZE; y++)
     9a8:	08 94       	sec
     9aa:	81 1c       	adc	r8, r1
     9ac:	91 1c       	adc	r9, r1
     9ae:	8a e0       	ldi	r24, 0x0A	; 10
     9b0:	88 16       	cp	r8, r24
     9b2:	91 04       	cpc	r9, r1
     9b4:	11 f7       	brne	.-60     	; 0x97a <shift+0x13e>
	} else
	{
		i = 0;
	}	
	
	for (x = 0; x < CUBE_SIZE; x++)
     9b6:	08 94       	sec
     9b8:	e1 1c       	adc	r14, r1
     9ba:	f1 1c       	adc	r15, r1
     9bc:	9a e0       	ldi	r25, 0x0A	; 10
     9be:	e9 16       	cp	r14, r25
     9c0:	f1 04       	cpc	r15, r1
     9c2:	11 f0       	breq	.+4      	; 0x9c8 <shift+0x18c>
	if (direction == -1)
	{
		i = 9;
	} else
	{
		i = 0;
     9c4:	45 01       	movw	r8, r10
     9c6:	d9 cf       	rjmp	.-78     	; 0x97a <shift+0x13e>
			
			if (axis == AXIS_X)
				clr_voxel(i,y,x);
		}
	}
}
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	cf 91       	pop	r28
     9ce:	df 91       	pop	r29
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	ff 90       	pop	r15
     9d6:	ef 90       	pop	r14
     9d8:	df 90       	pop	r13
     9da:	cf 90       	pop	r12
     9dc:	bf 90       	pop	r11
     9de:	af 90       	pop	r10
     9e0:	9f 90       	pop	r9
     9e2:	8f 90       	pop	r8
     9e4:	7f 90       	pop	r7
     9e6:	6f 90       	pop	r6
     9e8:	5f 90       	pop	r5
     9ea:	3f 90       	pop	r3
     9ec:	2f 90       	pop	r2
     9ee:	08 95       	ret

000009f0 <effect_test1>:
#include "effect.h"
#include "font.h"
#include <math.h>

void effect_test1(void)
{
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
	int i;
	for(i=0;i<CUBE_SIZE;i++)
     9f4:	c0 e0       	ldi	r28, 0x00	; 0
     9f6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		setplane (AXIS_X, i);
     9f8:	88 e7       	ldi	r24, 0x78	; 120
     9fa:	6c 2f       	mov	r22, r28
     9fc:	0e 94 69 03 	call	0x6d2	; 0x6d2 <setplane>
		delay_ms(1000);
     a00:	88 ee       	ldi	r24, 0xE8	; 232
     a02:	93 e0       	ldi	r25, 0x03	; 3
     a04:	0e 94 0d 04 	call	0x81a	; 0x81a <delay_ms>
		clrplane (AXIS_X, i);
     a08:	88 e7       	ldi	r24, 0x78	; 120
     a0a:	6c 2f       	mov	r22, r28
     a0c:	0e 94 9f 03 	call	0x73e	; 0x73e <clrplane>
#include <math.h>

void effect_test1(void)
{
	int i;
	for(i=0;i<CUBE_SIZE;i++)
     a10:	21 96       	adiw	r28, 0x01	; 1
     a12:	ca 30       	cpi	r28, 0x0A	; 10
     a14:	d1 05       	cpc	r29, r1
     a16:	81 f7       	brne	.-32     	; 0x9f8 <effect_test1+0x8>
	{
		setplane (AXIS_X, i);
		delay_ms(1000);
		clrplane (AXIS_X, i);
	}
	delay_ms(1000);
     a18:	88 ee       	ldi	r24, 0xE8	; 232
     a1a:	93 e0       	ldi	r25, 0x03	; 3
     a1c:	0e 94 0d 04 	call	0x81a	; 0x81a <delay_ms>
	clear();
     a20:	0e 94 e6 03 	call	0x7cc	; 0x7cc <clear>
}
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	08 95       	ret

00000a2a <effect_test2>:

void effect_test2(void)
{
     a2a:	8f 92       	push	r8
     a2c:	9f 92       	push	r9
     a2e:	af 92       	push	r10
     a30:	bf 92       	push	r11
     a32:	cf 92       	push	r12
     a34:	df 92       	push	r13
     a36:	ef 92       	push	r14
     a38:	ff 92       	push	r15
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
	int x,y,z;
	for (x=0;x<CUBE_SIZE;x++)
     a42:	ee 24       	eor	r14, r14
     a44:	ff 24       	eor	r15, r15
	delay_ms(1000);
	clear();
}

void effect_test2(void)
{
     a46:	aa 24       	eor	r10, r10
     a48:	bb 24       	eor	r11, r11
     a4a:	c5 01       	movw	r24, r10
     a4c:	da 2c       	mov	r13, r10
     a4e:	c9 2e       	mov	r12, r25
     a50:	1f c0       	rjmp	.+62     	; 0xa90 <effect_test2+0x66>
	{
		for (y=0;y<CUBE_SIZE;y++)
		{
			for (z=0;z<CUBE_SIZE;z++)
			{
				set_voxel(x,y,z);
     a52:	c7 01       	movw	r24, r14
     a54:	b8 01       	movw	r22, r16
     a56:	ae 01       	movw	r20, r28
     a58:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_voxel>
				delay_ms(200);
     a5c:	88 ec       	ldi	r24, 0xC8	; 200
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 0d 04 	call	0x81a	; 0x81a <delay_ms>
	int x,y,z;
	for (x=0;x<CUBE_SIZE;x++)
	{
		for (y=0;y<CUBE_SIZE;y++)
		{
			for (z=0;z<CUBE_SIZE;z++)
     a64:	21 96       	adiw	r28, 0x01	; 1
     a66:	ca 30       	cpi	r28, 0x0A	; 10
     a68:	d1 05       	cpc	r29, r1
     a6a:	99 f7       	brne	.-26     	; 0xa52 <effect_test2+0x28>
void effect_test2(void)
{
	int x,y,z;
	for (x=0;x<CUBE_SIZE;x++)
	{
		for (y=0;y<CUBE_SIZE;y++)
     a6c:	0f 5f       	subi	r16, 0xFF	; 255
     a6e:	1f 4f       	sbci	r17, 0xFF	; 255
     a70:	0a 30       	cpi	r16, 0x0A	; 10
     a72:	11 05       	cpc	r17, r1
     a74:	31 f0       	breq	.+12     	; 0xa82 <effect_test2+0x58>
	delay_ms(1000);
	clear();
}

void effect_test2(void)
{
     a76:	8d 2c       	mov	r8, r13
     a78:	e4 01       	movw	r28, r8
     a7a:	4e 01       	movw	r8, r28
     a7c:	9c 2c       	mov	r9, r12
     a7e:	e4 01       	movw	r28, r8
     a80:	e8 cf       	rjmp	.-48     	; 0xa52 <effect_test2+0x28>
	int x,y,z;
	for (x=0;x<CUBE_SIZE;x++)
     a82:	08 94       	sec
     a84:	e1 1c       	adc	r14, r1
     a86:	f1 1c       	adc	r15, r1
     a88:	9a e0       	ldi	r25, 0x0A	; 10
     a8a:	e9 16       	cp	r14, r25
     a8c:	f1 04       	cpc	r15, r1
     a8e:	11 f0       	breq	.+4      	; 0xa94 <effect_test2+0x6a>
	delay_ms(1000);
	clear();
}

void effect_test2(void)
{
     a90:	85 01       	movw	r16, r10
     a92:	f1 cf       	rjmp	.-30     	; 0xa76 <effect_test2+0x4c>
				set_voxel(x,y,z);
				delay_ms(200);
			}
		}
	}
}
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	ff 90       	pop	r15
     a9e:	ef 90       	pop	r14
     aa0:	df 90       	pop	r13
     aa2:	cf 90       	pop	r12
     aa4:	bf 90       	pop	r11
     aa6:	af 90       	pop	r10
     aa8:	9f 90       	pop	r9
     aaa:	8f 90       	pop	r8
     aac:	08 95       	ret

00000aae <effect_test3>:

void effect_test3(void)
{
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
	clear();
     ab2:	0e 94 e6 03 	call	0x7cc	; 0x7cc <clear>
	int x;
	for (x=0;x<CUBE_SIZE;x++)
     ab6:	c0 e0       	ldi	r28, 0x00	; 0
     ab8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		set_voxel(x,0,0);
     aba:	ce 01       	movw	r24, r28
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	40 e0       	ldi	r20, 0x00	; 0
     ac2:	50 e0       	ldi	r21, 0x00	; 0
     ac4:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_voxel>
		delay_ms(1000);
     ac8:	88 ee       	ldi	r24, 0xE8	; 232
     aca:	93 e0       	ldi	r25, 0x03	; 3
     acc:	0e 94 0d 04 	call	0x81a	; 0x81a <delay_ms>

void effect_test3(void)
{
	clear();
	int x;
	for (x=0;x<CUBE_SIZE;x++)
     ad0:	21 96       	adiw	r28, 0x01	; 1
     ad2:	ca 30       	cpi	r28, 0x0A	; 10
     ad4:	d1 05       	cpc	r29, r1
     ad6:	89 f7       	brne	.-30     	; 0xaba <effect_test3+0xc>
	{
		set_voxel(x,0,0);
		delay_ms(1000);
	}
	clear();
     ad8:	0e 94 e6 03 	call	0x7cc	; 0x7cc <clear>
}
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	08 95       	ret

00000ae2 <effect_planboing>:

// Draw a plane on one axis and send it back and forth once.
void effect_planboing (int plane, int speed)
{
     ae2:	ef 92       	push	r14
     ae4:	ff 92       	push	r15
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	f8 2e       	mov	r15, r24
     af0:	8b 01       	movw	r16, r22
	int i;
	for (i=0;i<CUBE_SIZE;i++)
     af2:	c0 e0       	ldi	r28, 0x00	; 0
     af4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		clear();
     af6:	0e 94 e6 03 	call	0x7cc	; 0x7cc <clear>
        setplane(plane, i);
     afa:	8f 2d       	mov	r24, r15
     afc:	6c 2f       	mov	r22, r28
     afe:	0e 94 69 03 	call	0x6d2	; 0x6d2 <setplane>
		delay_ms(speed);
     b02:	c8 01       	movw	r24, r16
     b04:	0e 94 0d 04 	call	0x81a	; 0x81a <delay_ms>

// Draw a plane on one axis and send it back and forth once.
void effect_planboing (int plane, int speed)
{
	int i;
	for (i=0;i<CUBE_SIZE;i++)
     b08:	21 96       	adiw	r28, 0x01	; 1
     b0a:	ca 30       	cpi	r28, 0x0A	; 10
     b0c:	d1 05       	cpc	r29, r1
     b0e:	99 f7       	brne	.-26     	; 0xaf6 <effect_planboing+0x14>
     b10:	0f 2e       	mov	r0, r31
     b12:	fa e0       	ldi	r31, 0x0A	; 10
     b14:	ef 2e       	mov	r14, r31
     b16:	f0 2d       	mov	r31, r0
		delay_ms(speed);
	}
	
	for (i=CUBE_SIZE;i>=0;i--)
	{
		clear();
     b18:	0e 94 e6 03 	call	0x7cc	; 0x7cc <clear>
        setplane(plane,i);
     b1c:	8f 2d       	mov	r24, r15
     b1e:	6e 2d       	mov	r22, r14
     b20:	0e 94 69 03 	call	0x6d2	; 0x6d2 <setplane>
		delay_ms(speed);
     b24:	c8 01       	movw	r24, r16
     b26:	0e 94 0d 04 	call	0x81a	; 0x81a <delay_ms>
     b2a:	ea 94       	dec	r14
		clear();
        setplane(plane, i);
		delay_ms(speed);
	}
	
	for (i=CUBE_SIZE;i>=0;i--)
     b2c:	3e 2d       	mov	r19, r14
     b2e:	3f 3f       	cpi	r19, 0xFF	; 255
     b30:	99 f7       	brne	.-26     	; 0xb18 <effect_planboing+0x36>
	{
		clear();
        setplane(plane,i);
		delay_ms(speed);
	}
	clear();
     b32:	0e 94 e6 03 	call	0x7cc	; 0x7cc <clear>
}
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	08 95       	ret

00000b44 <sendvoxel_z>:

// Send a voxel flying from one side of the cube to the other
// If its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
{
     b44:	7f 92       	push	r7
     b46:	8f 92       	push	r8
     b48:	9f 92       	push	r9
     b4a:	af 92       	push	r10
     b4c:	bf 92       	push	r11
     b4e:	cf 92       	push	r12
     b50:	df 92       	push	r13
     b52:	ef 92       	push	r14
     b54:	ff 92       	push	r15
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	f8 2e       	mov	r15, r24
     b60:	e6 2e       	mov	r14, r22
     b62:	74 2e       	mov	r7, r20
     b64:	49 01       	movw	r8, r18
     b66:	0a e0       	ldi	r16, 0x0A	; 10
     b68:	10 e0       	ldi	r17, 0x00	; 0
	clear();
}

// Send a voxel flying from one side of the cube to the other
// If its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
     b6a:	0f 2e       	mov	r0, r31
     b6c:	fa e0       	ldi	r31, 0x0A	; 10
     b6e:	cf 2e       	mov	r12, r31
     b70:	dd 24       	eor	r13, r13
     b72:	f0 2d       	mov	r31, r0
     b74:	0f 2e       	mov	r0, r31
     b76:	f9 e0       	ldi	r31, 0x09	; 9
     b78:	af 2e       	mov	r10, r31
     b7a:	bb 24       	eor	r11, r11
     b7c:	f0 2d       	mov	r31, r0
     b7e:	e6 01       	movw	r28, r12
     b80:	c0 1b       	sub	r28, r16
     b82:	d1 0b       	sbc	r29, r17
{
	int i, ii;
	for (i=0; i<CUBE_SIZE; i++)
	{
		if (z == CUBE_SIZE-1)
     b84:	87 2d       	mov	r24, r7
     b86:	89 30       	cpi	r24, 0x09	; 9
     b88:	51 f4       	brne	.+20     	; 0xb9e <sendvoxel_z+0x5a>
	clear();
}

// Send a voxel flying from one side of the cube to the other
// If its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
     b8a:	e8 01       	movw	r28, r16
     b8c:	21 97       	sbiw	r28, 0x01	; 1
	for (i=0; i<CUBE_SIZE; i++)
	{
		if (z == CUBE_SIZE-1)
		{
			ii = CUBE_SIZE-1-i;
			clr_voxel(x,y,ii+1);
     b8e:	8f 2d       	mov	r24, r15
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	6e 2d       	mov	r22, r14
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	a8 01       	movw	r20, r16
     b98:	0e 94 9d 01 	call	0x33a	; 0x33a <clr_voxel>
     b9c:	09 c0       	rjmp	.+18     	; 0xbb0 <sendvoxel_z+0x6c>
	clear();
}

// Send a voxel flying from one side of the cube to the other
// If its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
     b9e:	a5 01       	movw	r20, r10
     ba0:	40 1b       	sub	r20, r16
     ba2:	51 0b       	sbc	r21, r17
			clr_voxel(x,y,ii+1);
		}
		else
		{
			ii = i;
			clr_voxel(x,y,ii-1);
     ba4:	8f 2d       	mov	r24, r15
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	6e 2d       	mov	r22, r14
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	0e 94 9d 01 	call	0x33a	; 0x33a <clr_voxel>
		}
		set_voxel(x,y,ii);
     bb0:	8f 2d       	mov	r24, r15
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	6e 2d       	mov	r22, r14
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	ae 01       	movw	r20, r28
     bba:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_voxel>
		delay_ms(delay);
     bbe:	c4 01       	movw	r24, r8
     bc0:	0e 94 0d 04 	call	0x81a	; 0x81a <delay_ms>
     bc4:	01 50       	subi	r16, 0x01	; 1
     bc6:	10 40       	sbci	r17, 0x00	; 0
// Send a voxel flying from one side of the cube to the other
// If its at the bottom, send it to the top..
void sendvoxel_z (unsigned char x, unsigned char y, unsigned char z, int delay)
{
	int i, ii;
	for (i=0; i<CUBE_SIZE; i++)
     bc8:	d1 f6       	brne	.-76     	; 0xb7e <sendvoxel_z+0x3a>
			clr_voxel(x,y,ii-1);
		}
		set_voxel(x,y,ii);
		delay_ms(delay);
	}
}
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	1f 91       	pop	r17
     bd0:	0f 91       	pop	r16
     bd2:	ff 90       	pop	r15
     bd4:	ef 90       	pop	r14
     bd6:	df 90       	pop	r13
     bd8:	cf 90       	pop	r12
     bda:	bf 90       	pop	r11
     bdc:	af 90       	pop	r10
     bde:	9f 90       	pop	r9
     be0:	8f 90       	pop	r8
     be2:	7f 90       	pop	r7
     be4:	08 95       	ret

00000be6 <effect_rand_planeboing_z>:

void effect_rand_planeboing_z(int n, int delay)
{
     be6:	2f 92       	push	r2
     be8:	3f 92       	push	r3
     bea:	4f 92       	push	r4
     bec:	5f 92       	push	r5
     bee:	6f 92       	push	r6
     bf0:	7f 92       	push	r7
     bf2:	8f 92       	push	r8
     bf4:	9f 92       	push	r9
     bf6:	af 92       	push	r10
     bf8:	bf 92       	push	r11
     bfa:	cf 92       	push	r12
     bfc:	df 92       	push	r13
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	4c 01       	movw	r8, r24
     c0c:	1b 01       	movw	r2, r22
	int i,j,k,x,y,a,b;
	int z=0;
	clear();
     c0e:	0e 94 e6 03 	call	0x7cc	; 0x7cc <clear>
	for (i=0;i<CUBE_SIZE;i++)
     c12:	ee 24       	eor	r14, r14
     c14:	ff 24       	eor	r15, r15
		delay_ms(delay);
	}
}

void effect_rand_planeboing_z(int n, int delay)
{
     c16:	cc 24       	eor	r12, r12
     c18:	dd 24       	eor	r13, r13
	clear();
	for (i=0;i<CUBE_SIZE;i++)
	{
		for (j=0;j<CUBE_SIZE;j++)
		{
			k = rand()%4;
     c1a:	04 e0       	ldi	r16, 0x04	; 4
     c1c:	10 e0       	ldi	r17, 0x00	; 0
     c1e:	18 c0       	rjmp	.+48     	; 0xc50 <effect_rand_planeboing_z+0x6a>
     c20:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
     c24:	b8 01       	movw	r22, r16
     c26:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__divmodhi4>
			if (k>1)
     c2a:	82 30       	cpi	r24, 0x02	; 2
     c2c:	91 05       	cpc	r25, r1
     c2e:	2c f0       	brlt	.+10     	; 0xc3a <effect_rand_planeboing_z+0x54>
			{
				set_voxel(i,j,0);
     c30:	c7 01       	movw	r24, r14
     c32:	be 01       	movw	r22, r28
     c34:	a6 01       	movw	r20, r12
     c36:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_voxel>
	int i,j,k,x,y,a,b;
	int z=0;
	clear();
	for (i=0;i<CUBE_SIZE;i++)
	{
		for (j=0;j<CUBE_SIZE;j++)
     c3a:	21 96       	adiw	r28, 0x01	; 1
     c3c:	ca 30       	cpi	r28, 0x0A	; 10
     c3e:	d1 05       	cpc	r29, r1
     c40:	79 f7       	brne	.-34     	; 0xc20 <effect_rand_planeboing_z+0x3a>
void effect_rand_planeboing_z(int n, int delay)
{
	int i,j,k,x,y,a,b;
	int z=0;
	clear();
	for (i=0;i<CUBE_SIZE;i++)
     c42:	08 94       	sec
     c44:	e1 1c       	adc	r14, r1
     c46:	f1 1c       	adc	r15, r1
     c48:	8a e0       	ldi	r24, 0x0A	; 10
     c4a:	e8 16       	cp	r14, r24
     c4c:	f1 04       	cpc	r15, r1
     c4e:	c9 f0       	breq	.+50     	; 0xc82 <effect_rand_planeboing_z+0x9c>
		delay_ms(delay);
	}
}

void effect_rand_planeboing_z(int n, int delay)
{
     c50:	e6 01       	movw	r28, r12
     c52:	e6 cf       	rjmp	.-52     	; 0xc20 <effect_rand_planeboing_z+0x3a>
	}
	for (i=0;i<CUBE_SIZE;i++)
	{
		for (j=0;j<CUBE_SIZE;j++)
		{
			if (!getvoxel(i,j,0))
     c54:	c8 01       	movw	r24, r16
     c56:	be 01       	movw	r22, r28
     c58:	a7 01       	movw	r20, r14
     c5a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <getvoxel>
     c5e:	88 23       	and	r24, r24
     c60:	31 f4       	brne	.+12     	; 0xc6e <effect_rand_planeboing_z+0x88>
			{
				set_voxel(i,j,CUBE_SIZE-1);
     c62:	c8 01       	movw	r24, r16
     c64:	be 01       	movw	r22, r28
     c66:	49 e0       	ldi	r20, 0x09	; 9
     c68:	50 e0       	ldi	r21, 0x00	; 0
     c6a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_voxel>
			}
		}
	}
	for (i=0;i<CUBE_SIZE;i++)
	{
		for (j=0;j<CUBE_SIZE;j++)
     c6e:	21 96       	adiw	r28, 0x01	; 1
     c70:	ca 30       	cpi	r28, 0x0A	; 10
     c72:	d1 05       	cpc	r29, r1
     c74:	79 f7       	brne	.-34     	; 0xc54 <effect_rand_planeboing_z+0x6e>
			{
				set_voxel(i,j,0);
			}
		}
	}
	for (i=0;i<CUBE_SIZE;i++)
     c76:	0f 5f       	subi	r16, 0xFF	; 255
     c78:	1f 4f       	sbci	r17, 0xFF	; 255
     c7a:	0a 30       	cpi	r16, 0x0A	; 10
     c7c:	11 05       	cpc	r17, r1
     c7e:	29 f4       	brne	.+10     	; 0xc8a <effect_rand_planeboing_z+0xa4>
     c80:	06 c0       	rjmp	.+12     	; 0xc8e <effect_rand_planeboing_z+0xa8>
void effect_rand_planeboing_z(int n, int delay)
{
	int i,j,k,x,y,a,b;
	int z=0;
	clear();
	for (i=0;i<CUBE_SIZE;i++)
     c82:	00 e0       	ldi	r16, 0x00	; 0
     c84:	10 e0       	ldi	r17, 0x00	; 0
     c86:	ee 24       	eor	r14, r14
     c88:	ff 24       	eor	r15, r15
     c8a:	e7 01       	movw	r28, r14
     c8c:	e3 cf       	rjmp	.-58     	; 0xc54 <effect_rand_planeboing_z+0x6e>
			{
				set_voxel(i,j,CUBE_SIZE-1);
			}
		}
	}
	for (i=0;i<n;i++)
     c8e:	18 14       	cp	r1, r8
     c90:	19 04       	cpc	r1, r9
     c92:	0c f4       	brge	.+2      	; 0xc96 <effect_rand_planeboing_z+0xb0>
     c94:	3f c0       	rjmp	.+126    	; 0xd14 <effect_rand_planeboing_z+0x12e>
     c96:	29 c0       	rjmp	.+82     	; 0xcea <effect_rand_planeboing_z+0x104>
	{
		x = rand() % CUBE_SIZE-1;
     c98:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
     c9c:	b5 01       	movw	r22, r10
     c9e:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__divmodhi4>
     ca2:	7c 01       	movw	r14, r24
     ca4:	08 94       	sec
     ca6:	e1 08       	sbc	r14, r1
     ca8:	f1 08       	sbc	r15, r1
		y = rand() % CUBE_SIZE-1;
     caa:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
     cae:	b5 01       	movw	r22, r10
     cb0:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__divmodhi4>
     cb4:	6c 01       	movw	r12, r24
     cb6:	08 94       	sec
     cb8:	c1 08       	sbc	r12, r1
     cba:	d1 08       	sbc	r13, r1
		if (z==0)
     cbc:	01 15       	cp	r16, r1
     cbe:	11 05       	cpc	r17, r1
     cc0:	11 f4       	brne	.+4      	; 0xcc6 <effect_rand_planeboing_z+0xe0>
		{z=CUBE_SIZE-1;}
     cc2:	82 01       	movw	r16, r4
     cc4:	01 c0       	rjmp	.+2      	; 0xcc8 <effect_rand_planeboing_z+0xe2>
		else
		{z=0;}
     cc6:	83 01       	movw	r16, r6
		if (~(x==a||y==b)&&getvoxel(x,y,z))
     cc8:	c7 01       	movw	r24, r14
     cca:	b6 01       	movw	r22, r12
     ccc:	a8 01       	movw	r20, r16
     cce:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <getvoxel>
     cd2:	88 23       	and	r24, r24
     cd4:	31 f0       	breq	.+12     	; 0xce2 <effect_rand_planeboing_z+0xfc>
		{
			sendvoxel_z(x,y,z,delay);
     cd6:	8e 2d       	mov	r24, r14
     cd8:	6c 2d       	mov	r22, r12
     cda:	40 2f       	mov	r20, r16
     cdc:	91 01       	movw	r18, r2
     cde:	0e 94 a2 05 	call	0xb44	; 0xb44 <sendvoxel_z>
			{
				set_voxel(i,j,CUBE_SIZE-1);
			}
		}
	}
	for (i=0;i<n;i++)
     ce2:	21 96       	adiw	r28, 0x01	; 1
     ce4:	c8 15       	cp	r28, r8
     ce6:	d9 05       	cpc	r29, r9
     ce8:	bc f2       	brlt	.-82     	; 0xc98 <effect_rand_planeboing_z+0xb2>
		{
			sendvoxel_z(x,y,z,delay);
		}
		a=x;b=y;
	}
	clear();
     cea:	0e 94 e6 03 	call	0x7cc	; 0x7cc <clear>
}
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	1f 91       	pop	r17
     cf4:	0f 91       	pop	r16
     cf6:	ff 90       	pop	r15
     cf8:	ef 90       	pop	r14
     cfa:	df 90       	pop	r13
     cfc:	cf 90       	pop	r12
     cfe:	bf 90       	pop	r11
     d00:	af 90       	pop	r10
     d02:	9f 90       	pop	r9
     d04:	8f 90       	pop	r8
     d06:	7f 90       	pop	r7
     d08:	6f 90       	pop	r6
     d0a:	5f 90       	pop	r5
     d0c:	4f 90       	pop	r4
     d0e:	3f 90       	pop	r3
     d10:	2f 90       	pop	r2
     d12:	08 95       	ret
			}
		}
	}
	for (i=0;i<n;i++)
	{
		x = rand() % CUBE_SIZE-1;
     d14:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
     d18:	ca e0       	ldi	r28, 0x0A	; 10
     d1a:	d0 e0       	ldi	r29, 0x00	; 0
     d1c:	be 01       	movw	r22, r28
     d1e:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__divmodhi4>
     d22:	7c 01       	movw	r14, r24
     d24:	08 94       	sec
     d26:	e1 08       	sbc	r14, r1
     d28:	f1 08       	sbc	r15, r1
		y = rand() % CUBE_SIZE-1;
     d2a:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
     d2e:	be 01       	movw	r22, r28
     d30:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__divmodhi4>
     d34:	6c 01       	movw	r12, r24
     d36:	08 94       	sec
     d38:	c1 08       	sbc	r12, r1
     d3a:	d1 08       	sbc	r13, r1
     d3c:	c0 e0       	ldi	r28, 0x00	; 0
     d3e:	d0 e0       	ldi	r29, 0x00	; 0
		if (z==0)
		{z=CUBE_SIZE-1;}
     d40:	09 e0       	ldi	r16, 0x09	; 9
     d42:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
	}
	for (i=0;i<n;i++)
	{
		x = rand() % CUBE_SIZE-1;
     d44:	0f 2e       	mov	r0, r31
     d46:	fa e0       	ldi	r31, 0x0A	; 10
     d48:	af 2e       	mov	r10, r31
     d4a:	bb 24       	eor	r11, r11
     d4c:	f0 2d       	mov	r31, r0
		y = rand() % CUBE_SIZE-1;
		if (z==0)
		{z=CUBE_SIZE-1;}
		else
		{z=0;}
     d4e:	66 24       	eor	r6, r6
     d50:	77 24       	eor	r7, r7
	for (i=0;i<n;i++)
	{
		x = rand() % CUBE_SIZE-1;
		y = rand() % CUBE_SIZE-1;
		if (z==0)
		{z=CUBE_SIZE-1;}
     d52:	0f 2e       	mov	r0, r31
     d54:	f9 e0       	ldi	r31, 0x09	; 9
     d56:	4f 2e       	mov	r4, r31
     d58:	55 24       	eor	r5, r5
     d5a:	f0 2d       	mov	r31, r0
     d5c:	b5 cf       	rjmp	.-150    	; 0xcc8 <effect_rand_planeboing_z+0xe2>

00000d5e <effect_rain>:
	clear();
}

// As name indicates
void effect_rain (int iterations,int delay)
{
     d5e:	2f 92       	push	r2
     d60:	3f 92       	push	r3
     d62:	4f 92       	push	r4
     d64:	5f 92       	push	r5
     d66:	6f 92       	push	r6
     d68:	7f 92       	push	r7
     d6a:	8f 92       	push	r8
     d6c:	9f 92       	push	r9
     d6e:	af 92       	push	r10
     d70:	bf 92       	push	r11
     d72:	cf 92       	push	r12
     d74:	df 92       	push	r13
     d76:	ef 92       	push	r14
     d78:	ff 92       	push	r15
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	4c 01       	movw	r8, r24
     d84:	3b 01       	movw	r6, r22
	int i, ii;
	int rnd_x;
	int rnd_y;
	int rnd_num;
	
	for (ii=0;ii<iterations;ii++)
     d86:	18 16       	cp	r1, r24
     d88:	19 06       	cpc	r1, r25
     d8a:	f4 f5       	brge	.+124    	; 0xe08 <effect_rain+0xaa>
     d8c:	aa 24       	eor	r10, r10
     d8e:	bb 24       	eor	r11, r11
	{
		rnd_num = rand()%4;
     d90:	44 24       	eor	r4, r4
     d92:	55 24       	eor	r5, r5
     d94:	68 94       	set
     d96:	42 f8       	bld	r4, 2
		
		for (i=0; i < rnd_num;i++)
     d98:	22 24       	eor	r2, r2
     d9a:	33 24       	eor	r3, r3
		{
			rnd_x = rand()%10;
     d9c:	0f 2e       	mov	r0, r31
     d9e:	fa e0       	ldi	r31, 0x0A	; 10
     da0:	ef 2e       	mov	r14, r31
     da2:	ff 24       	eor	r15, r15
     da4:	f0 2d       	mov	r31, r0
	int rnd_y;
	int rnd_num;
	
	for (ii=0;ii<iterations;ii++)
	{
		rnd_num = rand()%4;
     da6:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
     daa:	b2 01       	movw	r22, r4
     dac:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__divmodhi4>
     db0:	6c 01       	movw	r12, r24
		
		for (i=0; i < rnd_num;i++)
     db2:	18 16       	cp	r1, r24
     db4:	19 06       	cpc	r1, r25
     db6:	d4 f4       	brge	.+52     	; 0xdec <effect_rain+0x8e>
     db8:	e1 01       	movw	r28, r2
		{
			rnd_x = rand()%10;
     dba:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
     dbe:	8c 01       	movw	r16, r24
			rnd_y = rand()%10;
     dc0:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
     dc4:	fc 01       	movw	r30, r24
	{
		rnd_num = rand()%4;
		
		for (i=0; i < rnd_num;i++)
		{
			rnd_x = rand()%10;
     dc6:	c8 01       	movw	r24, r16
     dc8:	b7 01       	movw	r22, r14
     dca:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__divmodhi4>
     dce:	9c 01       	movw	r18, r24
			rnd_y = rand()%10;
     dd0:	cf 01       	movw	r24, r30
     dd2:	b7 01       	movw	r22, r14
     dd4:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__divmodhi4>
     dd8:	bc 01       	movw	r22, r24
			set_voxel(rnd_x,rnd_y,9);
     dda:	c9 01       	movw	r24, r18
     ddc:	49 e0       	ldi	r20, 0x09	; 9
     dde:	50 e0       	ldi	r21, 0x00	; 0
     de0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_voxel>
	
	for (ii=0;ii<iterations;ii++)
	{
		rnd_num = rand()%4;
		
		for (i=0; i < rnd_num;i++)
     de4:	21 96       	adiw	r28, 0x01	; 1
     de6:	cc 15       	cp	r28, r12
     de8:	dd 05       	cpc	r29, r13
     dea:	3c f3       	brlt	.-50     	; 0xdba <effect_rain+0x5c>
			rnd_x = rand()%10;
			rnd_y = rand()%10;
			set_voxel(rnd_x,rnd_y,9);
		}
		
		delay_ms(delay);
     dec:	c3 01       	movw	r24, r6
     dee:	0e 94 0d 04 	call	0x81a	; 0x81a <delay_ms>
		shift(AXIS_Z,-1);
     df2:	8a e7       	ldi	r24, 0x7A	; 122
     df4:	6f ef       	ldi	r22, 0xFF	; 255
     df6:	7f ef       	ldi	r23, 0xFF	; 255
     df8:	0e 94 1e 04 	call	0x83c	; 0x83c <shift>
	int i, ii;
	int rnd_x;
	int rnd_y;
	int rnd_num;
	
	for (ii=0;ii<iterations;ii++)
     dfc:	08 94       	sec
     dfe:	a1 1c       	adc	r10, r1
     e00:	b1 1c       	adc	r11, r1
     e02:	a8 14       	cp	r10, r8
     e04:	b9 04       	cpc	r11, r9
     e06:	7c f2       	brlt	.-98     	; 0xda6 <effect_rain+0x48>
		}
		
		delay_ms(delay);
		shift(AXIS_Z,-1);
	}
}
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	1f 91       	pop	r17
     e0e:	0f 91       	pop	r16
     e10:	ff 90       	pop	r15
     e12:	ef 90       	pop	r14
     e14:	df 90       	pop	r13
     e16:	cf 90       	pop	r12
     e18:	bf 90       	pop	r11
     e1a:	af 90       	pop	r10
     e1c:	9f 90       	pop	r9
     e1e:	8f 90       	pop	r8
     e20:	7f 90       	pop	r7
     e22:	6f 90       	pop	r6
     e24:	5f 90       	pop	r5
     e26:	4f 90       	pop	r4
     e28:	3f 90       	pop	r3
     e2a:	2f 90       	pop	r2
     e2c:	08 95       	ret

00000e2e <effect_stars>:

// Horizontal rain
void effect_stars (int iterations,int delay)
{
     e2e:	2f 92       	push	r2
     e30:	3f 92       	push	r3
     e32:	4f 92       	push	r4
     e34:	5f 92       	push	r5
     e36:	6f 92       	push	r6
     e38:	7f 92       	push	r7
     e3a:	8f 92       	push	r8
     e3c:	9f 92       	push	r9
     e3e:	af 92       	push	r10
     e40:	bf 92       	push	r11
     e42:	cf 92       	push	r12
     e44:	df 92       	push	r13
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	4c 01       	movw	r8, r24
     e54:	3b 01       	movw	r6, r22
	int i, ii;
	int rnd_x;
	int rnd_z;
	int rnd_num;
	
	for (ii=0;ii<iterations;ii++)
     e56:	18 16       	cp	r1, r24
     e58:	19 06       	cpc	r1, r25
     e5a:	f4 f5       	brge	.+124    	; 0xed8 <effect_stars+0xaa>
     e5c:	aa 24       	eor	r10, r10
     e5e:	bb 24       	eor	r11, r11
	{
		rnd_num = rand()%4;
     e60:	44 24       	eor	r4, r4
     e62:	55 24       	eor	r5, r5
     e64:	68 94       	set
     e66:	42 f8       	bld	r4, 2
		
		for (i=0; i < rnd_num;i++)
     e68:	22 24       	eor	r2, r2
     e6a:	33 24       	eor	r3, r3
		{
			rnd_x = rand()%10;
     e6c:	0f 2e       	mov	r0, r31
     e6e:	fa e0       	ldi	r31, 0x0A	; 10
     e70:	ef 2e       	mov	r14, r31
     e72:	ff 24       	eor	r15, r15
     e74:	f0 2d       	mov	r31, r0
	int rnd_z;
	int rnd_num;
	
	for (ii=0;ii<iterations;ii++)
	{
		rnd_num = rand()%4;
     e76:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
     e7a:	b2 01       	movw	r22, r4
     e7c:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__divmodhi4>
     e80:	6c 01       	movw	r12, r24
		
		for (i=0; i < rnd_num;i++)
     e82:	18 16       	cp	r1, r24
     e84:	19 06       	cpc	r1, r25
     e86:	d4 f4       	brge	.+52     	; 0xebc <effect_stars+0x8e>
     e88:	e1 01       	movw	r28, r2
		{
			rnd_x = rand()%10;
     e8a:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
     e8e:	8c 01       	movw	r16, r24
			rnd_z = rand()%10;
     e90:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
     e94:	fc 01       	movw	r30, r24
	{
		rnd_num = rand()%4;
		
		for (i=0; i < rnd_num;i++)
		{
			rnd_x = rand()%10;
     e96:	c8 01       	movw	r24, r16
     e98:	b7 01       	movw	r22, r14
     e9a:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__divmodhi4>
     e9e:	9c 01       	movw	r18, r24
			rnd_z = rand()%10;
     ea0:	cf 01       	movw	r24, r30
     ea2:	b7 01       	movw	r22, r14
     ea4:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__divmodhi4>
     ea8:	ac 01       	movw	r20, r24
			set_voxel(rnd_x,CUBE_SIZE-1,rnd_z);
     eaa:	c9 01       	movw	r24, r18
     eac:	69 e0       	ldi	r22, 0x09	; 9
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_voxel>
	
	for (ii=0;ii<iterations;ii++)
	{
		rnd_num = rand()%4;
		
		for (i=0; i < rnd_num;i++)
     eb4:	21 96       	adiw	r28, 0x01	; 1
     eb6:	cc 15       	cp	r28, r12
     eb8:	dd 05       	cpc	r29, r13
     eba:	3c f3       	brlt	.-50     	; 0xe8a <effect_stars+0x5c>
			rnd_x = rand()%10;
			rnd_z = rand()%10;
			set_voxel(rnd_x,CUBE_SIZE-1,rnd_z);
		}
		
		delay_ms(delay);
     ebc:	c3 01       	movw	r24, r6
     ebe:	0e 94 0d 04 	call	0x81a	; 0x81a <delay_ms>
		shift(AXIS_Y,-1);
     ec2:	89 e7       	ldi	r24, 0x79	; 121
     ec4:	6f ef       	ldi	r22, 0xFF	; 255
     ec6:	7f ef       	ldi	r23, 0xFF	; 255
     ec8:	0e 94 1e 04 	call	0x83c	; 0x83c <shift>
	int i, ii;
	int rnd_x;
	int rnd_z;
	int rnd_num;
	
	for (ii=0;ii<iterations;ii++)
     ecc:	08 94       	sec
     ece:	a1 1c       	adc	r10, r1
     ed0:	b1 1c       	adc	r11, r1
     ed2:	a8 14       	cp	r10, r8
     ed4:	b9 04       	cpc	r11, r9
     ed6:	7c f2       	brlt	.-98     	; 0xe76 <effect_stars+0x48>
		}
		
		delay_ms(delay);
		shift(AXIS_Y,-1);
	}
}
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	ff 90       	pop	r15
     ee2:	ef 90       	pop	r14
     ee4:	df 90       	pop	r13
     ee6:	cf 90       	pop	r12
     ee8:	bf 90       	pop	r11
     eea:	af 90       	pop	r10
     eec:	9f 90       	pop	r9
     eee:	8f 90       	pop	r8
     ef0:	7f 90       	pop	r7
     ef2:	6f 90       	pop	r6
     ef4:	5f 90       	pop	r5
     ef6:	4f 90       	pop	r4
     ef8:	3f 90       	pop	r3
     efa:	2f 90       	pop	r2
     efc:	08 95       	ret

00000efe <effect_randfill>:

// Fills the cube voxel for voxel at random positions
void effect_randfill (int iterations,int delay)
{
     efe:	8f 92       	push	r8
     f00:	9f 92       	push	r9
     f02:	af 92       	push	r10
     f04:	bf 92       	push	r11
     f06:	cf 92       	push	r12
     f08:	df 92       	push	r13
     f0a:	ef 92       	push	r14
     f0c:	ff 92       	push	r15
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	5c 01       	movw	r10, r24
     f18:	4b 01       	movw	r8, r22
	for (int i=0;i<iterations;i++)
     f1a:	18 16       	cp	r1, r24
     f1c:	19 06       	cpc	r1, r25
     f1e:	5c f5       	brge	.+86     	; 0xf76 <effect_randfill+0x78>
     f20:	00 e0       	ldi	r16, 0x00	; 0
     f22:	10 e0       	ldi	r17, 0x00	; 0
	{
		set_voxel(rand()%CUBE_SIZE,rand()%CUBE_SIZE,rand()%CUBE_SIZE);
     f24:	0f 2e       	mov	r0, r31
     f26:	fa e0       	ldi	r31, 0x0A	; 10
     f28:	ef 2e       	mov	r14, r31
     f2a:	ff 24       	eor	r15, r15
     f2c:	f0 2d       	mov	r31, r0
     f2e:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
     f32:	ec 01       	movw	r28, r24
     f34:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
     f38:	6c 01       	movw	r12, r24
     f3a:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
     f3e:	fc 01       	movw	r30, r24
     f40:	ce 01       	movw	r24, r28
     f42:	b7 01       	movw	r22, r14
     f44:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__divmodhi4>
     f48:	9c 01       	movw	r18, r24
     f4a:	c6 01       	movw	r24, r12
     f4c:	b7 01       	movw	r22, r14
     f4e:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__divmodhi4>
     f52:	ec 01       	movw	r28, r24
     f54:	cf 01       	movw	r24, r30
     f56:	b7 01       	movw	r22, r14
     f58:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__divmodhi4>
     f5c:	ac 01       	movw	r20, r24
     f5e:	c9 01       	movw	r24, r18
     f60:	be 01       	movw	r22, r28
     f62:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_voxel>
		delay_ms(delay);
     f66:	c4 01       	movw	r24, r8
     f68:	0e 94 0d 04 	call	0x81a	; 0x81a <delay_ms>
}

// Fills the cube voxel for voxel at random positions
void effect_randfill (int iterations,int delay)
{
	for (int i=0;i<iterations;i++)
     f6c:	0f 5f       	subi	r16, 0xFF	; 255
     f6e:	1f 4f       	sbci	r17, 0xFF	; 255
     f70:	0a 15       	cp	r16, r10
     f72:	1b 05       	cpc	r17, r11
     f74:	e4 f2       	brlt	.-72     	; 0xf2e <effect_randfill+0x30>
	{
		set_voxel(rand()%CUBE_SIZE,rand()%CUBE_SIZE,rand()%CUBE_SIZE);
		delay_ms(delay);
	}
	clear();
     f76:	0e 94 e6 03 	call	0x7cc	; 0x7cc <clear>
}
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	ff 90       	pop	r15
     f84:	ef 90       	pop	r14
     f86:	df 90       	pop	r13
     f88:	cf 90       	pop	r12
     f8a:	bf 90       	pop	r11
     f8c:	af 90       	pop	r10
     f8e:	9f 90       	pop	r9
     f90:	8f 90       	pop	r8
     f92:	08 95       	ret

00000f94 <effect_randfill2>:

void effect_randfill2(int iterations,int delay)
{
     f94:	6f 92       	push	r6
     f96:	7f 92       	push	r7
     f98:	8f 92       	push	r8
     f9a:	9f 92       	push	r9
     f9c:	af 92       	push	r10
     f9e:	bf 92       	push	r11
     fa0:	cf 92       	push	r12
     fa2:	df 92       	push	r13
     fa4:	ef 92       	push	r14
     fa6:	ff 92       	push	r15
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	4c 01       	movw	r8, r24
     fb2:	8b 01       	movw	r16, r22
	for (int i=0;i<iterations;i++)
     fb4:	18 16       	cp	r1, r24
     fb6:	19 06       	cpc	r1, r25
     fb8:	bc f5       	brge	.+110    	; 0x1028 <effect_randfill2+0x94>
     fba:	ee 24       	eor	r14, r14
     fbc:	ff 24       	eor	r15, r15
	{
		set_voxel(rand()%CUBE_SIZE,rand()%CUBE_SIZE,rand()%CUBE_SIZE);
     fbe:	0f 2e       	mov	r0, r31
     fc0:	fa e0       	ldi	r31, 0x0A	; 10
     fc2:	cf 2e       	mov	r12, r31
     fc4:	dd 24       	eor	r13, r13
     fc6:	f0 2d       	mov	r31, r0
		delay_ms(delay);
		if (delay <0)
		{
			delay = 6;
     fc8:	0f 2e       	mov	r0, r31
     fca:	f6 e0       	ldi	r31, 0x06	; 6
     fcc:	6f 2e       	mov	r6, r31
     fce:	77 24       	eor	r7, r7
     fd0:	f0 2d       	mov	r31, r0

void effect_randfill2(int iterations,int delay)
{
	for (int i=0;i<iterations;i++)
	{
		set_voxel(rand()%CUBE_SIZE,rand()%CUBE_SIZE,rand()%CUBE_SIZE);
     fd2:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
     fd6:	ec 01       	movw	r28, r24
     fd8:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
     fdc:	5c 01       	movw	r10, r24
     fde:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
     fe2:	fc 01       	movw	r30, r24
     fe4:	ce 01       	movw	r24, r28
     fe6:	b6 01       	movw	r22, r12
     fe8:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__divmodhi4>
     fec:	9c 01       	movw	r18, r24
     fee:	c5 01       	movw	r24, r10
     ff0:	b6 01       	movw	r22, r12
     ff2:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__divmodhi4>
     ff6:	ec 01       	movw	r28, r24
     ff8:	cf 01       	movw	r24, r30
     ffa:	b6 01       	movw	r22, r12
     ffc:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__divmodhi4>
    1000:	ac 01       	movw	r20, r24
    1002:	c9 01       	movw	r24, r18
    1004:	be 01       	movw	r22, r28
    1006:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_voxel>
		delay_ms(delay);
    100a:	c8 01       	movw	r24, r16
    100c:	0e 94 0d 04 	call	0x81a	; 0x81a <delay_ms>
		if (delay <0)
    1010:	11 23       	and	r17, r17
    1012:	1c f0       	brlt	.+6      	; 0x101a <effect_randfill2+0x86>
		{
			delay = 6;
		}
		else
		{
			delay -= 1;
    1014:	01 50       	subi	r16, 0x01	; 1
    1016:	10 40       	sbci	r17, 0x00	; 0
    1018:	01 c0       	rjmp	.+2      	; 0x101c <effect_randfill2+0x88>
	{
		set_voxel(rand()%CUBE_SIZE,rand()%CUBE_SIZE,rand()%CUBE_SIZE);
		delay_ms(delay);
		if (delay <0)
		{
			delay = 6;
    101a:	83 01       	movw	r16, r6
	clear();
}

void effect_randfill2(int iterations,int delay)
{
	for (int i=0;i<iterations;i++)
    101c:	08 94       	sec
    101e:	e1 1c       	adc	r14, r1
    1020:	f1 1c       	adc	r15, r1
    1022:	e8 14       	cp	r14, r8
    1024:	f9 04       	cpc	r15, r9
    1026:	ac f2       	brlt	.-86     	; 0xfd2 <effect_randfill2+0x3e>
		{
			delay -= 1;
		}
	}
	//clear();
}
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	1f 91       	pop	r17
    102e:	0f 91       	pop	r16
    1030:	ff 90       	pop	r15
    1032:	ef 90       	pop	r14
    1034:	df 90       	pop	r13
    1036:	cf 90       	pop	r12
    1038:	bf 90       	pop	r11
    103a:	af 90       	pop	r10
    103c:	9f 90       	pop	r9
    103e:	8f 90       	pop	r8
    1040:	7f 90       	pop	r7
    1042:	6f 90       	pop	r6
    1044:	08 95       	ret

00001046 <effect_stringfly2>:


// From instructables 8x8x8
void effect_stringfly2(char * str)
{
    1046:	2f 92       	push	r2
    1048:	3f 92       	push	r3
    104a:	4f 92       	push	r4
    104c:	5f 92       	push	r5
    104e:	6f 92       	push	r6
    1050:	7f 92       	push	r7
    1052:	8f 92       	push	r8
    1054:	9f 92       	push	r9
    1056:	af 92       	push	r10
    1058:	bf 92       	push	r11
    105a:	cf 92       	push	r12
    105c:	df 92       	push	r13
    105e:	ef 92       	push	r14
    1060:	ff 92       	push	r15
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	00 d0       	rcall	.+0      	; 0x106c <effect_stringfly2+0x26>
    106c:	00 d0       	rcall	.+0      	; 0x106e <effect_stringfly2+0x28>
    106e:	0f 92       	push	r0
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
	int x,z,i;
	unsigned char chr[5];
	
	while (*str)
    1074:	68 2e       	mov	r6, r24
    1076:	79 2e       	mov	r7, r25
	{
		font_getchar(*str++, chr);
    1078:	2e 01       	movw	r4, r28
    107a:	08 94       	sec
    107c:	41 1c       	adc	r4, r1
    107e:	51 1c       	adc	r5, r1
    1080:	22 24       	eor	r2, r2
    1082:	33 24       	eor	r3, r3
    1084:	68 94       	set
    1086:	21 f8       	bld	r2, 1
        // Put a character on the back of the cube
		for (x = 0; x < 5; x++)
		{
			for (z = 0; z < 8; z++)
			{
				if ((chr[x] & (0x80>>z)))
    1088:	ee 24       	eor	r14, r14
    108a:	ff 24       	eor	r15, r15
    108c:	68 94       	set
    108e:	e7 f8       	bld	r14, 7
}


// From instructables 8x8x8
void effect_stringfly2(char * str)
{
    1090:	88 24       	eor	r8, r8
    1092:	99 24       	eor	r9, r9
	int x,z,i;
	unsigned char chr[5];
	
	while (*str)
    1094:	39 c0       	rjmp	.+114    	; 0x1108 <effect_stringfly2+0xc2>
	{
		font_getchar(*str++, chr);
    1096:	b2 01       	movw	r22, r4
    1098:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <font_getchar>
    109c:	62 01       	movw	r12, r4
    109e:	51 01       	movw	r10, r2
    10a0:	23 c0       	rjmp	.+70     	; 0x10e8 <effect_stringfly2+0xa2>
        // Put a character on the back of the cube
		for (x = 0; x < 5; x++)
		{
			for (z = 0; z < 8; z++)
			{
				if ((chr[x] & (0x80>>z)))
    10a2:	97 01       	movw	r18, r14
    10a4:	00 2e       	mov	r0, r16
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <effect_stringfly2+0x66>
    10a8:	35 95       	asr	r19
    10aa:	27 95       	ror	r18
    10ac:	0a 94       	dec	r0
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <effect_stringfly2+0x62>
    10b0:	f6 01       	movw	r30, r12
    10b2:	80 81       	ld	r24, Z
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	82 23       	and	r24, r18
    10b8:	93 23       	and	r25, r19
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	31 f0       	breq	.+12     	; 0x10ca <effect_stringfly2+0x84>
				{
					set_voxel(x+2,(CUBE_SIZE-1),z);
    10be:	c5 01       	movw	r24, r10
    10c0:	69 e0       	ldi	r22, 0x09	; 9
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	a8 01       	movw	r20, r16
    10c6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_voxel>
		font_getchar(*str++, chr);
		
        // Put a character on the back of the cube
		for (x = 0; x < 5; x++)
		{
			for (z = 0; z < 8; z++)
    10ca:	0f 5f       	subi	r16, 0xFF	; 255
    10cc:	1f 4f       	sbci	r17, 0xFF	; 255
    10ce:	08 30       	cpi	r16, 0x08	; 8
    10d0:	11 05       	cpc	r17, r1
    10d2:	39 f7       	brne	.-50     	; 0x10a2 <effect_stringfly2+0x5c>
    10d4:	08 94       	sec
    10d6:	c1 1c       	adc	r12, r1
    10d8:	d1 1c       	adc	r13, r1
    10da:	08 94       	sec
    10dc:	a1 1c       	adc	r10, r1
    10de:	b1 1c       	adc	r11, r1
	while (*str)
	{
		font_getchar(*str++, chr);
		
        // Put a character on the back of the cube
		for (x = 0; x < 5; x++)
    10e0:	f7 e0       	ldi	r31, 0x07	; 7
    10e2:	af 16       	cp	r10, r31
    10e4:	b1 04       	cpc	r11, r1
    10e6:	11 f0       	breq	.+4      	; 0x10ec <effect_stringfly2+0xa6>
}


// From instructables 8x8x8
void effect_stringfly2(char * str)
{
    10e8:	84 01       	movw	r16, r8
    10ea:	db cf       	rjmp	.-74     	; 0x10a2 <effect_stringfly2+0x5c>
	while (*str)
	{
		font_getchar(*str++, chr);
		
        // Put a character on the back of the cube
		for (x = 0; x < 5; x++)
    10ec:	06 e0       	ldi	r16, 0x06	; 6
    10ee:	10 e0       	ldi	r17, 0x00	; 0
		
        // Shift the entire contents of the cube forward by 6 steps
        // before placing the next character
		for (i = 0; i<6; i++)
		{
			delay_ms(100);
    10f0:	84 e6       	ldi	r24, 0x64	; 100
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 0d 04 	call	0x81a	; 0x81a <delay_ms>
            shift(AXIS_Y,-1);
    10f8:	89 e7       	ldi	r24, 0x79	; 121
    10fa:	6f ef       	ldi	r22, 0xFF	; 255
    10fc:	7f ef       	ldi	r23, 0xFF	; 255
    10fe:	0e 94 1e 04 	call	0x83c	; 0x83c <shift>
    1102:	01 50       	subi	r16, 0x01	; 1
    1104:	10 40       	sbci	r17, 0x00	; 0
			}
		}
		
        // Shift the entire contents of the cube forward by 6 steps
        // before placing the next character
		for (i = 0; i<6; i++)
    1106:	a1 f7       	brne	.-24     	; 0x10f0 <effect_stringfly2+0xaa>
void effect_stringfly2(char * str)
{
	int x,z,i;
	unsigned char chr[5];
	
	while (*str)
    1108:	f3 01       	movw	r30, r6
    110a:	81 91       	ld	r24, Z+
    110c:	3f 01       	movw	r6, r30
    110e:	88 23       	and	r24, r24
    1110:	09 f0       	breq	.+2      	; 0x1114 <effect_stringfly2+0xce>
    1112:	c1 cf       	rjmp	.-126    	; 0x1096 <effect_stringfly2+0x50>
    1114:	00 e0       	ldi	r16, 0x00	; 0
    1116:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
    // Shift the last character out of the cube.
	for (i = 0; i<CUBE_SIZE; i++)
	{
		delay_ms(100);
    1118:	84 e6       	ldi	r24, 0x64	; 100
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 0d 04 	call	0x81a	; 0x81a <delay_ms>
        shift(AXIS_Y,-1);
    1120:	89 e7       	ldi	r24, 0x79	; 121
    1122:	6f ef       	ldi	r22, 0xFF	; 255
    1124:	7f ef       	ldi	r23, 0xFF	; 255
    1126:	0e 94 1e 04 	call	0x83c	; 0x83c <shift>
			delay_ms(100);
            shift(AXIS_Y,-1);
		}
	}
    // Shift the last character out of the cube.
	for (i = 0; i<CUBE_SIZE; i++)
    112a:	0f 5f       	subi	r16, 0xFF	; 255
    112c:	1f 4f       	sbci	r17, 0xFF	; 255
    112e:	0a 30       	cpi	r16, 0x0A	; 10
    1130:	11 05       	cpc	r17, r1
    1132:	91 f7       	brne	.-28     	; 0x1118 <effect_stringfly2+0xd2>
	{
		delay_ms(100);
        shift(AXIS_Y,-1);
	}
	
}
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	ff 90       	pop	r15
    1148:	ef 90       	pop	r14
    114a:	df 90       	pop	r13
    114c:	cf 90       	pop	r12
    114e:	bf 90       	pop	r11
    1150:	af 90       	pop	r10
    1152:	9f 90       	pop	r9
    1154:	8f 90       	pop	r8
    1156:	7f 90       	pop	r7
    1158:	6f 90       	pop	r6
    115a:	5f 90       	pop	r5
    115c:	4f 90       	pop	r4
    115e:	3f 90       	pop	r3
    1160:	2f 90       	pop	r2
    1162:	08 95       	ret

00001164 <effect_pathmove>:

// From instructables 8x8x8
void effect_pathmove (unsigned char *path, int length)
{
    1164:	af 92       	push	r10
    1166:	bf 92       	push	r11
    1168:	cf 92       	push	r12
    116a:	df 92       	push	r13
    116c:	ef 92       	push	r14
    116e:	ff 92       	push	r15
    1170:	0f 93       	push	r16
    1172:	1f 93       	push	r17
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	5c 01       	movw	r10, r24
	int i,z;
	unsigned char state;
	
	for (i=(length-1);i>=1;i--)
    117a:	7b 01       	movw	r14, r22
    117c:	08 94       	sec
    117e:	e1 08       	sbc	r14, r1
    1180:	f1 08       	sbc	r15, r1
    1182:	1e 14       	cp	r1, r14
    1184:	1f 04       	cpc	r1, r15
    1186:	84 f5       	brge	.+96     	; 0x11e8 <effect_pathmove+0x84>
	}
	
}

// From instructables 8x8x8
void effect_pathmove (unsigned char *path, int length)
    1188:	8b 01       	movw	r16, r22
    118a:	02 50       	subi	r16, 0x02	; 2
    118c:	10 40       	sbci	r17, 0x00	; 0
    118e:	08 0f       	add	r16, r24
    1190:	19 1f       	adc	r17, r25
{
    1192:	cc 24       	eor	r12, r12
    1194:	dd 24       	eor	r13, r13
    1196:	26 c0       	rjmp	.+76     	; 0x11e4 <effect_pathmove+0x80>
	for (i=(length-1);i>=1;i--)
	{
		for (z=0;z<CUBE_SIZE;z++)
		{
		
			state = getvoxel(((path[(i-1)]>>4) & 0x0f), (path[(i-1)] & 0x0f), z);
    1198:	f8 01       	movw	r30, r16
    119a:	60 81       	ld	r22, Z
    119c:	86 2f       	mov	r24, r22
    119e:	82 95       	swap	r24
    11a0:	8f 70       	andi	r24, 0x0F	; 15
    11a2:	70 e0       	ldi	r23, 0x00	; 0
    11a4:	6f 70       	andi	r22, 0x0F	; 15
    11a6:	70 70       	andi	r23, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	ae 01       	movw	r20, r28
    11ac:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <getvoxel>
    11b0:	28 2f       	mov	r18, r24
			altervoxel(((path[i]>>4) & 0x0f), (path[i] & 0x0f), z, state);
    11b2:	f8 01       	movw	r30, r16
    11b4:	61 81       	ldd	r22, Z+1	; 0x01
    11b6:	86 2f       	mov	r24, r22
    11b8:	82 95       	swap	r24
    11ba:	8f 70       	andi	r24, 0x0F	; 15
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	6f 70       	andi	r22, 0x0F	; 15
    11c0:	70 70       	andi	r23, 0x00	; 0
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	ae 01       	movw	r20, r28
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	0e 94 20 02 	call	0x440	; 0x440 <altervoxel>
	int i,z;
	unsigned char state;
	
	for (i=(length-1);i>=1;i--)
	{
		for (z=0;z<CUBE_SIZE;z++)
    11cc:	21 96       	adiw	r28, 0x01	; 1
    11ce:	ca 30       	cpi	r28, 0x0A	; 10
    11d0:	d1 05       	cpc	r29, r1
    11d2:	11 f7       	brne	.-60     	; 0x1198 <effect_pathmove+0x34>
void effect_pathmove (unsigned char *path, int length)
{
	int i,z;
	unsigned char state;
	
	for (i=(length-1);i>=1;i--)
    11d4:	08 94       	sec
    11d6:	e1 08       	sbc	r14, r1
    11d8:	f1 08       	sbc	r15, r1
    11da:	01 50       	subi	r16, 0x01	; 1
    11dc:	10 40       	sbci	r17, 0x00	; 0
    11de:	1e 14       	cp	r1, r14
    11e0:	1f 04       	cpc	r1, r15
    11e2:	14 f4       	brge	.+4      	; 0x11e8 <effect_pathmove+0x84>
	
}

// From instructables 8x8x8
void effect_pathmove (unsigned char *path, int length)
{
    11e4:	e6 01       	movw	r28, r12
    11e6:	d8 cf       	rjmp	.-80     	; 0x1198 <effect_pathmove+0x34>
    11e8:	c0 e0       	ldi	r28, 0x00	; 0
    11ea:	d0 e0       	ldi	r29, 0x00	; 0
			state = getvoxel(((path[(i-1)]>>4) & 0x0f), (path[(i-1)] & 0x0f), z);
			altervoxel(((path[i]>>4) & 0x0f), (path[i] & 0x0f), z, state);
		}
	}
	for (i=0;i<8;i++)
		clr_voxel(((path[0]>>4) & 0x0f), (path[0] & 0x0f),i);
    11ec:	f5 01       	movw	r30, r10
    11ee:	60 81       	ld	r22, Z
    11f0:	86 2f       	mov	r24, r22
    11f2:	82 95       	swap	r24
    11f4:	8f 70       	andi	r24, 0x0F	; 15
    11f6:	70 e0       	ldi	r23, 0x00	; 0
    11f8:	6f 70       	andi	r22, 0x0F	; 15
    11fa:	70 70       	andi	r23, 0x00	; 0
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	ae 01       	movw	r20, r28
    1200:	0e 94 9d 01 	call	0x33a	; 0x33a <clr_voxel>
		
			state = getvoxel(((path[(i-1)]>>4) & 0x0f), (path[(i-1)] & 0x0f), z);
			altervoxel(((path[i]>>4) & 0x0f), (path[i] & 0x0f), z, state);
		}
	}
	for (i=0;i<8;i++)
    1204:	21 96       	adiw	r28, 0x01	; 1
    1206:	c8 30       	cpi	r28, 0x08	; 8
    1208:	d1 05       	cpc	r29, r1
    120a:	81 f7       	brne	.-32     	; 0x11ec <effect_pathmove+0x88>
		clr_voxel(((path[0]>>4) & 0x0f), (path[0] & 0x0f),i);
}
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	ff 90       	pop	r15
    1216:	ef 90       	pop	r14
    1218:	df 90       	pop	r13
    121a:	cf 90       	pop	r12
    121c:	bf 90       	pop	r11
    121e:	af 90       	pop	r10
    1220:	08 95       	ret

00001222 <effect_rand_patharound>:

// From instructables 8x8x8
void effect_rand_patharound (int iterations, int delay)
{
    1222:	2f 92       	push	r2
    1224:	3f 92       	push	r3
    1226:	4f 92       	push	r4
    1228:	5f 92       	push	r5
    122a:	6f 92       	push	r6
    122c:	7f 92       	push	r7
    122e:	8f 92       	push	r8
    1230:	9f 92       	push	r9
    1232:	af 92       	push	r10
    1234:	bf 92       	push	r11
    1236:	cf 92       	push	r12
    1238:	df 92       	push	r13
    123a:	ef 92       	push	r14
    123c:	ff 92       	push	r15
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	a4 97       	sbiw	r28, 0x24	; 36
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	6c 01       	movw	r12, r24
    1258:	4b 01       	movw	r8, r22
	int z, dz, i;
	z = 4;
	unsigned char path[36];
	
	font_getpath(0,path,36);
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	be 01       	movw	r22, r28
    125e:	6f 5f       	subi	r22, 0xFF	; 255
    1260:	7f 4f       	sbci	r23, 0xFF	; 255
    1262:	44 e2       	ldi	r20, 0x24	; 36
    1264:	50 e0       	ldi	r21, 0x00	; 0
    1266:	0e 94 b6 0c 	call	0x196c	; 0x196c <font_getpath>
	
	for (i = 0; i < iterations; i++)
    126a:	1c 14       	cp	r1, r12
    126c:	1d 04       	cpc	r1, r13
    126e:	cc f5       	brge	.+114    	; 0x12e2 <effect_rand_patharound+0xc0>
    1270:	ee 24       	eor	r14, r14
    1272:	ff 24       	eor	r15, r15

// From instructables 8x8x8
void effect_rand_patharound (int iterations, int delay)
{
	int z, dz, i;
	z = 4;
    1274:	04 e0       	ldi	r16, 0x04	; 4
    1276:	10 e0       	ldi	r17, 0x00	; 0
	
	font_getpath(0,path,36);
	
	for (i = 0; i < iterations; i++)
	{
		dz = ((rand()%3)-1);
    1278:	0f 2e       	mov	r0, r31
    127a:	f3 e0       	ldi	r31, 0x03	; 3
    127c:	6f 2e       	mov	r6, r31
    127e:	77 24       	eor	r7, r7
    1280:	f0 2d       	mov	r31, r0
		z += dz;
    1282:	0f 2e       	mov	r0, r31
    1284:	f9 e0       	ldi	r31, 0x09	; 9
    1286:	4f 2e       	mov	r4, r31
    1288:	55 24       	eor	r5, r5
    128a:	f0 2d       	mov	r31, r0
    128c:	22 24       	eor	r2, r2
    128e:	33 24       	eor	r3, r3
			z = CUBE_SIZE-1;
			
		if (z<0)
			z = 0;
		
		effect_pathmove(path, 36);
    1290:	5e 01       	movw	r10, r28
    1292:	08 94       	sec
    1294:	a1 1c       	adc	r10, r1
    1296:	b1 1c       	adc	r11, r1
	
	font_getpath(0,path,36);
	
	for (i = 0; i < iterations; i++)
	{
		dz = ((rand()%3)-1);
    1298:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    129c:	01 50       	subi	r16, 0x01	; 1
    129e:	10 40       	sbci	r17, 0x00	; 0
    12a0:	b3 01       	movw	r22, r6
    12a2:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__divmodhi4>
		z += dz;
    12a6:	08 0f       	add	r16, r24
    12a8:	19 1f       	adc	r17, r25
    12aa:	0a 30       	cpi	r16, 0x0A	; 10
    12ac:	11 05       	cpc	r17, r1
    12ae:	0c f0       	brlt	.+2      	; 0x12b2 <effect_rand_patharound+0x90>
    12b0:	82 01       	movw	r16, r4
    12b2:	11 23       	and	r17, r17
    12b4:	0c f4       	brge	.+2      	; 0x12b8 <effect_rand_patharound+0x96>
    12b6:	81 01       	movw	r16, r2
			z = CUBE_SIZE-1;
			
		if (z<0)
			z = 0;
		
		effect_pathmove(path, 36);
    12b8:	c5 01       	movw	r24, r10
    12ba:	64 e2       	ldi	r22, 0x24	; 36
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	0e 94 b2 08 	call	0x1164	; 0x1164 <effect_pathmove>
		set_voxel(CUBE_SIZE,CUBE_SIZE,z);
    12c2:	8a e0       	ldi	r24, 0x0A	; 10
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	6a e0       	ldi	r22, 0x0A	; 10
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	a8 01       	movw	r20, r16
    12cc:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_voxel>
		delay_ms(delay);
    12d0:	c4 01       	movw	r24, r8
    12d2:	0e 94 0d 04 	call	0x81a	; 0x81a <delay_ms>
	z = 4;
	unsigned char path[36];
	
	font_getpath(0,path,36);
	
	for (i = 0; i < iterations; i++)
    12d6:	08 94       	sec
    12d8:	e1 1c       	adc	r14, r1
    12da:	f1 1c       	adc	r15, r1
    12dc:	ec 14       	cp	r14, r12
    12de:	fd 04       	cpc	r15, r13
    12e0:	dc f2       	brlt	.-74     	; 0x1298 <effect_rand_patharound+0x76>
		
		effect_pathmove(path, 36);
		set_voxel(CUBE_SIZE,CUBE_SIZE,z);
		delay_ms(delay);
	}
}
    12e2:	a4 96       	adiw	r28, 0x24	; 36
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	ff 90       	pop	r15
    12f8:	ef 90       	pop	r14
    12fa:	df 90       	pop	r13
    12fc:	cf 90       	pop	r12
    12fe:	bf 90       	pop	r11
    1300:	af 90       	pop	r10
    1302:	9f 90       	pop	r9
    1304:	8f 90       	pop	r8
    1306:	7f 90       	pop	r7
    1308:	6f 90       	pop	r6
    130a:	5f 90       	pop	r5
    130c:	4f 90       	pop	r4
    130e:	3f 90       	pop	r3
    1310:	2f 90       	pop	r2
    1312:	08 95       	ret

00001314 <effect_pathspiral>:

// From instructables 8x8x8
void effect_pathspiral (int iterations, int delay)
{
    1314:	8f 92       	push	r8
    1316:	9f 92       	push	r9
    1318:	af 92       	push	r10
    131a:	bf 92       	push	r11
    131c:	cf 92       	push	r12
    131e:	df 92       	push	r13
    1320:	ef 92       	push	r14
    1322:	ff 92       	push	r15
    1324:	0f 93       	push	r16
    1326:	1f 93       	push	r17
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	60 97       	sbiw	r28, 0x10	; 16
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	f8 94       	cli
    1336:	de bf       	out	0x3e, r29	; 62
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	cd bf       	out	0x3d, r28	; 61
    133c:	7c 01       	movw	r14, r24
    133e:	5b 01       	movw	r10, r22
	int z, i;
	z = 4;
	unsigned char path[16];
	
	font_getpath(1,path,16);
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	be 01       	movw	r22, r28
    1344:	6f 5f       	subi	r22, 0xFF	; 255
    1346:	7f 4f       	sbci	r23, 0xFF	; 255
    1348:	40 e1       	ldi	r20, 0x10	; 16
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	0e 94 b6 0c 	call	0x196c	; 0x196c <font_getpath>
	
	for (i = 0; i < iterations; i++)
    1350:	1e 14       	cp	r1, r14
    1352:	1f 04       	cpc	r1, r15
    1354:	14 f5       	brge	.+68     	; 0x139a <effect_pathspiral+0x86>
    1356:	00 e0       	ldi	r16, 0x00	; 0
    1358:	10 e0       	ldi	r17, 0x00	; 0
	{
		set_voxel(4,0,i%8);
    135a:	88 24       	eor	r8, r8
    135c:	99 24       	eor	r9, r9
    135e:	68 94       	set
    1360:	83 f8       	bld	r8, 3
		delay_ms(delay);
		effect_pathmove(path, 28);
    1362:	6e 01       	movw	r12, r28
    1364:	08 94       	sec
    1366:	c1 1c       	adc	r12, r1
    1368:	d1 1c       	adc	r13, r1
	
	font_getpath(1,path,16);
	
	for (i = 0; i < iterations; i++)
	{
		set_voxel(4,0,i%8);
    136a:	c8 01       	movw	r24, r16
    136c:	b4 01       	movw	r22, r8
    136e:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__divmodhi4>
    1372:	ac 01       	movw	r20, r24
    1374:	84 e0       	ldi	r24, 0x04	; 4
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_voxel>
		delay_ms(delay);
    1380:	c5 01       	movw	r24, r10
    1382:	0e 94 0d 04 	call	0x81a	; 0x81a <delay_ms>
		effect_pathmove(path, 28);
    1386:	c6 01       	movw	r24, r12
    1388:	6c e1       	ldi	r22, 0x1C	; 28
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	0e 94 b2 08 	call	0x1164	; 0x1164 <effect_pathmove>
	z = 4;
	unsigned char path[16];
	
	font_getpath(1,path,16);
	
	for (i = 0; i < iterations; i++)
    1390:	0f 5f       	subi	r16, 0xFF	; 255
    1392:	1f 4f       	sbci	r17, 0xFF	; 255
    1394:	0e 15       	cp	r16, r14
    1396:	1f 05       	cpc	r17, r15
    1398:	44 f3       	brlt	.-48     	; 0x136a <effect_pathspiral+0x56>
		set_voxel(4,0,i%8);
		delay_ms(delay);
		effect_pathmove(path, 28);
		
	}
}
    139a:	60 96       	adiw	r28, 0x10	; 16
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	f8 94       	cli
    13a0:	de bf       	out	0x3e, r29	; 62
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	cd bf       	out	0x3d, r28	; 61
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	ff 90       	pop	r15
    13b0:	ef 90       	pop	r14
    13b2:	df 90       	pop	r13
    13b4:	cf 90       	pop	r12
    13b6:	bf 90       	pop	r11
    13b8:	af 90       	pop	r10
    13ba:	9f 90       	pop	r9
    13bc:	8f 90       	pop	r8
    13be:	08 95       	ret

000013c0 <effect_path_text>:

// From instructables 8x8x8
void effect_path_text (int delay, char *str)
{
    13c0:	2f 92       	push	r2
    13c2:	3f 92       	push	r3
    13c4:	4f 92       	push	r4
    13c6:	5f 92       	push	r5
    13c8:	6f 92       	push	r6
    13ca:	7f 92       	push	r7
    13cc:	8f 92       	push	r8
    13ce:	9f 92       	push	r9
    13d0:	af 92       	push	r10
    13d2:	bf 92       	push	r11
    13d4:	cf 92       	push	r12
    13d6:	df 92       	push	r13
    13d8:	ef 92       	push	r14
    13da:	ff 92       	push	r15
    13dc:	0f 93       	push	r16
    13de:	1f 93       	push	r17
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	ab 97       	sbiw	r28, 0x2b	; 43
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	4c 01       	movw	r8, r24
    13f6:	8b 01       	movw	r16, r22
	int z, i,ii;
	z = 4;
	unsigned char path[36];
	font_getpath(0,path,36);
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	be 01       	movw	r22, r28
    13fc:	6f 5f       	subi	r22, 0xFF	; 255
    13fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1400:	44 e2       	ldi	r20, 0x24	; 36
    1402:	50 e0       	ldi	r21, 0x00	; 0
    1404:	0e 94 b6 0c 	call	0x196c	; 0x196c <font_getpath>
	
	unsigned char chr[5];
	unsigned char stripe;
	
	while (*str)
    1408:	f8 01       	movw	r30, r16
    140a:	80 81       	ld	r24, Z
    140c:	88 23       	and	r24, r24
    140e:	09 f4       	brne	.+2      	; 0x1412 <effect_path_text+0x52>
    1410:	61 c0       	rjmp	.+194    	; 0x14d4 <effect_path_text+0x114>
		
	}
}

// From instructables 8x8x8
void effect_path_text (int delay, char *str)
    1412:	98 01       	movw	r18, r16
    1414:	2f 5f       	subi	r18, 0xFF	; 255
    1416:	3f 4f       	sbci	r19, 0xFF	; 255
    1418:	3b a7       	std	Y+43, r19	; 0x2b
    141a:	2a a7       	std	Y+42, r18	; 0x2a
    141c:	0f 2e       	mov	r0, r31
    141e:	fa e2       	ldi	r31, 0x2A	; 42
    1420:	4f 2e       	mov	r4, r31
    1422:	55 24       	eor	r5, r5
    1424:	f0 2d       	mov	r31, r0
    1426:	4c 0e       	add	r4, r28
    1428:	5d 1e       	adc	r5, r29
		font_getchar(*str++, chr);
		
		for (ii=0;ii<5;ii++)
		{
			//stripe = pgm_read_byte(&font[(chr*5)+ii]);
			stripe = chr[ii];
    142a:	ee 24       	eor	r14, r14
    142c:	ff 24       	eor	r15, r15
    142e:	68 94       	set
    1430:	e3 f8       	bld	r14, 3
		
	}
}

// From instructables 8x8x8
void effect_path_text (int delay, char *str)
    1432:	97 01       	movw	r18, r14
    1434:	3e 2c       	mov	r3, r14
    1436:	23 2e       	mov	r2, r19
				{
					clr_voxel(CUBE_SIZE-1,CUBE_SIZE-1,z);
				}
				
			}
			effect_pathmove(path, 36);
    1438:	3e 01       	movw	r6, r28
    143a:	08 94       	sec
    143c:	61 1c       	adc	r6, r1
    143e:	71 1c       	adc	r7, r1
	while (*str)
	{
		//charfly(*str++, direction, axis, mode, delay);
		
		
		font_getchar(*str++, chr);
    1440:	be 01       	movw	r22, r28
    1442:	6b 5d       	subi	r22, 0xDB	; 219
    1444:	7f 4f       	sbci	r23, 0xFF	; 255
    1446:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <font_getchar>
    144a:	0f 2e       	mov	r0, r31
    144c:	f5 e2       	ldi	r31, 0x25	; 37
    144e:	af 2e       	mov	r10, r31
    1450:	bb 24       	eor	r11, r11
    1452:	f0 2d       	mov	r31, r0
    1454:	ac 0e       	add	r10, r28
    1456:	bd 1e       	adc	r11, r29
		
		for (ii=0;ii<5;ii++)
		{
			//stripe = pgm_read_byte(&font[(chr*5)+ii]);
			stripe = chr[ii];
    1458:	f5 01       	movw	r30, r10
    145a:	c1 90       	ld	r12, Z+
    145c:	5f 01       	movw	r10, r30
    145e:	03 2d       	mov	r16, r3
    1460:	12 2d       	mov	r17, r2
			
			for (z=8;z>0;z--)
			{
				if ((stripe>>(8-z)) & 0x01)
    1462:	dd 24       	eor	r13, r13
		font_getchar(*str++, chr);
		
		for (ii=0;ii<5;ii++)
		{
			//stripe = pgm_read_byte(&font[(chr*5)+ii]);
			stripe = chr[ii];
    1464:	40 2f       	mov	r20, r16
    1466:	51 2f       	mov	r21, r17
		
	}
}

// From instructables 8x8x8
void effect_path_text (int delay, char *str)
    1468:	c7 01       	movw	r24, r14
    146a:	80 1b       	sub	r24, r16
    146c:	91 0b       	sbc	r25, r17
			//stripe = pgm_read_byte(&font[(chr*5)+ii]);
			stripe = chr[ii];
			
			for (z=8;z>0;z--)
			{
				if ((stripe>>(8-z)) & 0x01)
    146e:	96 01       	movw	r18, r12
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <effect_path_text+0xb6>
    1472:	35 95       	asr	r19
    1474:	27 95       	ror	r18
    1476:	8a 95       	dec	r24
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <effect_path_text+0xb2>
    147a:	20 ff       	sbrs	r18, 0
    147c:	07 c0       	rjmp	.+14     	; 0x148c <effect_path_text+0xcc>
				{
					set_voxel(CUBE_SIZE-1,CUBE_SIZE-1,z);
    147e:	89 e0       	ldi	r24, 0x09	; 9
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	69 e0       	ldi	r22, 0x09	; 9
    1484:	70 e0       	ldi	r23, 0x00	; 0
    1486:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_voxel>
    148a:	06 c0       	rjmp	.+12     	; 0x1498 <effect_path_text+0xd8>
				} else
				{
					clr_voxel(CUBE_SIZE-1,CUBE_SIZE-1,z);
    148c:	89 e0       	ldi	r24, 0x09	; 9
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	69 e0       	ldi	r22, 0x09	; 9
    1492:	70 e0       	ldi	r23, 0x00	; 0
    1494:	0e 94 9d 01 	call	0x33a	; 0x33a <clr_voxel>
    1498:	01 50       	subi	r16, 0x01	; 1
    149a:	10 40       	sbci	r17, 0x00	; 0
		for (ii=0;ii<5;ii++)
		{
			//stripe = pgm_read_byte(&font[(chr*5)+ii]);
			stripe = chr[ii];
			
			for (z=8;z>0;z--)
    149c:	19 f7       	brne	.-58     	; 0x1464 <effect_path_text+0xa4>
				{
					clr_voxel(CUBE_SIZE-1,CUBE_SIZE-1,z);
				}
				
			}
			effect_pathmove(path, 36);
    149e:	c3 01       	movw	r24, r6
    14a0:	64 e2       	ldi	r22, 0x24	; 36
    14a2:	70 e0       	ldi	r23, 0x00	; 0
    14a4:	0e 94 b2 08 	call	0x1164	; 0x1164 <effect_pathmove>
			delay_ms(delay);
    14a8:	c4 01       	movw	r24, r8
    14aa:	0e 94 0d 04 	call	0x81a	; 0x81a <delay_ms>
		//charfly(*str++, direction, axis, mode, delay);
		
		
		font_getchar(*str++, chr);
		
		for (ii=0;ii<5;ii++)
    14ae:	a4 14       	cp	r10, r4
    14b0:	b5 04       	cpc	r11, r5
    14b2:	91 f6       	brne	.-92     	; 0x1458 <effect_path_text+0x98>
			}
			effect_pathmove(path, 36);
			delay_ms(delay);
		}
	
		effect_pathmove(path, 36);
    14b4:	c3 01       	movw	r24, r6
    14b6:	64 e2       	ldi	r22, 0x24	; 36
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	0e 94 b2 08 	call	0x1164	; 0x1164 <effect_pathmove>
		delay_ms(delay);
    14be:	c4 01       	movw	r24, r8
    14c0:	0e 94 0d 04 	call	0x81a	; 0x81a <delay_ms>
	font_getpath(0,path,36);
	
	unsigned char chr[5];
	unsigned char stripe;
	
	while (*str)
    14c4:	ea a5       	ldd	r30, Y+42	; 0x2a
    14c6:	fb a5       	ldd	r31, Y+43	; 0x2b
    14c8:	81 91       	ld	r24, Z+
    14ca:	fb a7       	std	Y+43, r31	; 0x2b
    14cc:	ea a7       	std	Y+42, r30	; 0x2a
    14ce:	88 23       	and	r24, r24
    14d0:	09 f0       	breq	.+2      	; 0x14d4 <effect_path_text+0x114>
    14d2:	b6 cf       	rjmp	.-148    	; 0x1440 <effect_path_text+0x80>
		font_getchar(*str++, chr);
		
		for (ii=0;ii<5;ii++)
		{
			//stripe = pgm_read_byte(&font[(chr*5)+ii]);
			stripe = chr[ii];
    14d4:	00 e0       	ldi	r16, 0x00	; 0
    14d6:	10 e0       	ldi	r17, 0x00	; 0
		effect_pathmove(path, 36);
		delay_ms(delay);
	}
	for (i=0;i<28;i++)
	{
		effect_pathmove(path, 36);
    14d8:	7e 01       	movw	r14, r28
    14da:	08 94       	sec
    14dc:	e1 1c       	adc	r14, r1
    14de:	f1 1c       	adc	r15, r1
    14e0:	c7 01       	movw	r24, r14
    14e2:	64 e2       	ldi	r22, 0x24	; 36
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	0e 94 b2 08 	call	0x1164	; 0x1164 <effect_pathmove>
		delay_ms(delay);
    14ea:	c4 01       	movw	r24, r8
    14ec:	0e 94 0d 04 	call	0x81a	; 0x81a <delay_ms>
		}
	
		effect_pathmove(path, 36);
		delay_ms(delay);
	}
	for (i=0;i<28;i++)
    14f0:	0f 5f       	subi	r16, 0xFF	; 255
    14f2:	1f 4f       	sbci	r17, 0xFF	; 255
    14f4:	0c 31       	cpi	r16, 0x1C	; 28
    14f6:	11 05       	cpc	r17, r1
    14f8:	99 f7       	brne	.-26     	; 0x14e0 <effect_path_text+0x120>
	{
		effect_pathmove(path, 36);
		delay_ms(delay);
	}
}
    14fa:	ab 96       	adiw	r28, 0x2b	; 43
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	1f 91       	pop	r17
    150c:	0f 91       	pop	r16
    150e:	ff 90       	pop	r15
    1510:	ef 90       	pop	r14
    1512:	df 90       	pop	r13
    1514:	cf 90       	pop	r12
    1516:	bf 90       	pop	r11
    1518:	af 90       	pop	r10
    151a:	9f 90       	pop	r9
    151c:	8f 90       	pop	r8
    151e:	7f 90       	pop	r7
    1520:	6f 90       	pop	r6
    1522:	5f 90       	pop	r5
    1524:	4f 90       	pop	r4
    1526:	3f 90       	pop	r3
    1528:	2f 90       	pop	r2
    152a:	08 95       	ret

0000152c <effect_path_bitmap>:

// From instructables 8x8x8
void effect_path_bitmap (int delay, char bitmap, int iterations)
{
    152c:	2f 92       	push	r2
    152e:	3f 92       	push	r3
    1530:	5f 92       	push	r5
    1532:	6f 92       	push	r6
    1534:	7f 92       	push	r7
    1536:	8f 92       	push	r8
    1538:	9f 92       	push	r9
    153a:	af 92       	push	r10
    153c:	bf 92       	push	r11
    153e:	cf 92       	push	r12
    1540:	df 92       	push	r13
    1542:	ef 92       	push	r14
    1544:	ff 92       	push	r15
    1546:	0f 93       	push	r16
    1548:	1f 93       	push	r17
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	a6 97       	sbiw	r28, 0x26	; 38
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	f8 94       	cli
    1558:	de bf       	out	0x3e, r29	; 62
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	cd bf       	out	0x3d, r28	; 61
    155e:	5c 01       	movw	r10, r24
    1560:	e6 2e       	mov	r14, r22
    1562:	5e a3       	std	Y+38, r21	; 0x26
    1564:	4d a3       	std	Y+37, r20	; 0x25
	int z, i, ii;
	z = 4;
	unsigned char path[36];
	font_getpath(0,path,36);
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	be 01       	movw	r22, r28
    156a:	6f 5f       	subi	r22, 0xFF	; 255
    156c:	7f 4f       	sbci	r23, 0xFF	; 255
    156e:	44 e2       	ldi	r20, 0x24	; 36
    1570:	50 e0       	ldi	r21, 0x00	; 0
    1572:	0e 94 b6 0c 	call	0x196c	; 0x196c <font_getpath>
	
	for (i=0; i < iterations; i++)
    1576:	8d a1       	ldd	r24, Y+37	; 0x25
    1578:	9e a1       	ldd	r25, Y+38	; 0x26
    157a:	18 16       	cp	r1, r24
    157c:	19 06       	cpc	r1, r25
    157e:	0c f4       	brge	.+2      	; 0x1582 <effect_path_bitmap+0x56>
    1580:	46 c0       	rjmp	.+140    	; 0x160e <effect_path_bitmap+0xe2>
    1582:	56 c0       	rjmp	.+172    	; 0x1630 <effect_path_bitmap+0x104>
	{	
		for (ii=0;ii<8;ii++)
		{		
			for (z=0;z<8;z++)
			{
				if (font_getbitmappixel(bitmap,(7-z),ii))
    1584:	8e 2d       	mov	r24, r14
    1586:	6f 2d       	mov	r22, r15
    1588:	4c 2d       	mov	r20, r12
    158a:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <font_getbitmappixel>
    158e:	88 23       	and	r24, r24
    1590:	41 f0       	breq	.+16     	; 0x15a2 <effect_path_bitmap+0x76>
				{
					set_voxel(CUBE_SIZE-1,CUBE_SIZE-1,z);
    1592:	89 e0       	ldi	r24, 0x09	; 9
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	69 e0       	ldi	r22, 0x09	; 9
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	a8 01       	movw	r20, r16
    159c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_voxel>
    15a0:	07 c0       	rjmp	.+14     	; 0x15b0 <effect_path_bitmap+0x84>
				} else
				{
					clr_voxel(CUBE_SIZE-1,CUBE_SIZE-1,z);
    15a2:	89 e0       	ldi	r24, 0x09	; 9
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	69 e0       	ldi	r22, 0x09	; 9
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	a8 01       	movw	r20, r16
    15ac:	0e 94 9d 01 	call	0x33a	; 0x33a <clr_voxel>
	
	for (i=0; i < iterations; i++)
	{	
		for (ii=0;ii<8;ii++)
		{		
			for (z=0;z<8;z++)
    15b0:	0f 5f       	subi	r16, 0xFF	; 255
    15b2:	1f 4f       	sbci	r17, 0xFF	; 255
    15b4:	fa 94       	dec	r15
    15b6:	9f 2d       	mov	r25, r15
    15b8:	9f 3f       	cpi	r25, 0xFF	; 255
    15ba:	21 f7       	brne	.-56     	; 0x1584 <effect_path_bitmap+0x58>
				{
					clr_voxel(CUBE_SIZE-1,CUBE_SIZE-1,z);
				}
				
			}
			delay_ms(delay);
    15bc:	c5 01       	movw	r24, r10
    15be:	0e 94 0d 04 	call	0x81a	; 0x81a <delay_ms>
			effect_pathmove(path, 36);
    15c2:	c4 01       	movw	r24, r8
    15c4:	64 e2       	ldi	r22, 0x24	; 36
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	0e 94 b2 08 	call	0x1164	; 0x1164 <effect_pathmove>
	unsigned char path[36];
	font_getpath(0,path,36);
	
	for (i=0; i < iterations; i++)
	{	
		for (ii=0;ii<8;ii++)
    15cc:	08 94       	sec
    15ce:	c1 1c       	adc	r12, r1
    15d0:	d1 1c       	adc	r13, r1
    15d2:	88 e0       	ldi	r24, 0x08	; 8
    15d4:	c8 16       	cp	r12, r24
    15d6:	d1 04       	cpc	r13, r1
    15d8:	21 f0       	breq	.+8      	; 0x15e2 <effect_path_bitmap+0xb6>
	}
}

// From instructables 8x8x8
void effect_path_bitmap (int delay, char bitmap, int iterations)
{
    15da:	f7 2c       	mov	r15, r7
    15dc:	06 2d       	mov	r16, r6
    15de:	15 2d       	mov	r17, r5
    15e0:	d1 cf       	rjmp	.-94     	; 0x1584 <effect_path_bitmap+0x58>
	unsigned char path[36];
	font_getpath(0,path,36);
	
	for (i=0; i < iterations; i++)
	{	
		for (ii=0;ii<8;ii++)
    15e2:	0d e1       	ldi	r16, 0x1D	; 29
    15e4:	10 e0       	ldi	r17, 0x00	; 0
			effect_pathmove(path, 36);
		}
	
		for (ii=0;ii<29;ii++)
		{
			delay_ms(delay);
    15e6:	c5 01       	movw	r24, r10
    15e8:	0e 94 0d 04 	call	0x81a	; 0x81a <delay_ms>
			effect_pathmove(path, 36);
    15ec:	c4 01       	movw	r24, r8
    15ee:	64 e2       	ldi	r22, 0x24	; 36
    15f0:	70 e0       	ldi	r23, 0x00	; 0
    15f2:	0e 94 b2 08 	call	0x1164	; 0x1164 <effect_pathmove>
    15f6:	01 50       	subi	r16, 0x01	; 1
    15f8:	10 40       	sbci	r17, 0x00	; 0
			}
			delay_ms(delay);
			effect_pathmove(path, 36);
		}
	
		for (ii=0;ii<29;ii++)
    15fa:	a9 f7       	brne	.-22     	; 0x15e6 <effect_path_bitmap+0xba>
	int z, i, ii;
	z = 4;
	unsigned char path[36];
	font_getpath(0,path,36);
	
	for (i=0; i < iterations; i++)
    15fc:	08 94       	sec
    15fe:	21 1c       	adc	r2, r1
    1600:	31 1c       	adc	r3, r1
    1602:	8d a1       	ldd	r24, Y+37	; 0x25
    1604:	9e a1       	ldd	r25, Y+38	; 0x26
    1606:	28 16       	cp	r2, r24
    1608:	39 06       	cpc	r3, r25
    160a:	7c f0       	brlt	.+30     	; 0x162a <effect_path_bitmap+0xfe>
    160c:	11 c0       	rjmp	.+34     	; 0x1630 <effect_path_bitmap+0x104>
    160e:	22 24       	eor	r2, r2
    1610:	33 24       	eor	r3, r3
	}
}

// From instructables 8x8x8
void effect_path_bitmap (int delay, char bitmap, int iterations)
{
    1612:	0f 2e       	mov	r0, r31
    1614:	f7 e0       	ldi	r31, 0x07	; 7
    1616:	7f 2e       	mov	r7, r31
    1618:	f0 2d       	mov	r31, r0
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	68 2e       	mov	r6, r24
    1620:	59 2e       	mov	r5, r25
					clr_voxel(CUBE_SIZE-1,CUBE_SIZE-1,z);
				}
				
			}
			delay_ms(delay);
			effect_pathmove(path, 36);
    1622:	4e 01       	movw	r8, r28
    1624:	08 94       	sec
    1626:	81 1c       	adc	r8, r1
    1628:	91 1c       	adc	r9, r1
	}
}

// From instructables 8x8x8
void effect_path_bitmap (int delay, char bitmap, int iterations)
{
    162a:	cc 24       	eor	r12, r12
    162c:	dd 24       	eor	r13, r13
    162e:	d5 cf       	rjmp	.-86     	; 0x15da <effect_path_bitmap+0xae>
	int z, i, ii;
	z = 4;
	unsigned char path[36];
	font_getpath(0,path,36);
	
	for (i=0; i < iterations; i++)
    1630:	0a e0       	ldi	r16, 0x0A	; 10
    1632:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	for (ii=0;ii<10;ii++)
	{
		delay_ms(delay);
		effect_pathmove(path, 36);
    1634:	7e 01       	movw	r14, r28
    1636:	08 94       	sec
    1638:	e1 1c       	adc	r14, r1
    163a:	f1 1c       	adc	r15, r1
			effect_pathmove(path, 36);
		}
	}
	for (ii=0;ii<10;ii++)
	{
		delay_ms(delay);
    163c:	c5 01       	movw	r24, r10
    163e:	0e 94 0d 04 	call	0x81a	; 0x81a <delay_ms>
		effect_pathmove(path, 36);
    1642:	c7 01       	movw	r24, r14
    1644:	64 e2       	ldi	r22, 0x24	; 36
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	0e 94 b2 08 	call	0x1164	; 0x1164 <effect_pathmove>
    164c:	01 50       	subi	r16, 0x01	; 1
    164e:	10 40       	sbci	r17, 0x00	; 0
		{
			delay_ms(delay);
			effect_pathmove(path, 36);
		}
	}
	for (ii=0;ii<10;ii++)
    1650:	a9 f7       	brne	.-22     	; 0x163c <effect_path_bitmap+0x110>
	{
		delay_ms(delay);
		effect_pathmove(path, 36);
	}
}
    1652:	a6 96       	adiw	r28, 0x26	; 38
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	1f 91       	pop	r17
    1664:	0f 91       	pop	r16
    1666:	ff 90       	pop	r15
    1668:	ef 90       	pop	r14
    166a:	df 90       	pop	r13
    166c:	cf 90       	pop	r12
    166e:	bf 90       	pop	r11
    1670:	af 90       	pop	r10
    1672:	9f 90       	pop	r9
    1674:	8f 90       	pop	r8
    1676:	7f 90       	pop	r7
    1678:	6f 90       	pop	r6
    167a:	5f 90       	pop	r5
    167c:	3f 90       	pop	r3
    167e:	2f 90       	pop	r2
    1680:	08 95       	ret

00001682 <effect_ball>:

void effect_ball(int r, int x, int y, int z){
    1682:	2f 92       	push	r2
    1684:	3f 92       	push	r3
    1686:	4f 92       	push	r4
    1688:	5f 92       	push	r5
    168a:	6f 92       	push	r6
    168c:	7f 92       	push	r7
    168e:	8f 92       	push	r8
    1690:	9f 92       	push	r9
    1692:	af 92       	push	r10
    1694:	bf 92       	push	r11
    1696:	cf 92       	push	r12
    1698:	df 92       	push	r13
    169a:	ef 92       	push	r14
    169c:	ff 92       	push	r15
    169e:	0f 93       	push	r16
    16a0:	1f 93       	push	r17
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	ae 97       	sbiw	r28, 0x2e	; 46
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	f8 94       	cli
    16b0:	de bf       	out	0x3e, r29	; 62
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	cd bf       	out	0x3d, r28	; 61
    16b6:	4c 01       	movw	r8, r24
    16b8:	6d 83       	std	Y+5, r22	; 0x05
    16ba:	7e 83       	std	Y+6, r23	; 0x06
    16bc:	4f 83       	std	Y+7, r20	; 0x07
    16be:	58 87       	std	Y+8, r21	; 0x08
    16c0:	29 87       	std	Y+9, r18	; 0x09
    16c2:	3a 87       	std	Y+10, r19	; 0x0a
	int rsquared = r*r;
    16c4:	88 9f       	mul	r24, r24
    16c6:	90 01       	movw	r18, r0
    16c8:	89 9f       	mul	r24, r25
    16ca:	30 0d       	add	r19, r0
    16cc:	98 9f       	mul	r25, r24
    16ce:	30 0d       	add	r19, r0
    16d0:	11 24       	eor	r1, r1
	rsquared = rsquared + r;
    16d2:	28 0f       	add	r18, r24
    16d4:	39 1f       	adc	r19, r25
	for (int i = 0; i <= r; i++){
    16d6:	99 23       	and	r25, r25
    16d8:	0c f0       	brlt	.+2      	; 0x16dc <effect_ball+0x5a>
    16da:	e3 c0       	rjmp	.+454    	; 0x18a2 <effect_ball+0x220>
    16dc:	01 c1       	rjmp	.+514    	; 0x18e0 <effect_ball+0x25e>
		delay_ms(delay);
		effect_pathmove(path, 36);
	}
}

void effect_ball(int r, int x, int y, int z){
    16de:	cd 80       	ldd	r12, Y+5	; 0x05
    16e0:	de 80       	ldd	r13, Y+6	; 0x06
    16e2:	36 01       	movw	r6, r12
    16e4:	29 80       	ldd	r2, Y+1	; 0x01
    16e6:	3a 80       	ldd	r3, Y+2	; 0x02
    16e8:	c2 0c       	add	r12, r2
    16ea:	d3 1c       	adc	r13, r3
    16ec:	ef 80       	ldd	r14, Y+7	; 0x07
    16ee:	f8 84       	ldd	r15, Y+8	; 0x08
    16f0:	27 01       	movw	r4, r14
    16f2:	ea 0c       	add	r14, r10
    16f4:	fb 1c       	adc	r15, r11
    16f6:	29 85       	ldd	r18, Y+9	; 0x09
    16f8:	3a 85       	ldd	r19, Y+10	; 0x0a
    16fa:	19 01       	movw	r2, r18
    16fc:	1c 83       	std	Y+4, r17	; 0x04
    16fe:	0b 83       	std	Y+3, r16	; 0x03
    1700:	c9 01       	movw	r24, r18
    1702:	80 0f       	add	r24, r16
    1704:	91 1f       	adc	r25, r17
    1706:	9e a7       	std	Y+46, r25	; 0x2e
    1708:	8d a7       	std	Y+45, r24	; 0x2d
	int rsquared = r*r;
	rsquared = rsquared + r;
	for (int i = 0; i <= r; i++){
		for (int j = 0; j <= r; j++){
			for (int k = 0; k <= r; k++){
				if (inrange(i+x,j+y,k+z) && !getvoxel(i+x,j+y,k+z) && (rsquared > pow((i),2)+pow((j),2)+pow(k,2))){
    170a:	c6 01       	movw	r24, r12
    170c:	b7 01       	movw	r22, r14
    170e:	4d a5       	ldd	r20, Y+45	; 0x2d
    1710:	5e a5       	ldd	r21, Y+46	; 0x2e
    1712:	0e 94 3c 01 	call	0x278	; 0x278 <inrange>
    1716:	88 23       	and	r24, r24
    1718:	09 f4       	brne	.+2      	; 0x171c <effect_ball+0x9a>
    171a:	a0 c0       	rjmp	.+320    	; 0x185c <effect_ball+0x1da>
    171c:	c6 01       	movw	r24, r12
    171e:	b7 01       	movw	r22, r14
    1720:	4d a5       	ldd	r20, Y+45	; 0x2d
    1722:	5e a5       	ldd	r21, Y+46	; 0x2e
    1724:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <getvoxel>
    1728:	88 23       	and	r24, r24
    172a:	09 f0       	breq	.+2      	; 0x172e <effect_ball+0xac>
    172c:	97 c0       	rjmp	.+302    	; 0x185c <effect_ball+0x1da>
    172e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1730:	78 a1       	ldd	r23, Y+32	; 0x20
    1732:	89 a1       	ldd	r24, Y+33	; 0x21
    1734:	9a a1       	ldd	r25, Y+34	; 0x22
    1736:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__floatsisf>
    173a:	9b 01       	movw	r18, r22
    173c:	ac 01       	movw	r20, r24
    173e:	0e 94 19 14 	call	0x2832	; 0x2832 <__mulsf3>
    1742:	6f 87       	std	Y+15, r22	; 0x0f
    1744:	78 8b       	std	Y+16, r23	; 0x10
    1746:	89 8b       	std	Y+17, r24	; 0x11
    1748:	9a 8b       	std	Y+18, r25	; 0x12
    174a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    174c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    174e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1750:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1752:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__floatsisf>
    1756:	9b 01       	movw	r18, r22
    1758:	ac 01       	movw	r20, r24
    175a:	0e 94 19 14 	call	0x2832	; 0x2832 <__mulsf3>
    175e:	6b 8b       	std	Y+19, r22	; 0x13
    1760:	7c 8b       	std	Y+20, r23	; 0x14
    1762:	8d 8b       	std	Y+21, r24	; 0x15
    1764:	9e 8b       	std	Y+22, r25	; 0x16
    1766:	b8 01       	movw	r22, r16
    1768:	88 27       	eor	r24, r24
    176a:	77 fd       	sbrc	r23, 7
    176c:	80 95       	com	r24
    176e:	98 2f       	mov	r25, r24
    1770:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__floatsisf>
    1774:	9b 01       	movw	r18, r22
    1776:	ac 01       	movw	r20, r24
    1778:	0e 94 19 14 	call	0x2832	; 0x2832 <__mulsf3>
    177c:	6f 8b       	std	Y+23, r22	; 0x17
    177e:	78 8f       	std	Y+24, r23	; 0x18
    1780:	89 8f       	std	Y+25, r24	; 0x19
    1782:	9a 8f       	std	Y+26, r25	; 0x1a
    1784:	6b a1       	ldd	r22, Y+35	; 0x23
    1786:	7c a1       	ldd	r23, Y+36	; 0x24
    1788:	8d a1       	ldd	r24, Y+37	; 0x25
    178a:	9e a1       	ldd	r25, Y+38	; 0x26
    178c:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__floatsisf>
    1790:	6b 87       	std	Y+11, r22	; 0x0b
    1792:	7c 87       	std	Y+12, r23	; 0x0c
    1794:	8d 87       	std	Y+13, r24	; 0x0d
    1796:	9e 87       	std	Y+14, r25	; 0x0e
    1798:	5f 85       	ldd	r21, Y+15	; 0x0f
    179a:	48 89       	ldd	r20, Y+16	; 0x10
    179c:	39 89       	ldd	r19, Y+17	; 0x11
    179e:	2a 89       	ldd	r18, Y+18	; 0x12
    17a0:	65 2f       	mov	r22, r21
    17a2:	74 2f       	mov	r23, r20
    17a4:	83 2f       	mov	r24, r19
    17a6:	92 2f       	mov	r25, r18
    17a8:	eb 89       	ldd	r30, Y+19	; 0x13
    17aa:	fc 89       	ldd	r31, Y+20	; 0x14
    17ac:	ad 89       	ldd	r26, Y+21	; 0x15
    17ae:	af 87       	std	Y+15, r26	; 0x0f
    17b0:	be 89       	ldd	r27, Y+22	; 0x16
    17b2:	b8 8b       	std	Y+16, r27	; 0x10
    17b4:	2e 2f       	mov	r18, r30
    17b6:	3f 2f       	mov	r19, r31
    17b8:	4a 2f       	mov	r20, r26
    17ba:	5b 2f       	mov	r21, r27
    17bc:	0e 94 bb 13 	call	0x2776	; 0x2776 <__addsf3>
    17c0:	ef 89       	ldd	r30, Y+23	; 0x17
    17c2:	f8 8d       	ldd	r31, Y+24	; 0x18
    17c4:	29 8d       	ldd	r18, Y+25	; 0x19
    17c6:	2f 87       	std	Y+15, r18	; 0x0f
    17c8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    17ca:	38 8b       	std	Y+16, r19	; 0x10
    17cc:	2e 2f       	mov	r18, r30
    17ce:	3f 2f       	mov	r19, r31
    17d0:	4f 85       	ldd	r20, Y+15	; 0x0f
    17d2:	58 89       	ldd	r21, Y+16	; 0x10
    17d4:	0e 94 bb 13 	call	0x2776	; 0x2776 <__addsf3>
    17d8:	9b 01       	movw	r18, r22
    17da:	ac 01       	movw	r20, r24
    17dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    17de:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e4:	0e 94 13 15 	call	0x2a26	; 0x2a26 <__gtsf2>
    17e8:	18 16       	cp	r1, r24
    17ea:	c4 f5       	brge	.+112    	; 0x185c <effect_ball+0x1da>
					set_voxel(x+i,y+j,z+k);
    17ec:	c6 01       	movw	r24, r12
    17ee:	b7 01       	movw	r22, r14
    17f0:	4d a5       	ldd	r20, Y+45	; 0x2d
    17f2:	5e a5       	ldd	r21, Y+46	; 0x2e
    17f4:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_voxel>
		delay_ms(delay);
		effect_pathmove(path, 36);
	}
}

void effect_ball(int r, int x, int y, int z){
    17f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    17fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    17fc:	68 1a       	sub	r6, r24
    17fe:	79 0a       	sbc	r7, r25
	for (int i = 0; i <= r; i++){
		for (int j = 0; j <= r; j++){
			for (int k = 0; k <= r; k++){
				if (inrange(i+x,j+y,k+z) && !getvoxel(i+x,j+y,k+z) && (rsquared > pow((i),2)+pow((j),2)+pow(k,2))){
					set_voxel(x+i,y+j,z+k);
					set_voxel(x-i,y+j,z+k);
    1800:	c3 01       	movw	r24, r6
    1802:	b7 01       	movw	r22, r14
    1804:	4d a5       	ldd	r20, Y+45	; 0x2d
    1806:	5e a5       	ldd	r21, Y+46	; 0x2e
    1808:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_voxel>
		delay_ms(delay);
		effect_pathmove(path, 36);
	}
}

void effect_ball(int r, int x, int y, int z){
    180c:	af a1       	ldd	r26, Y+39	; 0x27
    180e:	b8 a5       	ldd	r27, Y+40	; 0x28
    1810:	4a 1a       	sub	r4, r26
    1812:	5b 0a       	sbc	r5, r27
		for (int j = 0; j <= r; j++){
			for (int k = 0; k <= r; k++){
				if (inrange(i+x,j+y,k+z) && !getvoxel(i+x,j+y,k+z) && (rsquared > pow((i),2)+pow((j),2)+pow(k,2))){
					set_voxel(x+i,y+j,z+k);
					set_voxel(x-i,y+j,z+k);
					set_voxel(x+i,y-j,z+k);
    1814:	c6 01       	movw	r24, r12
    1816:	b2 01       	movw	r22, r4
    1818:	4d a5       	ldd	r20, Y+45	; 0x2d
    181a:	5e a5       	ldd	r21, Y+46	; 0x2e
    181c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_voxel>
					set_voxel(x-i,y-j,z+k);
    1820:	c3 01       	movw	r24, r6
    1822:	b2 01       	movw	r22, r4
    1824:	4d a5       	ldd	r20, Y+45	; 0x2d
    1826:	5e a5       	ldd	r21, Y+46	; 0x2e
    1828:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_voxel>
		delay_ms(delay);
		effect_pathmove(path, 36);
	}
}

void effect_ball(int r, int x, int y, int z){
    182c:	eb 81       	ldd	r30, Y+3	; 0x03
    182e:	fc 81       	ldd	r31, Y+4	; 0x04
    1830:	2e 1a       	sub	r2, r30
    1832:	3f 0a       	sbc	r3, r31
				if (inrange(i+x,j+y,k+z) && !getvoxel(i+x,j+y,k+z) && (rsquared > pow((i),2)+pow((j),2)+pow(k,2))){
					set_voxel(x+i,y+j,z+k);
					set_voxel(x-i,y+j,z+k);
					set_voxel(x+i,y-j,z+k);
					set_voxel(x-i,y-j,z+k);
					set_voxel(x+i,y+j,z-k);
    1834:	c6 01       	movw	r24, r12
    1836:	b7 01       	movw	r22, r14
    1838:	a1 01       	movw	r20, r2
    183a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_voxel>
					set_voxel(x-i,y+j,z-k);
    183e:	c3 01       	movw	r24, r6
    1840:	b7 01       	movw	r22, r14
    1842:	a1 01       	movw	r20, r2
    1844:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_voxel>
					set_voxel(x+i,y-j,z-k);
    1848:	c6 01       	movw	r24, r12
    184a:	b2 01       	movw	r22, r4
    184c:	a1 01       	movw	r20, r2
    184e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_voxel>
					set_voxel(x-i,y-j,z-k);
    1852:	c3 01       	movw	r24, r6
    1854:	b2 01       	movw	r22, r4
    1856:	a1 01       	movw	r20, r2
    1858:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_voxel>
void effect_ball(int r, int x, int y, int z){
	int rsquared = r*r;
	rsquared = rsquared + r;
	for (int i = 0; i <= r; i++){
		for (int j = 0; j <= r; j++){
			for (int k = 0; k <= r; k++){
    185c:	0f 5f       	subi	r16, 0xFF	; 255
    185e:	1f 4f       	sbci	r17, 0xFF	; 255
    1860:	80 16       	cp	r8, r16
    1862:	91 06       	cpc	r9, r17
    1864:	0c f0       	brlt	.+2      	; 0x1868 <effect_ball+0x1e6>
    1866:	3b cf       	rjmp	.-394    	; 0x16de <effect_ball+0x5c>

void effect_ball(int r, int x, int y, int z){
	int rsquared = r*r;
	rsquared = rsquared + r;
	for (int i = 0; i <= r; i++){
		for (int j = 0; j <= r; j++){
    1868:	08 94       	sec
    186a:	a1 1c       	adc	r10, r1
    186c:	b1 1c       	adc	r11, r1
    186e:	8a 14       	cp	r8, r10
    1870:	9b 04       	cpc	r9, r11
    1872:	74 f0       	brlt	.+28     	; 0x1890 <effect_ball+0x20e>
		delay_ms(delay);
		effect_pathmove(path, 36);
	}
}

void effect_ball(int r, int x, int y, int z){
    1874:	09 a5       	ldd	r16, Y+41	; 0x29
    1876:	1a a5       	ldd	r17, Y+42	; 0x2a
    1878:	b8 a6       	std	Y+40, r11	; 0x28
    187a:	af a2       	std	Y+39, r10	; 0x27
	int rsquared = r*r;
	rsquared = rsquared + r;
	for (int i = 0; i <= r; i++){
		for (int j = 0; j <= r; j++){
			for (int k = 0; k <= r; k++){
				if (inrange(i+x,j+y,k+z) && !getvoxel(i+x,j+y,k+z) && (rsquared > pow((i),2)+pow((j),2)+pow(k,2))){
    187c:	c5 01       	movw	r24, r10
    187e:	aa 27       	eor	r26, r26
    1880:	97 fd       	sbrc	r25, 7
    1882:	a0 95       	com	r26
    1884:	ba 2f       	mov	r27, r26
    1886:	8b 8f       	std	Y+27, r24	; 0x1b
    1888:	9c 8f       	std	Y+28, r25	; 0x1c
    188a:	ad 8f       	std	Y+29, r26	; 0x1d
    188c:	be 8f       	std	Y+30, r27	; 0x1e
    188e:	27 cf       	rjmp	.-434    	; 0x16de <effect_ball+0x5c>
}

void effect_ball(int r, int x, int y, int z){
	int rsquared = r*r;
	rsquared = rsquared + r;
	for (int i = 0; i <= r; i++){
    1890:	a9 81       	ldd	r26, Y+1	; 0x01
    1892:	ba 81       	ldd	r27, Y+2	; 0x02
    1894:	11 96       	adiw	r26, 0x01	; 1
    1896:	ba 83       	std	Y+2, r27	; 0x02
    1898:	a9 83       	std	Y+1, r26	; 0x01
    189a:	8a 16       	cp	r8, r26
    189c:	9b 06       	cpc	r9, r27
    189e:	84 f4       	brge	.+32     	; 0x18c0 <effect_ball+0x23e>
    18a0:	1f c0       	rjmp	.+62     	; 0x18e0 <effect_ball+0x25e>
    18a2:	1a 82       	std	Y+2, r1	; 0x02
    18a4:	19 82       	std	Y+1, r1	; 0x01
		delay_ms(delay);
		effect_pathmove(path, 36);
	}
}

void effect_ball(int r, int x, int y, int z){
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	89 a7       	std	Y+41, r24	; 0x29
    18ac:	9a a7       	std	Y+42, r25	; 0x2a
	int rsquared = r*r;
	rsquared = rsquared + r;
	for (int i = 0; i <= r; i++){
		for (int j = 0; j <= r; j++){
			for (int k = 0; k <= r; k++){
				if (inrange(i+x,j+y,k+z) && !getvoxel(i+x,j+y,k+z) && (rsquared > pow((i),2)+pow((j),2)+pow(k,2))){
    18ae:	c9 01       	movw	r24, r18
    18b0:	aa 27       	eor	r26, r26
    18b2:	97 fd       	sbrc	r25, 7
    18b4:	a0 95       	com	r26
    18b6:	ba 2f       	mov	r27, r26
    18b8:	8b a3       	std	Y+35, r24	; 0x23
    18ba:	9c a3       	std	Y+36, r25	; 0x24
    18bc:	ad a3       	std	Y+37, r26	; 0x25
    18be:	be a3       	std	Y+38, r27	; 0x26
		delay_ms(delay);
		effect_pathmove(path, 36);
	}
}

void effect_ball(int r, int x, int y, int z){
    18c0:	aa 24       	eor	r10, r10
    18c2:	bb 24       	eor	r11, r11
    18c4:	a9 81       	ldd	r26, Y+1	; 0x01
    18c6:	ba 81       	ldd	r27, Y+2	; 0x02
    18c8:	bc a7       	std	Y+44, r27	; 0x2c
    18ca:	ab a7       	std	Y+43, r26	; 0x2b
	int rsquared = r*r;
	rsquared = rsquared + r;
	for (int i = 0; i <= r; i++){
		for (int j = 0; j <= r; j++){
			for (int k = 0; k <= r; k++){
				if (inrange(i+x,j+y,k+z) && !getvoxel(i+x,j+y,k+z) && (rsquared > pow((i),2)+pow((j),2)+pow(k,2))){
    18cc:	cd 01       	movw	r24, r26
    18ce:	aa 27       	eor	r26, r26
    18d0:	97 fd       	sbrc	r25, 7
    18d2:	a0 95       	com	r26
    18d4:	ba 2f       	mov	r27, r26
    18d6:	8f 8f       	std	Y+31, r24	; 0x1f
    18d8:	98 a3       	std	Y+32, r25	; 0x20
    18da:	a9 a3       	std	Y+33, r26	; 0x21
    18dc:	ba a3       	std	Y+34, r27	; 0x22
    18de:	ca cf       	rjmp	.-108    	; 0x1874 <effect_ball+0x1f2>
					set_voxel(x-i,y-j,z-k);
				}
			}
		}
	}
}
    18e0:	ae 96       	adiw	r28, 0x2e	; 46
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	1f 91       	pop	r17
    18f2:	0f 91       	pop	r16
    18f4:	ff 90       	pop	r15
    18f6:	ef 90       	pop	r14
    18f8:	df 90       	pop	r13
    18fa:	cf 90       	pop	r12
    18fc:	bf 90       	pop	r11
    18fe:	af 90       	pop	r10
    1900:	9f 90       	pop	r9
    1902:	8f 90       	pop	r8
    1904:	7f 90       	pop	r7
    1906:	6f 90       	pop	r6
    1908:	5f 90       	pop	r5
    190a:	4f 90       	pop	r4
    190c:	3f 90       	pop	r3
    190e:	2f 90       	pop	r2
    1910:	08 95       	ret

00001912 <effect_ball_grow>:

void effect_ball_grow(int delay, int startr, int stopr, int x, int y, int z){
    1912:	8f 92       	push	r8
    1914:	9f 92       	push	r9
    1916:	af 92       	push	r10
    1918:	bf 92       	push	r11
    191a:	cf 92       	push	r12
    191c:	df 92       	push	r13
    191e:	ef 92       	push	r14
    1920:	ff 92       	push	r15
    1922:	0f 93       	push	r16
    1924:	1f 93       	push	r17
    1926:	cf 93       	push	r28
    1928:	df 93       	push	r29
    192a:	4c 01       	movw	r8, r24
    192c:	6a 01       	movw	r12, r20
    192e:	59 01       	movw	r10, r18
	for (int r=startr; r<=stopr; r++){
    1930:	46 17       	cp	r20, r22
    1932:	57 07       	cpc	r21, r23
    1934:	74 f0       	brlt	.+28     	; 0x1952 <effect_ball_grow+0x40>
    1936:	eb 01       	movw	r28, r22
		effect_ball(r,x,y,z);
    1938:	ce 01       	movw	r24, r28
    193a:	b5 01       	movw	r22, r10
    193c:	a8 01       	movw	r20, r16
    193e:	97 01       	movw	r18, r14
    1940:	0e 94 41 0b 	call	0x1682	; 0x1682 <effect_ball>
		delay_ms(delay);
    1944:	c4 01       	movw	r24, r8
    1946:	0e 94 0d 04 	call	0x81a	; 0x81a <delay_ms>
		}
	}
}

void effect_ball_grow(int delay, int startr, int stopr, int x, int y, int z){
	for (int r=startr; r<=stopr; r++){
    194a:	21 96       	adiw	r28, 0x01	; 1
    194c:	cc 16       	cp	r12, r28
    194e:	dd 06       	cpc	r13, r29
    1950:	9c f7       	brge	.-26     	; 0x1938 <effect_ball_grow+0x26>
		effect_ball(r,x,y,z);
		delay_ms(delay);
	}
	
}
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	1f 91       	pop	r17
    1958:	0f 91       	pop	r16
    195a:	ff 90       	pop	r15
    195c:	ef 90       	pop	r14
    195e:	df 90       	pop	r13
    1960:	cf 90       	pop	r12
    1962:	bf 90       	pop	r11
    1964:	af 90       	pop	r10
    1966:	9f 90       	pop	r9
    1968:	8f 90       	pop	r8
    196a:	08 95       	ret

0000196c <font_getpath>:
void font_getpath (unsigned char path, unsigned char *destination, int length)
{
	int i;
	int offset = 0;
	
	if (path == 1)
    196c:	81 30       	cpi	r24, 0x01	; 1
    196e:	19 f0       	breq	.+6      	; 0x1976 <font_getpath+0xa>
*/

void font_getpath (unsigned char path, unsigned char *destination, int length)
{
	int i;
	int offset = 0;
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	02 c0       	rjmp	.+4      	; 0x197a <font_getpath+0xe>
	
	if (path == 1)
		offset=28;
    1976:	2c e1       	ldi	r18, 0x1C	; 28
    1978:	30 e0       	ldi	r19, 0x00	; 0
	
	for (i = 0; i < length; i++)
    197a:	14 16       	cp	r1, r20
    197c:	15 06       	cpc	r1, r21
    197e:	7c f4       	brge	.+30     	; 0x199e <font_getpath+0x32>
    1980:	a6 2f       	mov	r26, r22
    1982:	b7 2f       	mov	r27, r23
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	90 e0       	ldi	r25, 0x00	; 0
		destination[i] = pgm_read_byte(&paths[i+offset]);
    1988:	fc 01       	movw	r30, r24
    198a:	e2 0f       	add	r30, r18
    198c:	f3 1f       	adc	r31, r19
    198e:	e8 56       	subi	r30, 0x68	; 104
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	e4 91       	lpm	r30, Z+
    1994:	ed 93       	st	X+, r30
	int offset = 0;
	
	if (path == 1)
		offset=28;
	
	for (i = 0; i < length; i++)
    1996:	01 96       	adiw	r24, 0x01	; 1
    1998:	84 17       	cp	r24, r20
    199a:	95 07       	cpc	r25, r21
    199c:	a9 f7       	brne	.-22     	; 0x1988 <font_getpath+0x1c>
    199e:	08 95       	ret

000019a0 <font_getchar>:
		destination[i] = pgm_read_byte(&paths[i+offset]);
}

void font_getchar (char chr, unsigned char dst[5])
{
    19a0:	ef 92       	push	r14
    19a2:	ff 92       	push	r15
    19a4:	0f 93       	push	r16
    19a6:	1f 93       	push	r17
    19a8:	cf 93       	push	r28
    19aa:	df 93       	push	r29
	uint8_t i;
	chr -= 32; // our bitmap font starts at ascii char 32.
    19ac:	80 52       	subi	r24, 0x20	; 32
	
    for (i = 0; i < 5; i++)
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&font[(chr*5)+i]);
    19ae:	95 e0       	ldi	r25, 0x05	; 5
    19b0:	89 9f       	mul	r24, r25
    19b2:	70 01       	movw	r14, r0
    19b4:	11 24       	eor	r1, r1
    19b6:	06 2f       	mov	r16, r22
    19b8:	17 2f       	mov	r17, r23
    19ba:	c0 e0       	ldi	r28, 0x00	; 0
    19bc:	d0 e0       	ldi	r29, 0x00	; 0
    19be:	ce 01       	movw	r24, r28
    19c0:	8e 0d       	add	r24, r14
    19c2:	9f 1d       	adc	r25, r15
    19c4:	80 50       	subi	r24, 0x00	; 0
    19c6:	90 40       	sbci	r25, 0x00	; 0
    19c8:	0e 94 c9 19 	call	0x3392	; 0x3392 <__eerd_byte_usb1287>
    19cc:	f8 01       	movw	r30, r16
    19ce:	81 93       	st	Z+, r24
    19d0:	8f 01       	movw	r16, r30
    19d2:	21 96       	adiw	r28, 0x01	; 1
void font_getchar (char chr, unsigned char dst[5])
{
	uint8_t i;
	chr -= 32; // our bitmap font starts at ascii char 32.
	
    for (i = 0; i < 5; i++)
    19d4:	c5 30       	cpi	r28, 0x05	; 5
    19d6:	d1 05       	cpc	r29, r1
    19d8:	91 f7       	brne	.-28     	; 0x19be <font_getchar+0x1e>
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&font[(chr*5)+i]);
}
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	1f 91       	pop	r17
    19e0:	0f 91       	pop	r16
    19e2:	ff 90       	pop	r15
    19e4:	ef 90       	pop	r14
    19e6:	08 95       	ret

000019e8 <font_getbitmap>:

void font_getbitmap (char bitmap, unsigned char dst[8])
{
    19e8:	ef 92       	push	r14
    19ea:	ff 92       	push	r15
    19ec:	0f 93       	push	r16
    19ee:	1f 93       	push	r17
    19f0:	cf 93       	push	r28
    19f2:	df 93       	push	r29
	int i;
	
    for (i = 0; i < 8; i++)
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&bitmaps[(uint8_t)bitmap][(uint8_t)i]);
    19f4:	c8 2f       	mov	r28, r24
    19f6:	d0 e0       	ldi	r29, 0x00	; 0
    19f8:	cc 0f       	add	r28, r28
    19fa:	dd 1f       	adc	r29, r29
    19fc:	cc 0f       	add	r28, r28
    19fe:	dd 1f       	adc	r29, r29
    1a00:	cc 0f       	add	r28, r28
    1a02:	dd 1f       	adc	r29, r29
	
    for (i = 0; i < 5; i++)
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&font[(chr*5)+i]);
}

void font_getbitmap (char bitmap, unsigned char dst[8])
    1a04:	c9 53       	subi	r28, 0x39	; 57
    1a06:	de 4f       	sbci	r29, 0xFE	; 254
{
	int i;
	
    for (i = 0; i < 8; i++)
    1a08:	e6 2e       	mov	r14, r22
    1a0a:	f7 2e       	mov	r15, r23
    1a0c:	00 e0       	ldi	r16, 0x00	; 0
    1a0e:	10 e0       	ldi	r17, 0x00	; 0
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&bitmaps[(uint8_t)bitmap][(uint8_t)i]);
    1a10:	ce 01       	movw	r24, r28
    1a12:	0e 94 c9 19 	call	0x3392	; 0x3392 <__eerd_byte_usb1287>
    1a16:	f7 01       	movw	r30, r14
    1a18:	81 93       	st	Z+, r24
    1a1a:	7f 01       	movw	r14, r30

void font_getbitmap (char bitmap, unsigned char dst[8])
{
	int i;
	
    for (i = 0; i < 8; i++)
    1a1c:	0f 5f       	subi	r16, 0xFF	; 255
    1a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a20:	21 96       	adiw	r28, 0x01	; 1
    1a22:	08 30       	cpi	r16, 0x08	; 8
    1a24:	11 05       	cpc	r17, r1
    1a26:	a1 f7       	brne	.-24     	; 0x1a10 <font_getbitmap+0x28>
		dst[i] = (unsigned char)eeprom_read_byte((uint8_t*)&bitmaps[(uint8_t)bitmap][(uint8_t)i]);
	
}
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	1f 91       	pop	r17
    1a2e:	0f 91       	pop	r16
    1a30:	ff 90       	pop	r15
    1a32:	ef 90       	pop	r14
    1a34:	08 95       	ret

00001a36 <font_getbitmappixel>:

unsigned char font_getbitmappixel ( char bitmap, char x, char y)
{
    1a36:	1f 93       	push	r17
    1a38:	14 2f       	mov	r17, r20
	uint8_t tmp = eeprom_read_byte((uint8_t*)&bitmaps[(uint8_t)bitmap][(uint8_t)x]);
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	88 0f       	add	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	88 0f       	add	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	86 0f       	add	r24, r22
    1a4a:	91 1d       	adc	r25, r1
    1a4c:	89 53       	subi	r24, 0x39	; 57
    1a4e:	9e 4f       	sbci	r25, 0xFE	; 254
    1a50:	0e 94 c9 19 	call	0x3392	; 0x3392 <__eerd_byte_usb1287>
	return (tmp >> y) & 0x01;
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <font_getbitmappixel+0x26>
    1a58:	95 95       	asr	r25
    1a5a:	87 95       	ror	r24
    1a5c:	1a 95       	dec	r17
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <font_getbitmappixel+0x22>
}
    1a60:	81 70       	andi	r24, 0x01	; 1
    1a62:	1f 91       	pop	r17
    1a64:	08 95       	ret

00001a66 <setup>:
	}	
}

void setup(void)
{	
	DDRA = 0xff; // Columns C2(PE0)-C9(PE7)
    1a66:	8f ef       	ldi	r24, 0xFF	; 255
    1a68:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xdb; // NES_A, NES_B, 4Pin header (PB6-PB7)
    1a6a:	9b ed       	ldi	r25, 0xDB	; 219
    1a6c:	94 b9       	out	0x04, r25	; 4
	DDRC = 0xff; // Layers  L7(PC0)-L0(PC7)
    1a6e:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xc0; // RCK (PD7), SCK (PD6)
    1a70:	80 ec       	ldi	r24, 0xC0	; 192
    1a72:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x03; // L8 (PE1), L9 (PE0), 4Pin header (PE4-PE5)
    1a74:	83 e0       	ldi	r24, 0x03	; 3
    1a76:	8d b9       	out	0x0d, r24	; 13
	DDRF = 0x03; // C0 (PF0), C1 (PF1)
    1a78:	80 bb       	out	0x10, r24	; 16
	
	PORTA = 0x00; // Turn all outputs off, just in case.
    1a7a:	12 b8       	out	0x02, r1	; 2
	PORTB = 0x00;
    1a7c:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;
    1a7e:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x00;
    1a80:	1b b8       	out	0x0b, r1	; 11
	PORTE = 0x00;
    1a82:	1e b8       	out	0x0e, r1	; 14
	PORTF = 0x00;
    1a84:	11 ba       	out	0x11, r1	; 17
	
	// Setup timer 1 for interrupts (LED-output)
	// Frame buffer interrupt
	// 16 000 000/256/62 = 2083 interrupts per second
	// 1000/10 = 100 frames per second
	OCR1A = 60; 								// Interrupt counter at 60
    1a86:	8c e3       	ldi	r24, 0x3C	; 60
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	90 93 89 00 	sts	0x0089, r25
    1a8e:	80 93 88 00 	sts	0x0088, r24
    TCCR1B |= (1 << CS12) | (1 << WGM12);		// Set Clock prescaler to 256. Set CTC mode.
    1a92:	e1 e8       	ldi	r30, 0x81	; 129
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	8c 60       	ori	r24, 0x0C	; 12
    1a9a:	80 83       	st	Z, r24
	TCNT1 = 0x00;								// Set initial value of counter to 0
    1a9c:	10 92 85 00 	sts	0x0085, r1
    1aa0:	10 92 84 00 	sts	0x0084, r1
	TIMSK1 |= (1 << OCIE1A);					// Enable interrupt.
    1aa4:	ef e6       	ldi	r30, 0x6F	; 111
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	82 60       	ori	r24, 0x02	; 2
    1aac:	80 83       	st	Z, r24
	
	
	// Setup timer 3 for interrupts (NES-controller)
	// 16 000 000/1024/520 = 30Hz
	OCR3A = 520;								// Interrupt counter at
    1aae:	88 e0       	ldi	r24, 0x08	; 8
    1ab0:	92 e0       	ldi	r25, 0x02	; 2
    1ab2:	90 93 99 00 	sts	0x0099, r25
    1ab6:	80 93 98 00 	sts	0x0098, r24
	TCCR3B |= (1 << CS30) | (1 << CS32) | (1 << WGM32);		// Set clock prescaler to 1024. Set CTC mode.
    1aba:	e1 e9       	ldi	r30, 0x91	; 145
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	8d 60       	ori	r24, 0x0D	; 13
    1ac2:	80 83       	st	Z, r24
	TCNT3 = 0x00;								// Set initial value of counter to 0
    1ac4:	10 92 95 00 	sts	0x0095, r1
    1ac8:	10 92 94 00 	sts	0x0094, r1
	TIMSK3 |= (1 << OCIE3A);					// Enable interrupt on timer 0
    1acc:	e1 e7       	ldi	r30, 0x71	; 113
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	82 60       	ori	r24, 0x02	; 2
    1ad4:	80 83       	st	Z, r24
	
	// Initiate USART
    // USART Baud rate is defined in MYUBRR
    //UBRRH = BAUD >> 8;
    //UBRRL = BAUD;
	UBRR1 = 103; // 9600 BAUD from table in datasheet (f_osc = 16,0 MHz, U2Xn = 0)
    1ad6:	87 e6       	ldi	r24, 0x67	; 103
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	90 93 cd 00 	sts	0x00CD, r25
    1ade:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10); // usync, no parity, 1 stop bit, frame length = 8, clock rising
    1ae2:	86 e0       	ldi	r24, 0x06	; 6
    1ae4:	80 93 ca 00 	sts	0x00CA, r24
    // Enable USART, tx and rx
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
    1ae8:	88 e1       	ldi	r24, 0x18	; 24
    1aea:	80 93 c9 00 	sts	0x00C9, r24
    UDR1 = 0x00; // send an empty byte to indicate powerup.
    1aee:	10 92 ce 00 	sts	0x00CE, r1
}
    1af2:	08 95       	ret

00001af4 <main>:


int main(void)
{
	// Need to seed the random function
	setup(); // Initialize IO-Ports etc.
    1af4:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <setup>
	sei(); // Enable interrupts
    1af8:	78 94       	sei
	nesControllerData=2;
    1afa:	82 e0       	ldi	r24, 0x02	; 2
    1afc:	80 93 1f 03 	sts	0x031F, r24
	delay_ms(1000); // give the NES-controller interrupt time to run
    1b00:	88 ee       	ldi	r24, 0xE8	; 232
    1b02:	93 e0       	ldi	r25, 0x03	; 3
    1b04:	0e 94 0d 04 	call	0x81a	; 0x81a <delay_ms>
    if (1){//nesControllerData & 0x08){ // If the start button is currently pressed play snake
		snake_start_anim();
    1b08:	0e 94 bf 10 	call	0x217e	; 0x217e <snake_start_anim>
		while (1)
		{snake_game();}	
    1b0c:	0e 94 71 11 	call	0x22e2	; 0x22e2 <snake_game>
    1b10:	fd cf       	rjmp	.-6      	; 0x1b0c <main+0x18>

00001b12 <__vector_32>:
    UDR1 = 0x00; // send an empty byte to indicate powerup.
}


ISR(TIMER3_COMPA_vect) // Read from NES-controller (A)
{
    1b12:	1f 92       	push	r1
    1b14:	0f 92       	push	r0
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	0f 92       	push	r0
    1b1a:	11 24       	eor	r1, r1
    1b1c:	2f 93       	push	r18
    1b1e:	3f 93       	push	r19
    1b20:	4f 93       	push	r20
    1b22:	8f 93       	push	r24
    1b24:	9f 93       	push	r25
	nesControllerData = 0x00;
    1b26:	10 92 1f 03 	sts	0x031F, r1
	// Strobe
	PORTB |=  (1 << 0) | (1 << 3);
    1b2a:	85 b1       	in	r24, 0x05	; 5
    1b2c:	89 60       	ori	r24, 0x09	; 9
    1b2e:	85 b9       	out	0x05, r24	; 5
	//_delay_us(12);
	PORTB &= ~( (1 << 0) | (1 << 3) );
    1b30:	85 b1       	in	r24, 0x05	; 5
    1b32:	86 7f       	andi	r24, 0xF6	; 246
    1b34:	85 b9       	out	0x05, r24	; 5
	//input data
	for (int i=0; i<8; i++)
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	90 e0       	ldi	r25, 0x00	; 0
	{
		nesControllerData |= ( ( (~PINB & (1 << 2) ) >> 2 ) << i);
    1b3a:	23 b1       	in	r18, 0x03	; 3
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	20 95       	com	r18
    1b40:	30 95       	com	r19
    1b42:	24 70       	andi	r18, 0x04	; 4
    1b44:	30 70       	andi	r19, 0x00	; 0
    1b46:	35 95       	asr	r19
    1b48:	27 95       	ror	r18
    1b4a:	35 95       	asr	r19
    1b4c:	27 95       	ror	r18
    1b4e:	08 2e       	mov	r0, r24
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <__vector_32+0x44>
    1b52:	22 0f       	add	r18, r18
    1b54:	33 1f       	adc	r19, r19
    1b56:	0a 94       	dec	r0
    1b58:	e2 f7       	brpl	.-8      	; 0x1b52 <__vector_32+0x40>
    1b5a:	40 91 1f 03 	lds	r20, 0x031F
    1b5e:	24 2b       	or	r18, r20
    1b60:	20 93 1f 03 	sts	0x031F, r18
		nesControllerData_B |= ( ( (~PINB & (1 << 5) ) >> 5 ) << i);
    1b64:	23 b1       	in	r18, 0x03	; 3
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	20 95       	com	r18
    1b6a:	30 95       	com	r19
    1b6c:	20 72       	andi	r18, 0x20	; 32
    1b6e:	30 70       	andi	r19, 0x00	; 0
    1b70:	35 95       	asr	r19
    1b72:	27 95       	ror	r18
    1b74:	35 95       	asr	r19
    1b76:	27 95       	ror	r18
    1b78:	35 95       	asr	r19
    1b7a:	27 95       	ror	r18
    1b7c:	35 95       	asr	r19
    1b7e:	27 95       	ror	r18
    1b80:	35 95       	asr	r19
    1b82:	27 95       	ror	r18
    1b84:	08 2e       	mov	r0, r24
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <__vector_32+0x7a>
    1b88:	22 0f       	add	r18, r18
    1b8a:	33 1f       	adc	r19, r19
    1b8c:	0a 94       	dec	r0
    1b8e:	e2 f7       	brpl	.-8      	; 0x1b88 <__vector_32+0x76>
    1b90:	40 91 1d 03 	lds	r20, 0x031D
    1b94:	24 2b       	or	r18, r20
    1b96:	20 93 1d 03 	sts	0x031D, r18
		//_delay_us(6);
		PORTB |=  (1 << 1) | (1 << 4); // Clock
    1b9a:	25 b1       	in	r18, 0x05	; 5
    1b9c:	22 61       	ori	r18, 0x12	; 18
    1b9e:	25 b9       	out	0x05, r18	; 5
		//_delay_us(6);
		PORTB &= ~( (1 << 1) | (1 << 4) );
    1ba0:	25 b1       	in	r18, 0x05	; 5
    1ba2:	2d 7e       	andi	r18, 0xED	; 237
    1ba4:	25 b9       	out	0x05, r18	; 5
	// Strobe
	PORTB |=  (1 << 0) | (1 << 3);
	//_delay_us(12);
	PORTB &= ~( (1 << 0) | (1 << 3) );
	//input data
	for (int i=0; i<8; i++)
    1ba6:	01 96       	adiw	r24, 0x01	; 1
    1ba8:	88 30       	cpi	r24, 0x08	; 8
    1baa:	91 05       	cpc	r25, r1
    1bac:	31 f6       	brne	.-116    	; 0x1b3a <__vector_32+0x28>
		PORTB |=  (1 << 1) | (1 << 4); // Clock
		//_delay_us(6);
		PORTB &= ~( (1 << 1) | (1 << 4) );
	}
	// Lag snake input fra kontrollerinput
	if      ((nesControllerData & 0x40) && !(sdir==SOUTH))
    1bae:	90 91 1f 03 	lds	r25, 0x031F
    1bb2:	89 2f       	mov	r24, r25
    1bb4:	96 ff       	sbrs	r25, 6
    1bb6:	08 c0       	rjmp	.+16     	; 0x1bc8 <__vector_32+0xb6>
    1bb8:	20 91 26 03 	lds	r18, 0x0326
    1bbc:	23 35       	cpi	r18, 0x53	; 83
    1bbe:	21 f0       	breq	.+8      	; 0x1bc8 <__vector_32+0xb6>
	{sinput = NORTH;} 
    1bc0:	8e e4       	ldi	r24, 0x4E	; 78
    1bc2:	80 93 21 03 	sts	0x0321, r24
    1bc6:	31 c0       	rjmp	.+98     	; 0x1c2a <__vector_32+0x118>
	else if ((nesControllerData & 0x80) && !(sdir==NORTH))
    1bc8:	99 23       	and	r25, r25
    1bca:	44 f4       	brge	.+16     	; 0x1bdc <__vector_32+0xca>
    1bcc:	90 91 26 03 	lds	r25, 0x0326
    1bd0:	9e 34       	cpi	r25, 0x4E	; 78
    1bd2:	21 f0       	breq	.+8      	; 0x1bdc <__vector_32+0xca>
	{sinput = SOUTH;}
    1bd4:	83 e5       	ldi	r24, 0x53	; 83
    1bd6:	80 93 21 03 	sts	0x0321, r24
    1bda:	27 c0       	rjmp	.+78     	; 0x1c2a <__vector_32+0x118>
	else if ((nesControllerData & 0x10) && !(sdir==WEST))
    1bdc:	84 ff       	sbrs	r24, 4
    1bde:	08 c0       	rjmp	.+16     	; 0x1bf0 <__vector_32+0xde>
    1be0:	90 91 26 03 	lds	r25, 0x0326
    1be4:	97 35       	cpi	r25, 0x57	; 87
    1be6:	21 f0       	breq	.+8      	; 0x1bf0 <__vector_32+0xde>
	{sinput = EAST;}
    1be8:	85 e4       	ldi	r24, 0x45	; 69
    1bea:	80 93 21 03 	sts	0x0321, r24
    1bee:	1d c0       	rjmp	.+58     	; 0x1c2a <__vector_32+0x118>
	else if ((nesControllerData & 0x20) && !(sdir==EAST))
    1bf0:	85 ff       	sbrs	r24, 5
    1bf2:	08 c0       	rjmp	.+16     	; 0x1c04 <__vector_32+0xf2>
    1bf4:	90 91 26 03 	lds	r25, 0x0326
    1bf8:	95 34       	cpi	r25, 0x45	; 69
    1bfa:	21 f0       	breq	.+8      	; 0x1c04 <__vector_32+0xf2>
	{sinput = WEST;}
    1bfc:	87 e5       	ldi	r24, 0x57	; 87
    1bfe:	80 93 21 03 	sts	0x0321, r24
    1c02:	13 c0       	rjmp	.+38     	; 0x1c2a <__vector_32+0x118>
	else if ((nesControllerData & 0x02) && !(sdir==DOWN))
    1c04:	81 ff       	sbrs	r24, 1
    1c06:	08 c0       	rjmp	.+16     	; 0x1c18 <__vector_32+0x106>
    1c08:	90 91 26 03 	lds	r25, 0x0326
    1c0c:	94 34       	cpi	r25, 0x44	; 68
    1c0e:	21 f0       	breq	.+8      	; 0x1c18 <__vector_32+0x106>
	{sinput = UP;}
    1c10:	85 e5       	ldi	r24, 0x55	; 85
    1c12:	80 93 21 03 	sts	0x0321, r24
    1c16:	09 c0       	rjmp	.+18     	; 0x1c2a <__vector_32+0x118>
	else if ((nesControllerData & 0x01) && !(sdir==UP))
    1c18:	80 ff       	sbrs	r24, 0
    1c1a:	07 c0       	rjmp	.+14     	; 0x1c2a <__vector_32+0x118>
    1c1c:	80 91 26 03 	lds	r24, 0x0326
    1c20:	85 35       	cpi	r24, 0x55	; 85
    1c22:	19 f0       	breq	.+6      	; 0x1c2a <__vector_32+0x118>
	{sinput = DOWN;}
    1c24:	84 e4       	ldi	r24, 0x44	; 68
    1c26:	80 93 21 03 	sts	0x0321, r24
		
	if ((nesControllerData & NES_SELECT) || (nesControllerData_B & NES_SELECT)){
    1c2a:	80 91 1f 03 	lds	r24, 0x031F
    1c2e:	82 fd       	sbrc	r24, 2
    1c30:	04 c0       	rjmp	.+8      	; 0x1c3a <__vector_32+0x128>
    1c32:	90 91 1d 03 	lds	r25, 0x031D
    1c36:	92 ff       	sbrs	r25, 2
    1c38:	03 c0       	rjmp	.+6      	; 0x1c40 <__vector_32+0x12e>
		selectPressed = 0xff;
    1c3a:	9f ef       	ldi	r25, 0xFF	; 255
    1c3c:	90 93 54 02 	sts	0x0254, r25
	}
	
	if ((nesControllerData & NES_START) || (nesControllerData_B & NES_START)){
    1c40:	83 fd       	sbrc	r24, 3
    1c42:	04 c0       	rjmp	.+8      	; 0x1c4c <__vector_32+0x13a>
    1c44:	80 91 1d 03 	lds	r24, 0x031D
    1c48:	83 ff       	sbrs	r24, 3
    1c4a:	03 c0       	rjmp	.+6      	; 0x1c52 <__vector_32+0x140>
		startPressed  = 0xff;
    1c4c:	8f ef       	ldi	r24, 0xFF	; 255
    1c4e:	80 93 20 03 	sts	0x0320, r24
		10 = UP
		20 = DOWN
		40 = LEFT
		80 = RIGHT
	*/
    1c52:	9f 91       	pop	r25
    1c54:	8f 91       	pop	r24
    1c56:	4f 91       	pop	r20
    1c58:	3f 91       	pop	r19
    1c5a:	2f 91       	pop	r18
    1c5c:	0f 90       	pop	r0
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	0f 90       	pop	r0
    1c62:	1f 90       	pop	r1
    1c64:	18 95       	reti

00001c66 <place_food>:



// Place food in the cube, currently only supports one food at a time
void place_food()
{
    1c66:	cf 93       	push	r28
    1c68:	df 93       	push	r29
	food_x = rand()%CUBE_SIZE;
    1c6a:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    1c6e:	ca e0       	ldi	r28, 0x0A	; 10
    1c70:	d0 e0       	ldi	r29, 0x00	; 0
    1c72:	be 01       	movw	r22, r28
    1c74:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__divmodhi4>
    1c78:	90 93 23 03 	sts	0x0323, r25
    1c7c:	80 93 22 03 	sts	0x0322, r24
	food_y = rand()%CUBE_SIZE;
    1c80:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    1c84:	be 01       	movw	r22, r28
    1c86:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__divmodhi4>
    1c8a:	90 93 2c 03 	sts	0x032C, r25
    1c8e:	80 93 2b 03 	sts	0x032B, r24
	food_z = rand()%CUBE_SIZE;
    1c92:	0e 94 91 19 	call	0x3322	; 0x3322 <rand>
    1c96:	be 01       	movw	r22, r28
    1c98:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__divmodhi4>
    1c9c:	90 93 25 03 	sts	0x0325, r25
    1ca0:	80 93 24 03 	sts	0x0324, r24
}
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	08 95       	ret

00001caa <draw_food>:

// Necessary to use separate function?
void draw_food()
{
	set_voxel(food_x,food_y,food_z);
    1caa:	60 91 2b 03 	lds	r22, 0x032B
    1cae:	70 91 2c 03 	lds	r23, 0x032C
    1cb2:	40 91 24 03 	lds	r20, 0x0324
    1cb6:	50 91 25 03 	lds	r21, 0x0325
    1cba:	80 91 22 03 	lds	r24, 0x0322
    1cbe:	90 91 23 03 	lds	r25, 0x0323
    1cc2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_voxel>
}
    1cc6:	08 95       	ret

00001cc8 <isfood>:

char isfood()
{
	int x=snake_x[0];
    1cc8:	e0 91 29 03 	lds	r30, 0x0329
    1ccc:	f0 91 2a 03 	lds	r31, 0x032A
    1cd0:	80 81       	ld	r24, Z
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
	int y=snake_y[0];
    1cd4:	e0 91 27 03 	lds	r30, 0x0327
    1cd8:	f0 91 28 03 	lds	r31, 0x0328
    1cdc:	20 81       	ld	r18, Z
    1cde:	30 e0       	ldi	r19, 0x00	; 0
	int z=snake_z[0];
    1ce0:	e0 91 2d 03 	lds	r30, 0x032D
    1ce4:	f0 91 2e 03 	lds	r31, 0x032E
    1ce8:	60 81       	ld	r22, Z
    1cea:	70 e0       	ldi	r23, 0x00	; 0
	switch(sdir)  // Use pointers and make this an separate function
    1cec:	40 91 26 03 	lds	r20, 0x0326
    1cf0:	4e 34       	cpi	r20, 0x4E	; 78
    1cf2:	71 f0       	breq	.+28     	; 0x1d10 <isfood+0x48>
    1cf4:	4f 34       	cpi	r20, 0x4F	; 79
    1cf6:	28 f4       	brcc	.+10     	; 0x1d02 <isfood+0x3a>
    1cf8:	44 34       	cpi	r20, 0x44	; 68
    1cfa:	b9 f0       	breq	.+46     	; 0x1d2a <isfood+0x62>
    1cfc:	45 34       	cpi	r20, 0x45	; 69
    1cfe:	79 f5       	brne	.+94     	; 0x1d5e <isfood+0x96>
    1d00:	0c c0       	rjmp	.+24     	; 0x1d1a <isfood+0x52>
    1d02:	45 35       	cpi	r20, 0x55	; 85
    1d04:	79 f0       	breq	.+30     	; 0x1d24 <isfood+0x5c>
    1d06:	47 35       	cpi	r20, 0x57	; 87
    1d08:	31 f0       	breq	.+12     	; 0x1d16 <isfood+0x4e>
    1d0a:	43 35       	cpi	r20, 0x53	; 83
    1d0c:	41 f5       	brne	.+80     	; 0x1d5e <isfood+0x96>
    1d0e:	07 c0       	rjmp	.+14     	; 0x1d1e <isfood+0x56>
	{
		case NORTH: y++; break;
    1d10:	2f 5f       	subi	r18, 0xFF	; 255
    1d12:	3f 4f       	sbci	r19, 0xFF	; 255
    1d14:	0c c0       	rjmp	.+24     	; 0x1d2e <isfood+0x66>
		case WEST:	x--; break;
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	0a c0       	rjmp	.+20     	; 0x1d2e <isfood+0x66>
		case EAST:	x++; break;
    1d1a:	01 96       	adiw	r24, 0x01	; 1
    1d1c:	08 c0       	rjmp	.+16     	; 0x1d2e <isfood+0x66>
		case SOUTH: y--; break;
    1d1e:	21 50       	subi	r18, 0x01	; 1
    1d20:	30 40       	sbci	r19, 0x00	; 0
    1d22:	05 c0       	rjmp	.+10     	; 0x1d2e <isfood+0x66>
		case UP:	z++; break;
    1d24:	6f 5f       	subi	r22, 0xFF	; 255
    1d26:	7f 4f       	sbci	r23, 0xFF	; 255
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <isfood+0x66>
		case DOWN:	z--; break;
    1d2a:	61 50       	subi	r22, 0x01	; 1
    1d2c:	70 40       	sbci	r23, 0x00	; 0
		default: return 0;
	}
	if(x==food_x && y==food_y && z==food_z)
    1d2e:	40 91 22 03 	lds	r20, 0x0322
    1d32:	50 91 23 03 	lds	r21, 0x0323
    1d36:	84 17       	cp	r24, r20
    1d38:	95 07       	cpc	r25, r21
    1d3a:	99 f4       	brne	.+38     	; 0x1d62 <isfood+0x9a>
    1d3c:	80 91 2b 03 	lds	r24, 0x032B
    1d40:	90 91 2c 03 	lds	r25, 0x032C
    1d44:	28 17       	cp	r18, r24
    1d46:	39 07       	cpc	r19, r25
    1d48:	71 f4       	brne	.+28     	; 0x1d66 <isfood+0x9e>
void draw_food()
{
	set_voxel(food_x,food_y,food_z);
}

char isfood()
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	20 91 24 03 	lds	r18, 0x0324
    1d50:	30 91 25 03 	lds	r19, 0x0325
    1d54:	62 17       	cp	r22, r18
    1d56:	73 07       	cpc	r23, r19
    1d58:	39 f0       	breq	.+14     	; 0x1d68 <isfood+0xa0>
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	08 95       	ret
		case WEST:	x--; break;
		case EAST:	x++; break;
		case SOUTH: y--; break;
		case UP:	z++; break;
		case DOWN:	z--; break;
		default: return 0;
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	08 95       	ret
	}
	if(x==food_x && y==food_y && z==food_z)
	{return 1;}
	else
	{return 0;}
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	08 95       	ret
    1d66:	80 e0       	ldi	r24, 0x00	; 0
}
    1d68:	08 95       	ret

00001d6a <initialize_snake>:
void initialize_snake ()
{
	int x = 5;
	int y = 4;
	int z = 4;
	sinput = EAST;
    1d6a:	85 e4       	ldi	r24, 0x45	; 69
    1d6c:	80 93 21 03 	sts	0x0321, r24
    1d70:	25 e0       	ldi	r18, 0x05	; 5
	for (int i=0;i<SNAKE_START;i++) // The snake body is filled with valid coordinates
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	90 e0       	ldi	r25, 0x00	; 0
	{
		snake_x[i] = x;
		snake_y[i] = y;
    1d76:	34 e0       	ldi	r19, 0x04	; 4
	int y = 4;
	int z = 4;
	sinput = EAST;
	for (int i=0;i<SNAKE_START;i++) // The snake body is filled with valid coordinates
	{
		snake_x[i] = x;
    1d78:	e0 91 29 03 	lds	r30, 0x0329
    1d7c:	f0 91 2a 03 	lds	r31, 0x032A
    1d80:	e8 0f       	add	r30, r24
    1d82:	f9 1f       	adc	r31, r25
    1d84:	20 83       	st	Z, r18
		snake_y[i] = y;
    1d86:	e0 91 27 03 	lds	r30, 0x0327
    1d8a:	f0 91 28 03 	lds	r31, 0x0328
    1d8e:	e8 0f       	add	r30, r24
    1d90:	f9 1f       	adc	r31, r25
    1d92:	30 83       	st	Z, r19
		snake_z[i] = z;
    1d94:	e0 91 2d 03 	lds	r30, 0x032D
    1d98:	f0 91 2e 03 	lds	r31, 0x032E
    1d9c:	e8 0f       	add	r30, r24
    1d9e:	f9 1f       	adc	r31, r25
    1da0:	30 83       	st	Z, r19
{
	int x = 5;
	int y = 4;
	int z = 4;
	sinput = EAST;
	for (int i=0;i<SNAKE_START;i++) // The snake body is filled with valid coordinates
    1da2:	01 96       	adiw	r24, 0x01	; 1
    1da4:	21 50       	subi	r18, 0x01	; 1
    1da6:	22 30       	cpi	r18, 0x02	; 2
    1da8:	39 f7       	brne	.-50     	; 0x1d78 <initialize_snake+0xe>
    1daa:	83 e0       	ldi	r24, 0x03	; 3
    1dac:	90 e0       	ldi	r25, 0x00	; 0
		snake_z[i] = z;
		x--;
	}
	for (int i=SNAKE_START;i<SNAKE_SIZE;i++) // The inactive part of the snake body is filled with invalid coordinates
	{
		snake_x[i] = 0xff;
    1dae:	2f ef       	ldi	r18, 0xFF	; 255
    1db0:	e0 91 29 03 	lds	r30, 0x0329
    1db4:	f0 91 2a 03 	lds	r31, 0x032A
    1db8:	e8 0f       	add	r30, r24
    1dba:	f9 1f       	adc	r31, r25
    1dbc:	20 83       	st	Z, r18
		snake_y[i] = 0xff;
    1dbe:	e0 91 27 03 	lds	r30, 0x0327
    1dc2:	f0 91 28 03 	lds	r31, 0x0328
    1dc6:	e8 0f       	add	r30, r24
    1dc8:	f9 1f       	adc	r31, r25
    1dca:	20 83       	st	Z, r18
		snake_z[i] = 0xff;
    1dcc:	e0 91 2d 03 	lds	r30, 0x032D
    1dd0:	f0 91 2e 03 	lds	r31, 0x032E
    1dd4:	e8 0f       	add	r30, r24
    1dd6:	f9 1f       	adc	r31, r25
    1dd8:	20 83       	st	Z, r18
		snake_x[i] = x;
		snake_y[i] = y;
		snake_z[i] = z;
		x--;
	}
	for (int i=SNAKE_START;i<SNAKE_SIZE;i++) // The inactive part of the snake body is filled with invalid coordinates
    1dda:	01 96       	adiw	r24, 0x01	; 1
    1ddc:	88 3c       	cpi	r24, 0xC8	; 200
    1dde:	91 05       	cpc	r25, r1
    1de0:	39 f7       	brne	.-50     	; 0x1db0 <initialize_snake+0x46>
	{
		snake_x[i] = 0xff;
		snake_y[i] = 0xff;
		snake_z[i] = 0xff;
	}
}
    1de2:	08 95       	ret

00001de4 <valid_move>:

// This function checks whether the snake is allowed to move in the desired direction
// Char input N,W,E,S,U,D (North,West,East,South,Up,Down)
unsigned char valid_move()
{
    1de4:	ef 92       	push	r14
    1de6:	ff 92       	push	r15
    1de8:	0f 93       	push	r16
    1dea:	1f 93       	push	r17
    1dec:	cf 93       	push	r28
    1dee:	df 93       	push	r29
	int x=snake_x[0];
    1df0:	e0 91 29 03 	lds	r30, 0x0329
    1df4:	f0 91 2a 03 	lds	r31, 0x032A
    1df8:	80 81       	ld	r24, Z
    1dfa:	c8 2f       	mov	r28, r24
    1dfc:	d0 e0       	ldi	r29, 0x00	; 0
	int y=snake_y[0];
    1dfe:	e0 91 27 03 	lds	r30, 0x0327
    1e02:	f0 91 28 03 	lds	r31, 0x0328
    1e06:	00 81       	ld	r16, Z
    1e08:	10 e0       	ldi	r17, 0x00	; 0
	int z=snake_z[0];
    1e0a:	e0 91 2d 03 	lds	r30, 0x032D
    1e0e:	f0 91 2e 03 	lds	r31, 0x032E
    1e12:	e0 80       	ld	r14, Z
    1e14:	ff 24       	eor	r15, r15
	
	switch(sdir)
    1e16:	80 91 26 03 	lds	r24, 0x0326
    1e1a:	8e 34       	cpi	r24, 0x4E	; 78
    1e1c:	71 f0       	breq	.+28     	; 0x1e3a <valid_move+0x56>
    1e1e:	8f 34       	cpi	r24, 0x4F	; 79
    1e20:	28 f4       	brcc	.+10     	; 0x1e2c <valid_move+0x48>
    1e22:	84 34       	cpi	r24, 0x44	; 68
    1e24:	c1 f0       	breq	.+48     	; 0x1e56 <valid_move+0x72>
    1e26:	85 34       	cpi	r24, 0x45	; 69
    1e28:	71 f5       	brne	.+92     	; 0x1e86 <valid_move+0xa2>
    1e2a:	0c c0       	rjmp	.+24     	; 0x1e44 <valid_move+0x60>
    1e2c:	85 35       	cpi	r24, 0x55	; 85
    1e2e:	79 f0       	breq	.+30     	; 0x1e4e <valid_move+0x6a>
    1e30:	87 35       	cpi	r24, 0x57	; 87
    1e32:	31 f0       	breq	.+12     	; 0x1e40 <valid_move+0x5c>
    1e34:	83 35       	cpi	r24, 0x53	; 83
    1e36:	39 f5       	brne	.+78     	; 0x1e86 <valid_move+0xa2>
    1e38:	07 c0       	rjmp	.+14     	; 0x1e48 <valid_move+0x64>
	{
		case NORTH: y++; break;
    1e3a:	0f 5f       	subi	r16, 0xFF	; 255
    1e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3e:	0e c0       	rjmp	.+28     	; 0x1e5c <valid_move+0x78>
		case WEST:	x--; break;
    1e40:	21 97       	sbiw	r28, 0x01	; 1
    1e42:	0c c0       	rjmp	.+24     	; 0x1e5c <valid_move+0x78>
		case EAST:	x++; break;
    1e44:	21 96       	adiw	r28, 0x01	; 1
    1e46:	0a c0       	rjmp	.+20     	; 0x1e5c <valid_move+0x78>
		case SOUTH: y--; break;
    1e48:	01 50       	subi	r16, 0x01	; 1
    1e4a:	10 40       	sbci	r17, 0x00	; 0
    1e4c:	07 c0       	rjmp	.+14     	; 0x1e5c <valid_move+0x78>
		case UP:	z++; break;
    1e4e:	08 94       	sec
    1e50:	e1 1c       	adc	r14, r1
    1e52:	f1 1c       	adc	r15, r1
    1e54:	03 c0       	rjmp	.+6      	; 0x1e5c <valid_move+0x78>
		case DOWN:	z--; break;
    1e56:	08 94       	sec
    1e58:	e1 08       	sbc	r14, r1
    1e5a:	f1 08       	sbc	r15, r1
		default: return 0;
	}
	
	if (inrange(x,y,z) && (!getvoxel(x,y,z) || isfood()))
    1e5c:	ce 01       	movw	r24, r28
    1e5e:	b8 01       	movw	r22, r16
    1e60:	a7 01       	movw	r20, r14
    1e62:	0e 94 3c 01 	call	0x278	; 0x278 <inrange>
    1e66:	88 23       	and	r24, r24
    1e68:	81 f0       	breq	.+32     	; 0x1e8a <valid_move+0xa6>
    1e6a:	ce 01       	movw	r24, r28
    1e6c:	b8 01       	movw	r22, r16
    1e6e:	a7 01       	movw	r20, r14
    1e70:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <getvoxel>
    1e74:	88 23       	and	r24, r24
    1e76:	59 f0       	breq	.+22     	; 0x1e8e <valid_move+0xaa>
    1e78:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <isfood>
	}
}

// This function checks whether the snake is allowed to move in the desired direction
// Char input N,W,E,S,U,D (North,West,East,South,Up,Down)
unsigned char valid_move()
    1e7c:	91 e0       	ldi	r25, 0x01	; 1
    1e7e:	88 23       	and	r24, r24
    1e80:	39 f4       	brne	.+14     	; 0x1e90 <valid_move+0xac>
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	05 c0       	rjmp	.+10     	; 0x1e90 <valid_move+0xac>
		case WEST:	x--; break;
		case EAST:	x++; break;
		case SOUTH: y--; break;
		case UP:	z++; break;
		case DOWN:	z--; break;
		default: return 0;
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	03 c0       	rjmp	.+6      	; 0x1e90 <valid_move+0xac>
	}
	
	if (inrange(x,y,z) && (!getvoxel(x,y,z) || isfood()))
		{return 1;}
	else
		{return 0;}
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	01 c0       	rjmp	.+2      	; 0x1e90 <valid_move+0xac>
		case DOWN:	z--; break;
		default: return 0;
	}
	
	if (inrange(x,y,z) && (!getvoxel(x,y,z) || isfood()))
		{return 1;}
    1e8e:	91 e0       	ldi	r25, 0x01	; 1
	else
		{return 0;}
}
    1e90:	89 2f       	mov	r24, r25
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	1f 91       	pop	r17
    1e98:	0f 91       	pop	r16
    1e9a:	ff 90       	pop	r15
    1e9c:	ef 90       	pop	r14
    1e9e:	08 95       	ret

00001ea0 <move_snake>:


// This function moves the snake
void move_snake()
{
    1ea0:	8f 92       	push	r8
    1ea2:	9f 92       	push	r9
    1ea4:	af 92       	push	r10
    1ea6:	bf 92       	push	r11
    1ea8:	cf 92       	push	r12
    1eaa:	df 92       	push	r13
    1eac:	ff 92       	push	r15
    1eae:	0f 93       	push	r16
    1eb0:	1f 93       	push	r17
    1eb2:	cf 93       	push	r28
    1eb4:	df 93       	push	r29
	int i=0;
	int x,y,z;
	int next_x=snake_x[0];
    1eb6:	e0 91 29 03 	lds	r30, 0x0329
    1eba:	f0 91 2a 03 	lds	r31, 0x032A
    1ebe:	a0 80       	ld	r10, Z
    1ec0:	bb 24       	eor	r11, r11
	int next_y=snake_y[0];
    1ec2:	e0 91 27 03 	lds	r30, 0x0327
    1ec6:	f0 91 28 03 	lds	r31, 0x0328
    1eca:	c0 80       	ld	r12, Z
    1ecc:	dd 24       	eor	r13, r13
	int next_z=snake_z[0];
    1ece:	e0 91 2d 03 	lds	r30, 0x032D
    1ed2:	f0 91 2e 03 	lds	r31, 0x032E
    1ed6:	80 80       	ld	r8, Z
    1ed8:	99 24       	eor	r9, r9
	//next_coordinates(next_x,next_y,next_z,dir);
	
	switch(sdir)
    1eda:	80 91 26 03 	lds	r24, 0x0326
    1ede:	8e 34       	cpi	r24, 0x4E	; 78
    1ee0:	71 f0       	breq	.+28     	; 0x1efe <move_snake+0x5e>
    1ee2:	8f 34       	cpi	r24, 0x4F	; 79
    1ee4:	28 f4       	brcc	.+10     	; 0x1ef0 <move_snake+0x50>
    1ee6:	84 34       	cpi	r24, 0x44	; 68
    1ee8:	01 f1       	breq	.+64     	; 0x1f2a <move_snake+0x8a>
    1eea:	85 34       	cpi	r24, 0x45	; 69
    1eec:	59 f4       	brne	.+22     	; 0x1f04 <move_snake+0x64>
    1eee:	11 c0       	rjmp	.+34     	; 0x1f12 <move_snake+0x72>
    1ef0:	85 35       	cpi	r24, 0x55	; 85
    1ef2:	b9 f0       	breq	.+46     	; 0x1f22 <move_snake+0x82>
    1ef4:	87 35       	cpi	r24, 0x57	; 87
    1ef6:	49 f0       	breq	.+18     	; 0x1f0a <move_snake+0x6a>
    1ef8:	83 35       	cpi	r24, 0x53	; 83
    1efa:	21 f4       	brne	.+8      	; 0x1f04 <move_snake+0x64>
    1efc:	0e c0       	rjmp	.+28     	; 0x1f1a <move_snake+0x7a>
	{
		case NORTH: next_y++; break;
    1efe:	08 94       	sec
    1f00:	c1 1c       	adc	r12, r1
    1f02:	d1 1c       	adc	r13, r1
}


// This function moves the snake
void move_snake()
{
    1f04:	c0 e0       	ldi	r28, 0x00	; 0
    1f06:	d0 e0       	ldi	r29, 0x00	; 0
    1f08:	50 c0       	rjmp	.+160    	; 0x1faa <move_snake+0x10a>
	//next_coordinates(next_x,next_y,next_z,dir);
	
	switch(sdir)
	{
		case NORTH: next_y++; break;
		case WEST:	next_x--; break;
    1f0a:	08 94       	sec
    1f0c:	a1 08       	sbc	r10, r1
    1f0e:	b1 08       	sbc	r11, r1
    1f10:	f9 cf       	rjmp	.-14     	; 0x1f04 <move_snake+0x64>
		case EAST:	next_x++; break;
    1f12:	08 94       	sec
    1f14:	a1 1c       	adc	r10, r1
    1f16:	b1 1c       	adc	r11, r1
    1f18:	f5 cf       	rjmp	.-22     	; 0x1f04 <move_snake+0x64>
		case SOUTH: next_y--; break;
    1f1a:	08 94       	sec
    1f1c:	c1 08       	sbc	r12, r1
    1f1e:	d1 08       	sbc	r13, r1
    1f20:	f1 cf       	rjmp	.-30     	; 0x1f04 <move_snake+0x64>
		case UP:	next_z++; break;
    1f22:	08 94       	sec
    1f24:	81 1c       	adc	r8, r1
    1f26:	91 1c       	adc	r9, r1
    1f28:	ed cf       	rjmp	.-38     	; 0x1f04 <move_snake+0x64>
		case DOWN:	next_z--; break;
    1f2a:	08 94       	sec
    1f2c:	81 08       	sbc	r8, r1
    1f2e:	91 08       	sbc	r9, r1
    1f30:	e9 cf       	rjmp	.-46     	; 0x1f04 <move_snake+0x64>
		default:	break;
	}
	
	while (inrange(next_x,next_y,next_z)&&(i<SNAKE_SIZE)) // While working with the active part of the snake body
	{
		x=snake_x[i];
    1f32:	e0 91 29 03 	lds	r30, 0x0329
    1f36:	f0 91 2a 03 	lds	r31, 0x032A
    1f3a:	ec 0f       	add	r30, r28
    1f3c:	fd 1f       	adc	r31, r29
    1f3e:	00 81       	ld	r16, Z
		y=snake_y[i];
    1f40:	e0 91 27 03 	lds	r30, 0x0327
    1f44:	f0 91 28 03 	lds	r31, 0x0328
    1f48:	ec 0f       	add	r30, r28
    1f4a:	fd 1f       	adc	r31, r29
    1f4c:	10 81       	ld	r17, Z
		z=snake_z[i];
    1f4e:	e0 91 2d 03 	lds	r30, 0x032D
    1f52:	f0 91 2e 03 	lds	r31, 0x032E
    1f56:	ec 0f       	add	r30, r28
    1f58:	fd 1f       	adc	r31, r29
    1f5a:	f0 80       	ld	r15, Z
		if (inrange(x,y,z))
    1f5c:	80 2f       	mov	r24, r16
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	61 2f       	mov	r22, r17
    1f62:	70 e0       	ldi	r23, 0x00	; 0
    1f64:	4f 2d       	mov	r20, r15
    1f66:	50 e0       	ldi	r21, 0x00	; 0
    1f68:	0e 94 3c 01 	call	0x278	; 0x278 <inrange>
    1f6c:	88 23       	and	r24, r24
    1f6e:	a9 f0       	breq	.+42     	; 0x1f9a <move_snake+0xfa>
		{
			snake_x[i]=next_x;
    1f70:	e0 91 29 03 	lds	r30, 0x0329
    1f74:	f0 91 2a 03 	lds	r31, 0x032A
    1f78:	ec 0f       	add	r30, r28
    1f7a:	fd 1f       	adc	r31, r29
    1f7c:	a0 82       	st	Z, r10
			snake_y[i]=next_y;
    1f7e:	e0 91 27 03 	lds	r30, 0x0327
    1f82:	f0 91 28 03 	lds	r31, 0x0328
    1f86:	ec 0f       	add	r30, r28
    1f88:	fd 1f       	adc	r31, r29
    1f8a:	c0 82       	st	Z, r12
			snake_z[i]=next_z;
    1f8c:	e0 91 2d 03 	lds	r30, 0x032D
    1f90:	f0 91 2e 03 	lds	r31, 0x032E
    1f94:	ec 0f       	add	r30, r28
    1f96:	fd 1f       	adc	r31, r29
    1f98:	80 82       	st	Z, r8
		}
		next_x=x;
		next_y=y;
		next_z=z;
		i++;
    1f9a:	21 96       	adiw	r28, 0x01	; 1
		{
			snake_x[i]=next_x;
			snake_y[i]=next_y;
			snake_z[i]=next_z;
		}
		next_x=x;
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	a0 2e       	mov	r10, r16
    1fa0:	b8 2e       	mov	r11, r24
		next_y=y;
    1fa2:	c1 2e       	mov	r12, r17
    1fa4:	d8 2e       	mov	r13, r24
		next_z=z;
    1fa6:	8f 2c       	mov	r8, r15
    1fa8:	98 2e       	mov	r9, r24
		case UP:	next_z++; break;
		case DOWN:	next_z--; break;
		default:	break;
	}
	
	while (inrange(next_x,next_y,next_z)&&(i<SNAKE_SIZE)) // While working with the active part of the snake body
    1faa:	c5 01       	movw	r24, r10
    1fac:	b6 01       	movw	r22, r12
    1fae:	a4 01       	movw	r20, r8
    1fb0:	0e 94 3c 01 	call	0x278	; 0x278 <inrange>
    1fb4:	88 23       	and	r24, r24
    1fb6:	21 f0       	breq	.+8      	; 0x1fc0 <move_snake+0x120>
    1fb8:	c8 3c       	cpi	r28, 0xC8	; 200
    1fba:	d1 05       	cpc	r29, r1
    1fbc:	09 f0       	breq	.+2      	; 0x1fc0 <move_snake+0x120>
    1fbe:	b9 cf       	rjmp	.-142    	; 0x1f32 <move_snake+0x92>
		next_x=x;
		next_y=y;
		next_z=z;
		i++;
	}	
}
    1fc0:	df 91       	pop	r29
    1fc2:	cf 91       	pop	r28
    1fc4:	1f 91       	pop	r17
    1fc6:	0f 91       	pop	r16
    1fc8:	ff 90       	pop	r15
    1fca:	df 90       	pop	r13
    1fcc:	cf 90       	pop	r12
    1fce:	bf 90       	pop	r11
    1fd0:	af 90       	pop	r10
    1fd2:	9f 90       	pop	r9
    1fd4:	8f 90       	pop	r8
    1fd6:	08 95       	ret

00001fd8 <feed_snake>:

// Feeds the snake (increases length)
void feed_snake()
{
    1fd8:	0f 93       	push	r16
    1fda:	1f 93       	push	r17
    1fdc:	cf 93       	push	r28
    1fde:	df 93       	push	r29
	int i=0;
    1fe0:	c0 e0       	ldi	r28, 0x00	; 0
    1fe2:	d0 e0       	ldi	r29, 0x00	; 0
	while(inrange(snake_x[i],snake_y[i],snake_z[i]))
    1fe4:	01 c0       	rjmp	.+2      	; 0x1fe8 <feed_snake+0x10>
	{i++;}
    1fe6:	21 96       	adiw	r28, 0x01	; 1

// Feeds the snake (increases length)
void feed_snake()
{
	int i=0;
	while(inrange(snake_x[i],snake_y[i],snake_z[i]))
    1fe8:	e0 91 29 03 	lds	r30, 0x0329
    1fec:	f0 91 2a 03 	lds	r31, 0x032A
    1ff0:	ec 0f       	add	r30, r28
    1ff2:	fd 1f       	adc	r31, r29
    1ff4:	a0 91 27 03 	lds	r26, 0x0327
    1ff8:	b0 91 28 03 	lds	r27, 0x0328
    1ffc:	ac 0f       	add	r26, r28
    1ffe:	bd 1f       	adc	r27, r29
    2000:	6c 91       	ld	r22, X
    2002:	a0 91 2d 03 	lds	r26, 0x032D
    2006:	b0 91 2e 03 	lds	r27, 0x032E
    200a:	ac 0f       	add	r26, r28
    200c:	bd 1f       	adc	r27, r29
    200e:	4c 91       	ld	r20, X
    2010:	80 81       	ld	r24, Z
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	70 e0       	ldi	r23, 0x00	; 0
    2016:	50 e0       	ldi	r21, 0x00	; 0
    2018:	0e 94 3c 01 	call	0x278	; 0x278 <inrange>
    201c:	88 23       	and	r24, r24
    201e:	19 f7       	brne	.-58     	; 0x1fe6 <feed_snake+0xe>
	{i++;}
	snake_x[i]=snake_x[i-1];
    2020:	20 91 29 03 	lds	r18, 0x0329
    2024:	30 91 2a 03 	lds	r19, 0x032A
    2028:	ce 01       	movw	r24, r28
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	f9 01       	movw	r30, r18
    202e:	ec 0f       	add	r30, r28
    2030:	fd 1f       	adc	r31, r29
    2032:	28 0f       	add	r18, r24
    2034:	39 1f       	adc	r19, r25
    2036:	d9 01       	movw	r26, r18
    2038:	2c 91       	ld	r18, X
    203a:	20 83       	st	Z, r18
	snake_y[i]=snake_y[i-1];
    203c:	20 91 27 03 	lds	r18, 0x0327
    2040:	30 91 28 03 	lds	r19, 0x0328
    2044:	f9 01       	movw	r30, r18
    2046:	ec 0f       	add	r30, r28
    2048:	fd 1f       	adc	r31, r29
    204a:	28 0f       	add	r18, r24
    204c:	39 1f       	adc	r19, r25
    204e:	d9 01       	movw	r26, r18
    2050:	2c 91       	ld	r18, X
    2052:	20 83       	st	Z, r18
	snake_z[i]=snake_z[i-1];
    2054:	20 91 2d 03 	lds	r18, 0x032D
    2058:	30 91 2e 03 	lds	r19, 0x032E
    205c:	f9 01       	movw	r30, r18
    205e:	ec 0f       	add	r30, r28
    2060:	fd 1f       	adc	r31, r29
    2062:	82 0f       	add	r24, r18
    2064:	93 1f       	adc	r25, r19
    2066:	dc 01       	movw	r26, r24
    2068:	8c 91       	ld	r24, X
    206a:	80 83       	st	Z, r24
}
    206c:	df 91       	pop	r29
    206e:	cf 91       	pop	r28
    2070:	1f 91       	pop	r17
    2072:	0f 91       	pop	r16
    2074:	08 95       	ret

00002076 <draw_snake>:

// Draws the snake in the cube
void draw_snake()
{
    2076:	cf 93       	push	r28
    2078:	df 93       	push	r29
	int i=0;
    207a:	c0 e0       	ldi	r28, 0x00	; 0
    207c:	d0 e0       	ldi	r29, 0x00	; 0
    207e:	1e c0       	rjmp	.+60     	; 0x20bc <draw_snake+0x46>
	while ((i<SNAKE_SIZE)&&inrange(snake_x[i],snake_y[i],snake_z[i]))
	{
		set_voxel(snake_x[i],snake_y[i],snake_z[i]);
    2080:	e0 91 29 03 	lds	r30, 0x0329
    2084:	f0 91 2a 03 	lds	r31, 0x032A
    2088:	ec 0f       	add	r30, r28
    208a:	fd 1f       	adc	r31, r29
    208c:	a0 91 27 03 	lds	r26, 0x0327
    2090:	b0 91 28 03 	lds	r27, 0x0328
    2094:	ac 0f       	add	r26, r28
    2096:	bd 1f       	adc	r27, r29
    2098:	6c 91       	ld	r22, X
    209a:	a0 91 2d 03 	lds	r26, 0x032D
    209e:	b0 91 2e 03 	lds	r27, 0x032E
    20a2:	ac 0f       	add	r26, r28
    20a4:	bd 1f       	adc	r27, r29
    20a6:	4c 91       	ld	r20, X
    20a8:	80 81       	ld	r24, Z
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	70 e0       	ldi	r23, 0x00	; 0
    20ae:	50 e0       	ldi	r21, 0x00	; 0
    20b0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <set_voxel>
		i++;
    20b4:	21 96       	adiw	r28, 0x01	; 1

// Draws the snake in the cube
void draw_snake()
{
	int i=0;
	while ((i<SNAKE_SIZE)&&inrange(snake_x[i],snake_y[i],snake_z[i]))
    20b6:	c8 3c       	cpi	r28, 0xC8	; 200
    20b8:	d1 05       	cpc	r29, r1
    20ba:	e1 f0       	breq	.+56     	; 0x20f4 <draw_snake+0x7e>
    20bc:	e0 91 29 03 	lds	r30, 0x0329
    20c0:	f0 91 2a 03 	lds	r31, 0x032A
    20c4:	ec 0f       	add	r30, r28
    20c6:	fd 1f       	adc	r31, r29
    20c8:	a0 91 27 03 	lds	r26, 0x0327
    20cc:	b0 91 28 03 	lds	r27, 0x0328
    20d0:	ac 0f       	add	r26, r28
    20d2:	bd 1f       	adc	r27, r29
    20d4:	6c 91       	ld	r22, X
    20d6:	a0 91 2d 03 	lds	r26, 0x032D
    20da:	b0 91 2e 03 	lds	r27, 0x032E
    20de:	ac 0f       	add	r26, r28
    20e0:	bd 1f       	adc	r27, r29
    20e2:	4c 91       	ld	r20, X
    20e4:	80 81       	ld	r24, Z
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	70 e0       	ldi	r23, 0x00	; 0
    20ea:	50 e0       	ldi	r21, 0x00	; 0
    20ec:	0e 94 3c 01 	call	0x278	; 0x278 <inrange>
    20f0:	88 23       	and	r24, r24
    20f2:	31 f6       	brne	.-116    	; 0x2080 <draw_snake+0xa>
	{
		set_voxel(snake_x[i],snake_y[i],snake_z[i]);
		i++;
	}
}
    20f4:	df 91       	pop	r29
    20f6:	cf 91       	pop	r28
    20f8:	08 95       	ret

000020fa <snake_input>:

// Reads from the controller
// Char output N,W,E,S,U,D (North,West,East,South,Up,Down)
void snake_input()
{
	if      ((PIND==0xfb) && !(sdir==SOUTH))
    20fa:	89 b1       	in	r24, 0x09	; 9
    20fc:	8b 3f       	cpi	r24, 0xFB	; 251
    20fe:	41 f4       	brne	.+16     	; 0x2110 <__stack+0x11>
    2100:	80 91 26 03 	lds	r24, 0x0326
    2104:	83 35       	cpi	r24, 0x53	; 83
    2106:	21 f0       	breq	.+8      	; 0x2110 <__stack+0x11>
	{sinput = NORTH;} 
    2108:	8e e4       	ldi	r24, 0x4E	; 78
    210a:	80 93 21 03 	sts	0x0321, r24
    210e:	08 95       	ret
	else if ((PIND==0xf7) && !(sdir==NORTH))
    2110:	89 b1       	in	r24, 0x09	; 9
    2112:	87 3f       	cpi	r24, 0xF7	; 247
    2114:	41 f4       	brne	.+16     	; 0x2126 <__stack+0x27>
    2116:	80 91 26 03 	lds	r24, 0x0326
    211a:	8e 34       	cpi	r24, 0x4E	; 78
    211c:	21 f0       	breq	.+8      	; 0x2126 <__stack+0x27>
	{sinput = SOUTH;}
    211e:	83 e5       	ldi	r24, 0x53	; 83
    2120:	80 93 21 03 	sts	0x0321, r24
    2124:	08 95       	ret
	else if ((PIND==0xef) && !(sdir==WEST))
    2126:	89 b1       	in	r24, 0x09	; 9
    2128:	8f 3e       	cpi	r24, 0xEF	; 239
    212a:	41 f4       	brne	.+16     	; 0x213c <__stack+0x3d>
    212c:	80 91 26 03 	lds	r24, 0x0326
    2130:	87 35       	cpi	r24, 0x57	; 87
    2132:	21 f0       	breq	.+8      	; 0x213c <__stack+0x3d>
	{sinput = EAST;}
    2134:	85 e4       	ldi	r24, 0x45	; 69
    2136:	80 93 21 03 	sts	0x0321, r24
    213a:	08 95       	ret
	else if ((PIND==0xdf) && !(sdir==EAST))
    213c:	89 b1       	in	r24, 0x09	; 9
    213e:	8f 3d       	cpi	r24, 0xDF	; 223
    2140:	41 f4       	brne	.+16     	; 0x2152 <__stack+0x53>
    2142:	80 91 26 03 	lds	r24, 0x0326
    2146:	85 34       	cpi	r24, 0x45	; 69
    2148:	21 f0       	breq	.+8      	; 0x2152 <__stack+0x53>
	{sinput = WEST;}
    214a:	87 e5       	ldi	r24, 0x57	; 87
    214c:	80 93 21 03 	sts	0x0321, r24
    2150:	08 95       	ret
	else if ((PIND==0xbf) && !(sdir==DOWN))
    2152:	89 b1       	in	r24, 0x09	; 9
    2154:	8f 3b       	cpi	r24, 0xBF	; 191
    2156:	41 f4       	brne	.+16     	; 0x2168 <__stack+0x69>
    2158:	80 91 26 03 	lds	r24, 0x0326
    215c:	84 34       	cpi	r24, 0x44	; 68
    215e:	21 f0       	breq	.+8      	; 0x2168 <__stack+0x69>
	{sinput = UP;}
    2160:	85 e5       	ldi	r24, 0x55	; 85
    2162:	80 93 21 03 	sts	0x0321, r24
    2166:	08 95       	ret
	else if ((PIND==0x7f) && !(sdir==UP))
    2168:	89 b1       	in	r24, 0x09	; 9
    216a:	8f 37       	cpi	r24, 0x7F	; 127
    216c:	39 f4       	brne	.+14     	; 0x217c <__stack+0x7d>
    216e:	80 91 26 03 	lds	r24, 0x0326
    2172:	85 35       	cpi	r24, 0x55	; 85
    2174:	19 f0       	breq	.+6      	; 0x217c <__stack+0x7d>
	{sinput = DOWN;}		
    2176:	84 e4       	ldi	r24, 0x44	; 68
    2178:	80 93 21 03 	sts	0x0321, r24
    217c:	08 95       	ret

0000217e <snake_start_anim>:
}

// Startup animation for the snake game
void snake_start_anim()
{
	clear(); // Just in case
    217e:	0e 94 e6 03 	call	0x7cc	; 0x7cc <clear>
	effect_path_text(80,"SNAKE");
    2182:	80 e5       	ldi	r24, 0x50	; 80
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	60 e0       	ldi	r22, 0x00	; 0
    2188:	71 e0       	ldi	r23, 0x01	; 1
    218a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <effect_path_text>
	clear();
    218e:	0e 94 e6 03 	call	0x7cc	; 0x7cc <clear>
	effect_stringfly2("3D");
    2192:	86 e0       	ldi	r24, 0x06	; 6
    2194:	91 e0       	ldi	r25, 0x01	; 1
    2196:	0e 94 23 08 	call	0x1046	; 0x1046 <effect_stringfly2>
	clear();
    219a:	0e 94 e6 03 	call	0x7cc	; 0x7cc <clear>
}
    219e:	08 95       	ret

000021a0 <snake_game_over_anim>:

// Game over animation for the snake game
void snake_game_over_anim()
{
    21a0:	cf 93       	push	r28
    21a2:	df 93       	push	r29
	clear();
    21a4:	0e 94 e6 03 	call	0x7cc	; 0x7cc <clear>
    21a8:	ca e0       	ldi	r28, 0x0A	; 10
    21aa:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i=0;i<10;i++)
	{
		draw_snake();
    21ac:	0e 94 3b 10 	call	0x2076	; 0x2076 <draw_snake>
		delay_ms(100);
    21b0:	84 e6       	ldi	r24, 0x64	; 100
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	0e 94 0d 04 	call	0x81a	; 0x81a <delay_ms>
		clear();
    21b8:	0e 94 e6 03 	call	0x7cc	; 0x7cc <clear>
		delay_ms(100);
    21bc:	84 e6       	ldi	r24, 0x64	; 100
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	0e 94 0d 04 	call	0x81a	; 0x81a <delay_ms>
    21c4:	21 97       	sbiw	r28, 0x01	; 1

// Game over animation for the snake game
void snake_game_over_anim()
{
	clear();
	for (int i=0;i<10;i++)
    21c6:	91 f7       	brne	.-28     	; 0x21ac <snake_game_over_anim+0xc>
		draw_snake();
		delay_ms(100);
		clear();
		delay_ms(100);
	}
}
    21c8:	df 91       	pop	r29
    21ca:	cf 91       	pop	r28
    21cc:	08 95       	ret

000021ce <snake_notplayedanim>:

// Animation that runs when no one is playing
void snake_notplayedanim()
{
	while (nesControllerData == 0x00){
    21ce:	80 91 1f 03 	lds	r24, 0x031F
    21d2:	88 23       	and	r24, r24
    21d4:	51 f4       	brne	.+20     	; 0x21ea <snake_notplayedanim+0x1c>
		effect_rain(2,80);
    21d6:	82 e0       	ldi	r24, 0x02	; 2
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	60 e5       	ldi	r22, 0x50	; 80
    21dc:	70 e0       	ldi	r23, 0x00	; 0
    21de:	0e 94 af 06 	call	0xd5e	; 0xd5e <effect_rain>
}

// Animation that runs when no one is playing
void snake_notplayedanim()
{
	while (nesControllerData == 0x00){
    21e2:	80 91 1f 03 	lds	r24, 0x031F
    21e6:	88 23       	and	r24, r24
    21e8:	b1 f3       	breq	.-20     	; 0x21d6 <snake_notplayedanim+0x8>
		effect_rain(2,80);
	}
	snake_start_anim();
    21ea:	0e 94 bf 10 	call	0x217e	; 0x217e <snake_start_anim>
}
    21ee:	08 95       	ret

000021f0 <snake_print_score>:

// Prints the score
void snake_print_score(uint16_t score)
{
    21f0:	0f 93       	push	r16
    21f2:	1f 93       	push	r17
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	00 d0       	rcall	.+0      	; 0x21fa <snake_print_score+0xa>
    21fa:	00 d0       	rcall	.+0      	; 0x21fc <snake_print_score+0xc>
    21fc:	0f 92       	push	r0
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62
	char buf[5];
	itoa(score,buf,10);
    2202:	8e 01       	movw	r16, r28
    2204:	0f 5f       	subi	r16, 0xFF	; 255
    2206:	1f 4f       	sbci	r17, 0xFF	; 255
    2208:	b8 01       	movw	r22, r16
    220a:	4a e0       	ldi	r20, 0x0A	; 10
    220c:	50 e0       	ldi	r21, 0x00	; 0
    220e:	0e 94 a8 19 	call	0x3350	; 0x3350 <itoa>
	effect_stringfly2(buf);
    2212:	c8 01       	movw	r24, r16
    2214:	0e 94 23 08 	call	0x1046	; 0x1046 <effect_stringfly2>
}
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	0f 90       	pop	r0
    2220:	0f 90       	pop	r0
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	1f 91       	pop	r17
    2228:	0f 91       	pop	r16
    222a:	08 95       	ret

0000222c <snake_highscore>:

// Stores one high score in EEPROM (expand to larger list with nick input)
char snake_highscore(uint16_t score)
{
    222c:	cf 93       	push	r28
    222e:	df 93       	push	r29
    2230:	ec 01       	movw	r28, r24
	if (score>eeprom_read_word(&nonVolatileScore))
    2232:	87 ef       	ldi	r24, 0xF7	; 247
    2234:	91 e0       	ldi	r25, 0x01	; 1
    2236:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__eerd_word_usb1287>
    223a:	8c 17       	cp	r24, r28
    223c:	9d 07       	cpc	r25, r29
    223e:	68 f4       	brcc	.+26     	; 0x225a <snake_highscore+0x2e>
	{
		eeprom_write_word(&nonVolatileScore,score);
    2240:	87 ef       	ldi	r24, 0xF7	; 247
    2242:	91 e0       	ldi	r25, 0x01	; 1
    2244:	be 01       	movw	r22, r28
    2246:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__eewr_word_usb1287>
		effect_path_text(80,"NEW HIGHSCORE");
    224a:	80 e5       	ldi	r24, 0x50	; 80
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	69 e0       	ldi	r22, 0x09	; 9
    2250:	71 e0       	ldi	r23, 0x01	; 1
    2252:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <effect_path_text>
		return 1;
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	01 c0       	rjmp	.+2      	; 0x225c <snake_highscore+0x30>
	}
	else
	{
		return 0;
    225a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    225c:	df 91       	pop	r29
    225e:	cf 91       	pop	r28
    2260:	08 95       	ret

00002262 <snake_menu>:

void snake_menu(){
    2262:	0f 93       	push	r16
    2264:	1f 93       	push	r17
    2266:	cf 93       	push	r28
    2268:	df 93       	push	r29
	startPressed = 0x00;
    226a:	10 92 20 03 	sts	0x0320, r1
	effect_path_text(80, "MENU");
    226e:	80 e5       	ldi	r24, 0x50	; 80
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	67 e1       	ldi	r22, 0x17	; 23
    2274:	71 e0       	ldi	r23, 0x01	; 1
    2276:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <effect_path_text>
	while (!startPressed){
		if (nesControllerData == NES_A){
			effect_path_text(80,"HIGHSCORE");
    227a:	cc e1       	ldi	r28, 0x1C	; 28
    227c:	d1 e0       	ldi	r29, 0x01	; 1
			clear();
			snake_print_score(eeprom_read_word(&nonVolatileScore));
    227e:	07 ef       	ldi	r16, 0xF7	; 247
    2280:	11 e0       	ldi	r17, 0x01	; 1
}

void snake_menu(){
	startPressed = 0x00;
	effect_path_text(80, "MENU");
	while (!startPressed){
    2282:	0e c0       	rjmp	.+28     	; 0x22a0 <snake_menu+0x3e>
		if (nesControllerData == NES_A){
    2284:	81 30       	cpi	r24, 0x01	; 1
    2286:	f1 f7       	brne	.-4      	; 0x2284 <snake_menu+0x22>
			effect_path_text(80,"HIGHSCORE");
    2288:	80 e5       	ldi	r24, 0x50	; 80
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	be 01       	movw	r22, r28
    228e:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <effect_path_text>
			clear();
    2292:	0e 94 e6 03 	call	0x7cc	; 0x7cc <clear>
			snake_print_score(eeprom_read_word(&nonVolatileScore));
    2296:	c8 01       	movw	r24, r16
    2298:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__eerd_word_usb1287>
    229c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <snake_print_score>

void snake_menu(){
	startPressed = 0x00;
	effect_path_text(80, "MENU");
	while (!startPressed){
		if (nesControllerData == NES_A){
    22a0:	80 91 1f 03 	lds	r24, 0x031F
}

void snake_menu(){
	startPressed = 0x00;
	effect_path_text(80, "MENU");
	while (!startPressed){
    22a4:	90 91 20 03 	lds	r25, 0x0320
    22a8:	99 23       	and	r25, r25
    22aa:	61 f3       	breq	.-40     	; 0x2284 <snake_menu+0x22>
			effect_path_text(80,"HIGHSCORE");
			clear();
			snake_print_score(eeprom_read_word(&nonVolatileScore));
		}
	}
	startPressed = 0x00;
    22ac:	10 92 20 03 	sts	0x0320, r1
}
    22b0:	df 91       	pop	r29
    22b2:	cf 91       	pop	r28
    22b4:	1f 91       	pop	r17
    22b6:	0f 91       	pop	r16
    22b8:	08 95       	ret

000022ba <snake_pause>:

void snake_pause(){
    22ba:	cf 93       	push	r28
    22bc:	df 93       	push	r29
	selectPressed = 0x00;
    22be:	10 92 54 02 	sts	0x0254, r1
	while (!selectPressed){
		effect_path_text(80, "PAUSE");
    22c2:	c6 e2       	ldi	r28, 0x26	; 38
    22c4:	d1 e0       	ldi	r29, 0x01	; 1
    22c6:	80 e5       	ldi	r24, 0x50	; 80
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	be 01       	movw	r22, r28
    22cc:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <effect_path_text>
	startPressed = 0x00;
}

void snake_pause(){
	selectPressed = 0x00;
	while (!selectPressed){
    22d0:	80 91 54 02 	lds	r24, 0x0254
    22d4:	88 23       	and	r24, r24
    22d6:	b9 f3       	breq	.-18     	; 0x22c6 <snake_pause+0xc>
		effect_path_text(80, "PAUSE");
	}
	selectPressed = 0x00;
    22d8:	10 92 54 02 	sts	0x0254, r1
    22dc:	df 91       	pop	r29
    22de:	cf 91       	pop	r28
    22e0:	08 95       	ret

000022e2 <snake_game>:
uint16_t EEMEM nonVolatileScore = 0;

int notPlayed = 0;

void snake_game()
{
    22e2:	af 92       	push	r10
    22e4:	bf 92       	push	r11
    22e6:	cf 92       	push	r12
    22e8:	df 92       	push	r13
    22ea:	ef 92       	push	r14
    22ec:	ff 92       	push	r15
    22ee:	0f 93       	push	r16
    22f0:	1f 93       	push	r17
    22f2:	df 93       	push	r29
    22f4:	cf 93       	push	r28
    22f6:	cd b7       	in	r28, 0x3d	; 61
    22f8:	de b7       	in	r29, 0x3e	; 62
    22fa:	64 97       	sbiw	r28, 0x14	; 20
    22fc:	0f b6       	in	r0, 0x3f	; 63
    22fe:	f8 94       	cli
    2300:	de bf       	out	0x3e, r29	; 62
    2302:	0f be       	out	0x3f, r0	; 63
    2304:	cd bf       	out	0x3d, r28	; 61
	startPressed  = 0x00;
    2306:	10 92 20 03 	sts	0x0320, r1
	selectPressed = 0x00;
    230a:	10 92 54 02 	sts	0x0254, r1
	snake_x = (unsigned char*) calloc(SNAKE_SIZE,sizeof(unsigned char)); // snake body
    230e:	88 ec       	ldi	r24, 0xC8	; 200
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	61 e0       	ldi	r22, 0x01	; 1
    2314:	70 e0       	ldi	r23, 0x00	; 0
    2316:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <calloc>
    231a:	80 93 29 03 	sts	0x0329, r24
    231e:	90 93 2a 03 	sts	0x032A, r25
	snake_y = (unsigned char*) calloc(SNAKE_SIZE,sizeof(unsigned char));
    2322:	88 ec       	ldi	r24, 0xC8	; 200
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	61 e0       	ldi	r22, 0x01	; 1
    2328:	70 e0       	ldi	r23, 0x00	; 0
    232a:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <calloc>
    232e:	80 93 27 03 	sts	0x0327, r24
    2332:	90 93 28 03 	sts	0x0328, r25
	snake_z = (unsigned char*) calloc(SNAKE_SIZE,sizeof(unsigned char));
    2336:	88 ec       	ldi	r24, 0xC8	; 200
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	61 e0       	ldi	r22, 0x01	; 1
    233c:	70 e0       	ldi	r23, 0x00	; 0
    233e:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <calloc>
    2342:	80 93 2d 03 	sts	0x032D, r24
    2346:	90 93 2e 03 	sts	0x032E, r25
	
	char lost = 0;
	const int speedl[10]={500,450,400,350,300,250,200,180,160,150};
    234a:	de 01       	movw	r26, r28
    234c:	11 96       	adiw	r26, 0x01	; 1
    234e:	ec e2       	ldi	r30, 0x2C	; 44
    2350:	f1 e0       	ldi	r31, 0x01	; 1
    2352:	84 e1       	ldi	r24, 0x14	; 20
    2354:	01 90       	ld	r0, Z+
    2356:	0d 92       	st	X+, r0
    2358:	81 50       	subi	r24, 0x01	; 1
    235a:	e1 f7       	brne	.-8      	; 0x2354 <snake_game+0x72>
	int	n=0;
	uint16_t score = 0;
	sdir = EAST;
    235c:	85 e4       	ldi	r24, 0x45	; 69
    235e:	80 93 26 03 	sts	0x0326, r24
	initialize_snake();
    2362:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <initialize_snake>
	place_food();
    2366:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <place_food>
	draw_snake();
    236a:	0e 94 3b 10 	call	0x2076	; 0x2076 <draw_snake>
	snake_z = (unsigned char*) calloc(SNAKE_SIZE,sizeof(unsigned char));
	
	char lost = 0;
	const int speedl[10]={500,450,400,350,300,250,200,180,160,150};
	int	n=0;
	uint16_t score = 0;
    236e:	00 e0       	ldi	r16, 0x00	; 0
    2370:	10 e0       	ldi	r17, 0x00	; 0
	snake_y = (unsigned char*) calloc(SNAKE_SIZE,sizeof(unsigned char));
	snake_z = (unsigned char*) calloc(SNAKE_SIZE,sizeof(unsigned char));
	
	char lost = 0;
	const int speedl[10]={500,450,400,350,300,250,200,180,160,150};
	int	n=0;
    2372:	ee 24       	eor	r14, r14
    2374:	ff 24       	eor	r15, r15
		if (valid_move()){
			if (isfood()){
				feed_snake();
				place_food();
				score++;
				if (!(score%10)&&(score>0)&&n<9){ // increase speed every 10th food
    2376:	0f 2e       	mov	r0, r31
    2378:	fa e0       	ldi	r31, 0x0A	; 10
    237a:	af 2e       	mov	r10, r31
    237c:	bb 24       	eor	r11, r11
    237e:	f0 2d       	mov	r31, r0
			}
			move_snake();
			clear();
			draw_snake();
			draw_food();
			delay_ms(speedl[n]);
    2380:	6e 01       	movw	r12, r28
    2382:	08 94       	sec
    2384:	c1 1c       	adc	r12, r1
    2386:	d1 1c       	adc	r13, r1
	sdir = EAST;
	initialize_snake();
	place_food();
	draw_snake();
	while (lost==0){
		sdir=sinput;
    2388:	80 91 21 03 	lds	r24, 0x0321
    238c:	80 93 26 03 	sts	0x0326, r24
		if (valid_move()){
    2390:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <valid_move>
    2394:	88 23       	and	r24, r24
    2396:	09 f4       	brne	.+2      	; 0x239a <snake_game+0xb8>
    2398:	42 c0       	rjmp	.+132    	; 0x241e <snake_game+0x13c>
			if (isfood()){
    239a:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <isfood>
    239e:	88 23       	and	r24, r24
    23a0:	b1 f0       	breq	.+44     	; 0x23ce <snake_game+0xec>
				feed_snake();
    23a2:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <feed_snake>
				place_food();
    23a6:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <place_food>
				score++;
    23aa:	0f 5f       	subi	r16, 0xFF	; 255
    23ac:	1f 4f       	sbci	r17, 0xFF	; 255
				if (!(score%10)&&(score>0)&&n<9){ // increase speed every 10th food
    23ae:	c8 01       	movw	r24, r16
    23b0:	b5 01       	movw	r22, r10
    23b2:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__udivmodhi4>
    23b6:	00 97       	sbiw	r24, 0x00	; 0
    23b8:	51 f4       	brne	.+20     	; 0x23ce <snake_game+0xec>
    23ba:	01 15       	cp	r16, r1
    23bc:	11 05       	cpc	r17, r1
    23be:	39 f0       	breq	.+14     	; 0x23ce <snake_game+0xec>
    23c0:	89 e0       	ldi	r24, 0x09	; 9
    23c2:	e8 16       	cp	r14, r24
    23c4:	f1 04       	cpc	r15, r1
    23c6:	1c f4       	brge	.+6      	; 0x23ce <snake_game+0xec>
				n++;
    23c8:	08 94       	sec
    23ca:	e1 1c       	adc	r14, r1
    23cc:	f1 1c       	adc	r15, r1
				}
			}
			move_snake();
    23ce:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <move_snake>
			clear();
    23d2:	0e 94 e6 03 	call	0x7cc	; 0x7cc <clear>
			draw_snake();
    23d6:	0e 94 3b 10 	call	0x2076	; 0x2076 <draw_snake>
			draw_food();
    23da:	0e 94 55 0e 	call	0x1caa	; 0x1caa <draw_food>
			delay_ms(speedl[n]);
    23de:	f7 01       	movw	r30, r14
    23e0:	ee 0f       	add	r30, r30
    23e2:	ff 1f       	adc	r31, r31
    23e4:	ec 0d       	add	r30, r12
    23e6:	fd 1d       	adc	r31, r13
    23e8:	80 81       	ld	r24, Z
    23ea:	91 81       	ldd	r25, Z+1	; 0x01
    23ec:	0e 94 0d 04 	call	0x81a	; 0x81a <delay_ms>
			if (selectPressed){
    23f0:	80 91 54 02 	lds	r24, 0x0254
    23f4:	88 23       	and	r24, r24
    23f6:	39 f0       	breq	.+14     	; 0x2406 <snake_game+0x124>
				snake_pause();
    23f8:	0e 94 5d 11 	call	0x22ba	; 0x22ba <snake_pause>
				selectPressed = 0x00;
    23fc:	10 92 54 02 	sts	0x0254, r1
				startPressed  = 0x00;
    2400:	10 92 20 03 	sts	0x0320, r1
    2404:	c1 cf       	rjmp	.-126    	; 0x2388 <snake_game+0xa6>
			}
			if (startPressed){
    2406:	80 91 20 03 	lds	r24, 0x0320
    240a:	88 23       	and	r24, r24
    240c:	09 f4       	brne	.+2      	; 0x2410 <snake_game+0x12e>
    240e:	bc cf       	rjmp	.-136    	; 0x2388 <snake_game+0xa6>
				snake_menu();
    2410:	0e 94 31 11 	call	0x2262	; 0x2262 <snake_menu>
				selectPressed = 0x00;
    2414:	10 92 54 02 	sts	0x0254, r1
				startPressed  = 0x00;
    2418:	10 92 20 03 	sts	0x0320, r1
    241c:	b5 cf       	rjmp	.-150    	; 0x2388 <snake_game+0xa6>
			}
		}
		else
		{lost=1;}
	}
	snake_game_over_anim();
    241e:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <snake_game_over_anim>
	snake_print_score(score);
    2422:	c8 01       	movw	r24, r16
    2424:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <snake_print_score>
	snake_highscore(score);
    2428:	c8 01       	movw	r24, r16
    242a:	0e 94 16 11 	call	0x222c	; 0x222c <snake_highscore>
	
	if (score==0)
    242e:	01 15       	cp	r16, r1
    2430:	11 05       	cpc	r17, r1
    2432:	69 f4       	brne	.+26     	; 0x244e <snake_game+0x16c>
	{notPlayed++;}
    2434:	80 91 52 02 	lds	r24, 0x0252
    2438:	90 91 53 02 	lds	r25, 0x0253
    243c:	01 96       	adiw	r24, 0x01	; 1
    243e:	90 93 53 02 	sts	0x0253, r25
    2442:	80 93 52 02 	sts	0x0252, r24
	else
	{notPlayed=0;}
	if (notPlayed>2)
    2446:	83 30       	cpi	r24, 0x03	; 3
    2448:	91 05       	cpc	r25, r1
    244a:	34 f4       	brge	.+12     	; 0x2458 <snake_game+0x176>
    244c:	07 c0       	rjmp	.+14     	; 0x245c <snake_game+0x17a>
	snake_highscore(score);
	
	if (score==0)
	{notPlayed++;}
	else
	{notPlayed=0;}
    244e:	10 92 53 02 	sts	0x0253, r1
    2452:	10 92 52 02 	sts	0x0252, r1
    2456:	02 c0       	rjmp	.+4      	; 0x245c <snake_game+0x17a>
	if (notPlayed>2)
	{snake_notplayedanim();}
    2458:	0e 94 e7 10 	call	0x21ce	; 0x21ce <snake_notplayedanim>
		
	free(snake_x);
    245c:	80 91 29 03 	lds	r24, 0x0329
    2460:	90 91 2a 03 	lds	r25, 0x032A
    2464:	0e 94 aa 18 	call	0x3154	; 0x3154 <free>
	free(snake_y);
    2468:	80 91 27 03 	lds	r24, 0x0327
    246c:	90 91 28 03 	lds	r25, 0x0328
    2470:	0e 94 aa 18 	call	0x3154	; 0x3154 <free>
	free(snake_z);
    2474:	80 91 2d 03 	lds	r24, 0x032D
    2478:	90 91 2e 03 	lds	r25, 0x032E
    247c:	0e 94 aa 18 	call	0x3154	; 0x3154 <free>
}
    2480:	64 96       	adiw	r28, 0x14	; 20
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	f8 94       	cli
    2486:	de bf       	out	0x3e, r29	; 62
    2488:	0f be       	out	0x3f, r0	; 63
    248a:	cd bf       	out	0x3d, r28	; 61
    248c:	cf 91       	pop	r28
    248e:	df 91       	pop	r29
    2490:	1f 91       	pop	r17
    2492:	0f 91       	pop	r16
    2494:	ff 90       	pop	r15
    2496:	ef 90       	pop	r14
    2498:	df 90       	pop	r13
    249a:	cf 90       	pop	r12
    249c:	bf 90       	pop	r11
    249e:	af 90       	pop	r10
    24a0:	08 95       	ret

000024a2 <usb_buffer_get>:
#include "usb.h"

void usb_buffer_get(){	
	int temp;
	int z = 0;
	int y = 0;
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	90 e0       	ldi	r25, 0x00	; 0

#include "usb.h"

void usb_buffer_get(){	
	int temp;
	int z = 0;
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
	int y = 0;
	
	while (1){
		// Wait until a byte has been received
		while ( !(UCSR1A & (1<<RXC1)) );
    24aa:	e8 ec       	ldi	r30, 0xC8	; 200
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
		// Load the first received byte from USB into a buffer.
		temp = UDR1;
    24ae:	ae ec       	ldi	r26, 0xCE	; 206
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
			z++;
			y=0;
		}
		if (z == CUBE_SIZE){
			z=0;
			UDR1 = 42; // Indicate that the cube expects line n.0 (z=0, y=0)
    24b2:	7a e2       	ldi	r23, 0x2A	; 42
		if (y == CUBE_SIZE){
			z++;
			y=0;
		}
		if (z == CUBE_SIZE){
			z=0;
    24b4:	40 e0       	ldi	r20, 0x00	; 0
    24b6:	50 e0       	ldi	r21, 0x00	; 0
	int z = 0;
	int y = 0;
	
	while (1){
		// Wait until a byte has been received
		while ( !(UCSR1A & (1<<RXC1)) );
    24b8:	60 81       	ld	r22, Z
    24ba:	66 23       	and	r22, r22
    24bc:	ec f7       	brge	.-6      	; 0x24b8 <usb_buffer_get+0x16>
		// Load the first received byte from USB into a buffer.
		temp = UDR1;
    24be:	6c 91       	ld	r22, X
		// Wait until the second byte has been received
		while ( !(UCSR1A & (1<<RXC1)) );
    24c0:	60 81       	ld	r22, Z
    24c2:	66 23       	and	r22, r22
    24c4:	ec f7       	brge	.-6      	; 0x24c0 <usb_buffer_get+0x1e>
		// Load the second byte into the buffer
		temp |= (UDR1 << 8);
    24c6:	6c 91       	ld	r22, X
		
		//cube[z][y] = temp;
		y++;
    24c8:	01 96       	adiw	r24, 0x01	; 1
		if (y == CUBE_SIZE){
    24ca:	8a 30       	cpi	r24, 0x0A	; 10
    24cc:	91 05       	cpc	r25, r1
    24ce:	19 f4       	brne	.+6      	; 0x24d6 <usb_buffer_get+0x34>
			z++;
    24d0:	2f 5f       	subi	r18, 0xFF	; 255
    24d2:	3f 4f       	sbci	r19, 0xFF	; 255
			y=0;
    24d4:	ca 01       	movw	r24, r20
		}
		if (z == CUBE_SIZE){
    24d6:	2a 30       	cpi	r18, 0x0A	; 10
    24d8:	31 05       	cpc	r19, r1
    24da:	71 f7       	brne	.-36     	; 0x24b8 <usb_buffer_get+0x16>
			z=0;
			UDR1 = 42; // Indicate that the cube expects line n.0 (z=0, y=0)
    24dc:	7c 93       	st	X, r23
		if (y == CUBE_SIZE){
			z++;
			y=0;
		}
		if (z == CUBE_SIZE){
			z=0;
    24de:	9a 01       	movw	r18, r20
    24e0:	eb cf       	rjmp	.-42     	; 0x24b8 <usb_buffer_get+0x16>

000024e2 <_fpadd_parts>:
    24e2:	a0 e0       	ldi	r26, 0x00	; 0
    24e4:	b0 e0       	ldi	r27, 0x00	; 0
    24e6:	e7 e7       	ldi	r30, 0x77	; 119
    24e8:	f2 e1       	ldi	r31, 0x12	; 18
    24ea:	0c 94 b8 17 	jmp	0x2f70	; 0x2f70 <__prologue_saves__+0x8>
    24ee:	fc 01       	movw	r30, r24
    24f0:	ea 01       	movw	r28, r20
    24f2:	80 81       	ld	r24, Z
    24f4:	82 30       	cpi	r24, 0x02	; 2
    24f6:	08 f4       	brcc	.+2      	; 0x24fa <_fpadd_parts+0x18>
    24f8:	38 c1       	rjmp	.+624    	; 0x276a <_fpadd_parts+0x288>
    24fa:	db 01       	movw	r26, r22
    24fc:	9c 91       	ld	r25, X
    24fe:	92 30       	cpi	r25, 0x02	; 2
    2500:	08 f4       	brcc	.+2      	; 0x2504 <_fpadd_parts+0x22>
    2502:	30 c1       	rjmp	.+608    	; 0x2764 <_fpadd_parts+0x282>
    2504:	84 30       	cpi	r24, 0x04	; 4
    2506:	59 f4       	brne	.+22     	; 0x251e <_fpadd_parts+0x3c>
    2508:	94 30       	cpi	r25, 0x04	; 4
    250a:	09 f0       	breq	.+2      	; 0x250e <_fpadd_parts+0x2c>
    250c:	2e c1       	rjmp	.+604    	; 0x276a <_fpadd_parts+0x288>
    250e:	91 81       	ldd	r25, Z+1	; 0x01
    2510:	11 96       	adiw	r26, 0x01	; 1
    2512:	8c 91       	ld	r24, X
    2514:	11 97       	sbiw	r26, 0x01	; 1
    2516:	98 17       	cp	r25, r24
    2518:	09 f0       	breq	.+2      	; 0x251c <_fpadd_parts+0x3a>
    251a:	21 c1       	rjmp	.+578    	; 0x275e <_fpadd_parts+0x27c>
    251c:	26 c1       	rjmp	.+588    	; 0x276a <_fpadd_parts+0x288>
    251e:	94 30       	cpi	r25, 0x04	; 4
    2520:	09 f4       	brne	.+2      	; 0x2524 <_fpadd_parts+0x42>
    2522:	20 c1       	rjmp	.+576    	; 0x2764 <_fpadd_parts+0x282>
    2524:	92 30       	cpi	r25, 0x02	; 2
    2526:	b1 f4       	brne	.+44     	; 0x2554 <_fpadd_parts+0x72>
    2528:	82 30       	cpi	r24, 0x02	; 2
    252a:	09 f0       	breq	.+2      	; 0x252e <_fpadd_parts+0x4c>
    252c:	1e c1       	rjmp	.+572    	; 0x276a <_fpadd_parts+0x288>
    252e:	ca 01       	movw	r24, r20
    2530:	af 01       	movw	r20, r30
    2532:	28 e0       	ldi	r18, 0x08	; 8
    2534:	da 01       	movw	r26, r20
    2536:	0d 90       	ld	r0, X+
    2538:	ad 01       	movw	r20, r26
    253a:	dc 01       	movw	r26, r24
    253c:	0d 92       	st	X+, r0
    253e:	cd 01       	movw	r24, r26
    2540:	21 50       	subi	r18, 0x01	; 1
    2542:	c1 f7       	brne	.-16     	; 0x2534 <_fpadd_parts+0x52>
    2544:	db 01       	movw	r26, r22
    2546:	11 96       	adiw	r26, 0x01	; 1
    2548:	8c 91       	ld	r24, X
    254a:	11 97       	sbiw	r26, 0x01	; 1
    254c:	91 81       	ldd	r25, Z+1	; 0x01
    254e:	89 23       	and	r24, r25
    2550:	89 83       	std	Y+1, r24	; 0x01
    2552:	0a c1       	rjmp	.+532    	; 0x2768 <_fpadd_parts+0x286>
    2554:	82 30       	cpi	r24, 0x02	; 2
    2556:	09 f4       	brne	.+2      	; 0x255a <_fpadd_parts+0x78>
    2558:	05 c1       	rjmp	.+522    	; 0x2764 <_fpadd_parts+0x282>
    255a:	c2 80       	ldd	r12, Z+2	; 0x02
    255c:	d3 80       	ldd	r13, Z+3	; 0x03
    255e:	db 01       	movw	r26, r22
    2560:	12 96       	adiw	r26, 0x02	; 2
    2562:	6d 90       	ld	r6, X+
    2564:	7c 90       	ld	r7, X
    2566:	13 97       	sbiw	r26, 0x03	; 3
    2568:	24 81       	ldd	r18, Z+4	; 0x04
    256a:	35 81       	ldd	r19, Z+5	; 0x05
    256c:	46 81       	ldd	r20, Z+6	; 0x06
    256e:	57 81       	ldd	r21, Z+7	; 0x07
    2570:	14 96       	adiw	r26, 0x04	; 4
    2572:	ed 90       	ld	r14, X+
    2574:	fd 90       	ld	r15, X+
    2576:	0d 91       	ld	r16, X+
    2578:	1c 91       	ld	r17, X
    257a:	17 97       	sbiw	r26, 0x07	; 7
    257c:	c6 01       	movw	r24, r12
    257e:	86 19       	sub	r24, r6
    2580:	97 09       	sbc	r25, r7
    2582:	5c 01       	movw	r10, r24
    2584:	97 ff       	sbrs	r25, 7
    2586:	04 c0       	rjmp	.+8      	; 0x2590 <_fpadd_parts+0xae>
    2588:	aa 24       	eor	r10, r10
    258a:	bb 24       	eor	r11, r11
    258c:	a8 1a       	sub	r10, r24
    258e:	b9 0a       	sbc	r11, r25
    2590:	b0 e2       	ldi	r27, 0x20	; 32
    2592:	ab 16       	cp	r10, r27
    2594:	b1 04       	cpc	r11, r1
    2596:	0c f0       	brlt	.+2      	; 0x259a <_fpadd_parts+0xb8>
    2598:	61 c0       	rjmp	.+194    	; 0x265c <_fpadd_parts+0x17a>
    259a:	18 16       	cp	r1, r24
    259c:	19 06       	cpc	r1, r25
    259e:	6c f5       	brge	.+90     	; 0x25fa <_fpadd_parts+0x118>
    25a0:	37 01       	movw	r6, r14
    25a2:	48 01       	movw	r8, r16
    25a4:	0a 2c       	mov	r0, r10
    25a6:	04 c0       	rjmp	.+8      	; 0x25b0 <_fpadd_parts+0xce>
    25a8:	96 94       	lsr	r9
    25aa:	87 94       	ror	r8
    25ac:	77 94       	ror	r7
    25ae:	67 94       	ror	r6
    25b0:	0a 94       	dec	r0
    25b2:	d2 f7       	brpl	.-12     	; 0x25a8 <_fpadd_parts+0xc6>
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	a0 e0       	ldi	r26, 0x00	; 0
    25ba:	b0 e0       	ldi	r27, 0x00	; 0
    25bc:	0a 2c       	mov	r0, r10
    25be:	04 c0       	rjmp	.+8      	; 0x25c8 <_fpadd_parts+0xe6>
    25c0:	88 0f       	add	r24, r24
    25c2:	99 1f       	adc	r25, r25
    25c4:	aa 1f       	adc	r26, r26
    25c6:	bb 1f       	adc	r27, r27
    25c8:	0a 94       	dec	r0
    25ca:	d2 f7       	brpl	.-12     	; 0x25c0 <_fpadd_parts+0xde>
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	a1 09       	sbc	r26, r1
    25d0:	b1 09       	sbc	r27, r1
    25d2:	8e 21       	and	r24, r14
    25d4:	9f 21       	and	r25, r15
    25d6:	a0 23       	and	r26, r16
    25d8:	b1 23       	and	r27, r17
    25da:	ee 24       	eor	r14, r14
    25dc:	ff 24       	eor	r15, r15
    25de:	87 01       	movw	r16, r14
    25e0:	e3 94       	inc	r14
    25e2:	00 97       	sbiw	r24, 0x00	; 0
    25e4:	a1 05       	cpc	r26, r1
    25e6:	b1 05       	cpc	r27, r1
    25e8:	19 f4       	brne	.+6      	; 0x25f0 <_fpadd_parts+0x10e>
    25ea:	ee 24       	eor	r14, r14
    25ec:	ff 24       	eor	r15, r15
    25ee:	87 01       	movw	r16, r14
    25f0:	e6 28       	or	r14, r6
    25f2:	f7 28       	or	r15, r7
    25f4:	08 29       	or	r16, r8
    25f6:	19 29       	or	r17, r9
    25f8:	3c c0       	rjmp	.+120    	; 0x2672 <_fpadd_parts+0x190>
    25fa:	00 97       	sbiw	r24, 0x00	; 0
    25fc:	d1 f1       	breq	.+116    	; 0x2672 <_fpadd_parts+0x190>
    25fe:	ca 0c       	add	r12, r10
    2600:	db 1c       	adc	r13, r11
    2602:	39 01       	movw	r6, r18
    2604:	4a 01       	movw	r8, r20
    2606:	0a 2c       	mov	r0, r10
    2608:	04 c0       	rjmp	.+8      	; 0x2612 <_fpadd_parts+0x130>
    260a:	96 94       	lsr	r9
    260c:	87 94       	ror	r8
    260e:	77 94       	ror	r7
    2610:	67 94       	ror	r6
    2612:	0a 94       	dec	r0
    2614:	d2 f7       	brpl	.-12     	; 0x260a <_fpadd_parts+0x128>
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	a0 e0       	ldi	r26, 0x00	; 0
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	0a 2c       	mov	r0, r10
    2620:	04 c0       	rjmp	.+8      	; 0x262a <_fpadd_parts+0x148>
    2622:	88 0f       	add	r24, r24
    2624:	99 1f       	adc	r25, r25
    2626:	aa 1f       	adc	r26, r26
    2628:	bb 1f       	adc	r27, r27
    262a:	0a 94       	dec	r0
    262c:	d2 f7       	brpl	.-12     	; 0x2622 <_fpadd_parts+0x140>
    262e:	01 97       	sbiw	r24, 0x01	; 1
    2630:	a1 09       	sbc	r26, r1
    2632:	b1 09       	sbc	r27, r1
    2634:	82 23       	and	r24, r18
    2636:	93 23       	and	r25, r19
    2638:	a4 23       	and	r26, r20
    263a:	b5 23       	and	r27, r21
    263c:	21 e0       	ldi	r18, 0x01	; 1
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	40 e0       	ldi	r20, 0x00	; 0
    2642:	50 e0       	ldi	r21, 0x00	; 0
    2644:	00 97       	sbiw	r24, 0x00	; 0
    2646:	a1 05       	cpc	r26, r1
    2648:	b1 05       	cpc	r27, r1
    264a:	19 f4       	brne	.+6      	; 0x2652 <_fpadd_parts+0x170>
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	a9 01       	movw	r20, r18
    2652:	26 29       	or	r18, r6
    2654:	37 29       	or	r19, r7
    2656:	48 29       	or	r20, r8
    2658:	59 29       	or	r21, r9
    265a:	0b c0       	rjmp	.+22     	; 0x2672 <_fpadd_parts+0x190>
    265c:	6c 14       	cp	r6, r12
    265e:	7d 04       	cpc	r7, r13
    2660:	24 f4       	brge	.+8      	; 0x266a <_fpadd_parts+0x188>
    2662:	ee 24       	eor	r14, r14
    2664:	ff 24       	eor	r15, r15
    2666:	87 01       	movw	r16, r14
    2668:	04 c0       	rjmp	.+8      	; 0x2672 <_fpadd_parts+0x190>
    266a:	63 01       	movw	r12, r6
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	a9 01       	movw	r20, r18
    2672:	81 81       	ldd	r24, Z+1	; 0x01
    2674:	fb 01       	movw	r30, r22
    2676:	91 81       	ldd	r25, Z+1	; 0x01
    2678:	89 17       	cp	r24, r25
    267a:	09 f4       	brne	.+2      	; 0x267e <_fpadd_parts+0x19c>
    267c:	45 c0       	rjmp	.+138    	; 0x2708 <_fpadd_parts+0x226>
    267e:	88 23       	and	r24, r24
    2680:	49 f0       	breq	.+18     	; 0x2694 <_fpadd_parts+0x1b2>
    2682:	d8 01       	movw	r26, r16
    2684:	c7 01       	movw	r24, r14
    2686:	82 1b       	sub	r24, r18
    2688:	93 0b       	sbc	r25, r19
    268a:	a4 0b       	sbc	r26, r20
    268c:	b5 0b       	sbc	r27, r21
    268e:	9c 01       	movw	r18, r24
    2690:	ad 01       	movw	r20, r26
    2692:	04 c0       	rjmp	.+8      	; 0x269c <_fpadd_parts+0x1ba>
    2694:	2e 19       	sub	r18, r14
    2696:	3f 09       	sbc	r19, r15
    2698:	40 0b       	sbc	r20, r16
    269a:	51 0b       	sbc	r21, r17
    269c:	57 fd       	sbrc	r21, 7
    269e:	04 c0       	rjmp	.+8      	; 0x26a8 <_fpadd_parts+0x1c6>
    26a0:	19 82       	std	Y+1, r1	; 0x01
    26a2:	db 82       	std	Y+3, r13	; 0x03
    26a4:	ca 82       	std	Y+2, r12	; 0x02
    26a6:	0b c0       	rjmp	.+22     	; 0x26be <_fpadd_parts+0x1dc>
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	89 83       	std	Y+1, r24	; 0x01
    26ac:	db 82       	std	Y+3, r13	; 0x03
    26ae:	ca 82       	std	Y+2, r12	; 0x02
    26b0:	50 95       	com	r21
    26b2:	40 95       	com	r20
    26b4:	30 95       	com	r19
    26b6:	21 95       	neg	r18
    26b8:	3f 4f       	sbci	r19, 0xFF	; 255
    26ba:	4f 4f       	sbci	r20, 0xFF	; 255
    26bc:	5f 4f       	sbci	r21, 0xFF	; 255
    26be:	2c 83       	std	Y+4, r18	; 0x04
    26c0:	3d 83       	std	Y+5, r19	; 0x05
    26c2:	4e 83       	std	Y+6, r20	; 0x06
    26c4:	5f 83       	std	Y+7, r21	; 0x07
    26c6:	0d c0       	rjmp	.+26     	; 0x26e2 <_fpadd_parts+0x200>
    26c8:	88 0f       	add	r24, r24
    26ca:	99 1f       	adc	r25, r25
    26cc:	aa 1f       	adc	r26, r26
    26ce:	bb 1f       	adc	r27, r27
    26d0:	8c 83       	std	Y+4, r24	; 0x04
    26d2:	9d 83       	std	Y+5, r25	; 0x05
    26d4:	ae 83       	std	Y+6, r26	; 0x06
    26d6:	bf 83       	std	Y+7, r27	; 0x07
    26d8:	8a 81       	ldd	r24, Y+2	; 0x02
    26da:	9b 81       	ldd	r25, Y+3	; 0x03
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	9b 83       	std	Y+3, r25	; 0x03
    26e0:	8a 83       	std	Y+2, r24	; 0x02
    26e2:	8c 81       	ldd	r24, Y+4	; 0x04
    26e4:	9d 81       	ldd	r25, Y+5	; 0x05
    26e6:	ae 81       	ldd	r26, Y+6	; 0x06
    26e8:	bf 81       	ldd	r27, Y+7	; 0x07
    26ea:	9c 01       	movw	r18, r24
    26ec:	ad 01       	movw	r20, r26
    26ee:	21 50       	subi	r18, 0x01	; 1
    26f0:	30 40       	sbci	r19, 0x00	; 0
    26f2:	40 40       	sbci	r20, 0x00	; 0
    26f4:	50 40       	sbci	r21, 0x00	; 0
    26f6:	2f 3f       	cpi	r18, 0xFF	; 255
    26f8:	ef ef       	ldi	r30, 0xFF	; 255
    26fa:	3e 07       	cpc	r19, r30
    26fc:	ef ef       	ldi	r30, 0xFF	; 255
    26fe:	4e 07       	cpc	r20, r30
    2700:	ef e3       	ldi	r30, 0x3F	; 63
    2702:	5e 07       	cpc	r21, r30
    2704:	08 f3       	brcs	.-62     	; 0x26c8 <_fpadd_parts+0x1e6>
    2706:	0b c0       	rjmp	.+22     	; 0x271e <_fpadd_parts+0x23c>
    2708:	89 83       	std	Y+1, r24	; 0x01
    270a:	db 82       	std	Y+3, r13	; 0x03
    270c:	ca 82       	std	Y+2, r12	; 0x02
    270e:	2e 0d       	add	r18, r14
    2710:	3f 1d       	adc	r19, r15
    2712:	40 1f       	adc	r20, r16
    2714:	51 1f       	adc	r21, r17
    2716:	2c 83       	std	Y+4, r18	; 0x04
    2718:	3d 83       	std	Y+5, r19	; 0x05
    271a:	4e 83       	std	Y+6, r20	; 0x06
    271c:	5f 83       	std	Y+7, r21	; 0x07
    271e:	83 e0       	ldi	r24, 0x03	; 3
    2720:	88 83       	st	Y, r24
    2722:	2c 81       	ldd	r18, Y+4	; 0x04
    2724:	3d 81       	ldd	r19, Y+5	; 0x05
    2726:	4e 81       	ldd	r20, Y+6	; 0x06
    2728:	5f 81       	ldd	r21, Y+7	; 0x07
    272a:	57 ff       	sbrs	r21, 7
    272c:	1d c0       	rjmp	.+58     	; 0x2768 <_fpadd_parts+0x286>
    272e:	da 01       	movw	r26, r20
    2730:	c9 01       	movw	r24, r18
    2732:	81 70       	andi	r24, 0x01	; 1
    2734:	90 70       	andi	r25, 0x00	; 0
    2736:	a0 70       	andi	r26, 0x00	; 0
    2738:	b0 70       	andi	r27, 0x00	; 0
    273a:	56 95       	lsr	r21
    273c:	47 95       	ror	r20
    273e:	37 95       	ror	r19
    2740:	27 95       	ror	r18
    2742:	82 2b       	or	r24, r18
    2744:	93 2b       	or	r25, r19
    2746:	a4 2b       	or	r26, r20
    2748:	b5 2b       	or	r27, r21
    274a:	8c 83       	std	Y+4, r24	; 0x04
    274c:	9d 83       	std	Y+5, r25	; 0x05
    274e:	ae 83       	std	Y+6, r26	; 0x06
    2750:	bf 83       	std	Y+7, r27	; 0x07
    2752:	8a 81       	ldd	r24, Y+2	; 0x02
    2754:	9b 81       	ldd	r25, Y+3	; 0x03
    2756:	01 96       	adiw	r24, 0x01	; 1
    2758:	9b 83       	std	Y+3, r25	; 0x03
    275a:	8a 83       	std	Y+2, r24	; 0x02
    275c:	05 c0       	rjmp	.+10     	; 0x2768 <_fpadd_parts+0x286>
    275e:	e0 e4       	ldi	r30, 0x40	; 64
    2760:	f1 e0       	ldi	r31, 0x01	; 1
    2762:	03 c0       	rjmp	.+6      	; 0x276a <_fpadd_parts+0x288>
    2764:	fb 01       	movw	r30, r22
    2766:	01 c0       	rjmp	.+2      	; 0x276a <_fpadd_parts+0x288>
    2768:	fe 01       	movw	r30, r28
    276a:	cf 01       	movw	r24, r30
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	ee e0       	ldi	r30, 0x0E	; 14
    2772:	0c 94 d4 17 	jmp	0x2fa8	; 0x2fa8 <__epilogue_restores__+0x8>

00002776 <__addsf3>:
    2776:	a0 e2       	ldi	r26, 0x20	; 32
    2778:	b0 e0       	ldi	r27, 0x00	; 0
    277a:	e1 ec       	ldi	r30, 0xC1	; 193
    277c:	f3 e1       	ldi	r31, 0x13	; 19
    277e:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <__prologue_saves__+0x18>
    2782:	69 83       	std	Y+1, r22	; 0x01
    2784:	7a 83       	std	Y+2, r23	; 0x02
    2786:	8b 83       	std	Y+3, r24	; 0x03
    2788:	9c 83       	std	Y+4, r25	; 0x04
    278a:	2d 83       	std	Y+5, r18	; 0x05
    278c:	3e 83       	std	Y+6, r19	; 0x06
    278e:	4f 83       	std	Y+7, r20	; 0x07
    2790:	58 87       	std	Y+8, r21	; 0x08
    2792:	89 e0       	ldi	r24, 0x09	; 9
    2794:	e8 2e       	mov	r14, r24
    2796:	f1 2c       	mov	r15, r1
    2798:	ec 0e       	add	r14, r28
    279a:	fd 1e       	adc	r15, r29
    279c:	ce 01       	movw	r24, r28
    279e:	01 96       	adiw	r24, 0x01	; 1
    27a0:	b7 01       	movw	r22, r14
    27a2:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__unpack_f>
    27a6:	8e 01       	movw	r16, r28
    27a8:	0f 5e       	subi	r16, 0xEF	; 239
    27aa:	1f 4f       	sbci	r17, 0xFF	; 255
    27ac:	ce 01       	movw	r24, r28
    27ae:	05 96       	adiw	r24, 0x05	; 5
    27b0:	b8 01       	movw	r22, r16
    27b2:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__unpack_f>
    27b6:	c7 01       	movw	r24, r14
    27b8:	b8 01       	movw	r22, r16
    27ba:	ae 01       	movw	r20, r28
    27bc:	47 5e       	subi	r20, 0xE7	; 231
    27be:	5f 4f       	sbci	r21, 0xFF	; 255
    27c0:	0e 94 71 12 	call	0x24e2	; 0x24e2 <_fpadd_parts>
    27c4:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <__pack_f>
    27c8:	a0 96       	adiw	r28, 0x20	; 32
    27ca:	e6 e0       	ldi	r30, 0x06	; 6
    27cc:	0c 94 dc 17 	jmp	0x2fb8	; 0x2fb8 <__epilogue_restores__+0x18>

000027d0 <__subsf3>:
    27d0:	a0 e2       	ldi	r26, 0x20	; 32
    27d2:	b0 e0       	ldi	r27, 0x00	; 0
    27d4:	ee ee       	ldi	r30, 0xEE	; 238
    27d6:	f3 e1       	ldi	r31, 0x13	; 19
    27d8:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <__prologue_saves__+0x18>
    27dc:	69 83       	std	Y+1, r22	; 0x01
    27de:	7a 83       	std	Y+2, r23	; 0x02
    27e0:	8b 83       	std	Y+3, r24	; 0x03
    27e2:	9c 83       	std	Y+4, r25	; 0x04
    27e4:	2d 83       	std	Y+5, r18	; 0x05
    27e6:	3e 83       	std	Y+6, r19	; 0x06
    27e8:	4f 83       	std	Y+7, r20	; 0x07
    27ea:	58 87       	std	Y+8, r21	; 0x08
    27ec:	8e 01       	movw	r16, r28
    27ee:	07 5f       	subi	r16, 0xF7	; 247
    27f0:	1f 4f       	sbci	r17, 0xFF	; 255
    27f2:	ce 01       	movw	r24, r28
    27f4:	01 96       	adiw	r24, 0x01	; 1
    27f6:	b8 01       	movw	r22, r16
    27f8:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__unpack_f>
    27fc:	91 e1       	ldi	r25, 0x11	; 17
    27fe:	e9 2e       	mov	r14, r25
    2800:	f1 2c       	mov	r15, r1
    2802:	ec 0e       	add	r14, r28
    2804:	fd 1e       	adc	r15, r29
    2806:	ce 01       	movw	r24, r28
    2808:	05 96       	adiw	r24, 0x05	; 5
    280a:	b7 01       	movw	r22, r14
    280c:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__unpack_f>
    2810:	8a 89       	ldd	r24, Y+18	; 0x12
    2812:	91 e0       	ldi	r25, 0x01	; 1
    2814:	89 27       	eor	r24, r25
    2816:	8a 8b       	std	Y+18, r24	; 0x12
    2818:	c8 01       	movw	r24, r16
    281a:	b7 01       	movw	r22, r14
    281c:	ae 01       	movw	r20, r28
    281e:	47 5e       	subi	r20, 0xE7	; 231
    2820:	5f 4f       	sbci	r21, 0xFF	; 255
    2822:	0e 94 71 12 	call	0x24e2	; 0x24e2 <_fpadd_parts>
    2826:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <__pack_f>
    282a:	a0 96       	adiw	r28, 0x20	; 32
    282c:	e6 e0       	ldi	r30, 0x06	; 6
    282e:	0c 94 dc 17 	jmp	0x2fb8	; 0x2fb8 <__epilogue_restores__+0x18>

00002832 <__mulsf3>:
    2832:	a0 e2       	ldi	r26, 0x20	; 32
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	ef e1       	ldi	r30, 0x1F	; 31
    2838:	f4 e1       	ldi	r31, 0x14	; 20
    283a:	0c 94 b4 17 	jmp	0x2f68	; 0x2f68 <__prologue_saves__>
    283e:	69 83       	std	Y+1, r22	; 0x01
    2840:	7a 83       	std	Y+2, r23	; 0x02
    2842:	8b 83       	std	Y+3, r24	; 0x03
    2844:	9c 83       	std	Y+4, r25	; 0x04
    2846:	2d 83       	std	Y+5, r18	; 0x05
    2848:	3e 83       	std	Y+6, r19	; 0x06
    284a:	4f 83       	std	Y+7, r20	; 0x07
    284c:	58 87       	std	Y+8, r21	; 0x08
    284e:	ce 01       	movw	r24, r28
    2850:	01 96       	adiw	r24, 0x01	; 1
    2852:	be 01       	movw	r22, r28
    2854:	67 5f       	subi	r22, 0xF7	; 247
    2856:	7f 4f       	sbci	r23, 0xFF	; 255
    2858:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__unpack_f>
    285c:	ce 01       	movw	r24, r28
    285e:	05 96       	adiw	r24, 0x05	; 5
    2860:	be 01       	movw	r22, r28
    2862:	6f 5e       	subi	r22, 0xEF	; 239
    2864:	7f 4f       	sbci	r23, 0xFF	; 255
    2866:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__unpack_f>
    286a:	99 85       	ldd	r25, Y+9	; 0x09
    286c:	92 30       	cpi	r25, 0x02	; 2
    286e:	78 f0       	brcs	.+30     	; 0x288e <__mulsf3+0x5c>
    2870:	89 89       	ldd	r24, Y+17	; 0x11
    2872:	82 30       	cpi	r24, 0x02	; 2
    2874:	c0 f0       	brcs	.+48     	; 0x28a6 <__mulsf3+0x74>
    2876:	94 30       	cpi	r25, 0x04	; 4
    2878:	19 f4       	brne	.+6      	; 0x2880 <__mulsf3+0x4e>
    287a:	82 30       	cpi	r24, 0x02	; 2
    287c:	41 f4       	brne	.+16     	; 0x288e <__mulsf3+0x5c>
    287e:	cb c0       	rjmp	.+406    	; 0x2a16 <__mulsf3+0x1e4>
    2880:	84 30       	cpi	r24, 0x04	; 4
    2882:	19 f4       	brne	.+6      	; 0x288a <__mulsf3+0x58>
    2884:	92 30       	cpi	r25, 0x02	; 2
    2886:	79 f4       	brne	.+30     	; 0x28a6 <__mulsf3+0x74>
    2888:	c6 c0       	rjmp	.+396    	; 0x2a16 <__mulsf3+0x1e4>
    288a:	92 30       	cpi	r25, 0x02	; 2
    288c:	51 f4       	brne	.+20     	; 0x28a2 <__mulsf3+0x70>
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	2a 85       	ldd	r18, Y+10	; 0x0a
    2892:	9a 89       	ldd	r25, Y+18	; 0x12
    2894:	29 17       	cp	r18, r25
    2896:	09 f4       	brne	.+2      	; 0x289a <__mulsf3+0x68>
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	8a 87       	std	Y+10, r24	; 0x0a
    289c:	ce 01       	movw	r24, r28
    289e:	09 96       	adiw	r24, 0x09	; 9
    28a0:	bc c0       	rjmp	.+376    	; 0x2a1a <__mulsf3+0x1e8>
    28a2:	82 30       	cpi	r24, 0x02	; 2
    28a4:	51 f4       	brne	.+20     	; 0x28ba <__mulsf3+0x88>
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	2a 85       	ldd	r18, Y+10	; 0x0a
    28aa:	9a 89       	ldd	r25, Y+18	; 0x12
    28ac:	29 17       	cp	r18, r25
    28ae:	09 f4       	brne	.+2      	; 0x28b2 <__mulsf3+0x80>
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	8a 8b       	std	Y+18, r24	; 0x12
    28b4:	ce 01       	movw	r24, r28
    28b6:	41 96       	adiw	r24, 0x11	; 17
    28b8:	b0 c0       	rjmp	.+352    	; 0x2a1a <__mulsf3+0x1e8>
    28ba:	6d 84       	ldd	r6, Y+13	; 0x0d
    28bc:	7e 84       	ldd	r7, Y+14	; 0x0e
    28be:	8f 84       	ldd	r8, Y+15	; 0x0f
    28c0:	98 88       	ldd	r9, Y+16	; 0x10
    28c2:	ed 88       	ldd	r14, Y+21	; 0x15
    28c4:	fe 88       	ldd	r15, Y+22	; 0x16
    28c6:	0f 89       	ldd	r16, Y+23	; 0x17
    28c8:	18 8d       	ldd	r17, Y+24	; 0x18
    28ca:	e0 e2       	ldi	r30, 0x20	; 32
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	dc 01       	movw	r26, r24
    28d4:	aa 24       	eor	r10, r10
    28d6:	bb 24       	eor	r11, r11
    28d8:	65 01       	movw	r12, r10
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	a9 01       	movw	r20, r18
    28e0:	b3 01       	movw	r22, r6
    28e2:	61 70       	andi	r22, 0x01	; 1
    28e4:	70 70       	andi	r23, 0x00	; 0
    28e6:	61 15       	cp	r22, r1
    28e8:	71 05       	cpc	r23, r1
    28ea:	d1 f0       	breq	.+52     	; 0x2920 <__mulsf3+0xee>
    28ec:	2e 0d       	add	r18, r14
    28ee:	3f 1d       	adc	r19, r15
    28f0:	40 1f       	adc	r20, r16
    28f2:	51 1f       	adc	r21, r17
    28f4:	15 01       	movw	r2, r10
    28f6:	26 01       	movw	r4, r12
    28f8:	28 0e       	add	r2, r24
    28fa:	39 1e       	adc	r3, r25
    28fc:	4a 1e       	adc	r4, r26
    28fe:	5b 1e       	adc	r5, r27
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	a0 e0       	ldi	r26, 0x00	; 0
    2906:	b0 e0       	ldi	r27, 0x00	; 0
    2908:	2e 15       	cp	r18, r14
    290a:	3f 05       	cpc	r19, r15
    290c:	40 07       	cpc	r20, r16
    290e:	51 07       	cpc	r21, r17
    2910:	18 f0       	brcs	.+6      	; 0x2918 <__mulsf3+0xe6>
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	dc 01       	movw	r26, r24
    2918:	82 0d       	add	r24, r2
    291a:	93 1d       	adc	r25, r3
    291c:	a4 1d       	adc	r26, r4
    291e:	b5 1d       	adc	r27, r5
    2920:	aa 0c       	add	r10, r10
    2922:	bb 1c       	adc	r11, r11
    2924:	cc 1c       	adc	r12, r12
    2926:	dd 1c       	adc	r13, r13
    2928:	17 ff       	sbrs	r17, 7
    292a:	09 c0       	rjmp	.+18     	; 0x293e <__mulsf3+0x10c>
    292c:	61 e0       	ldi	r22, 0x01	; 1
    292e:	26 2e       	mov	r2, r22
    2930:	31 2c       	mov	r3, r1
    2932:	41 2c       	mov	r4, r1
    2934:	51 2c       	mov	r5, r1
    2936:	a2 28       	or	r10, r2
    2938:	b3 28       	or	r11, r3
    293a:	c4 28       	or	r12, r4
    293c:	d5 28       	or	r13, r5
    293e:	31 97       	sbiw	r30, 0x01	; 1
    2940:	49 f0       	breq	.+18     	; 0x2954 <__mulsf3+0x122>
    2942:	ee 0c       	add	r14, r14
    2944:	ff 1c       	adc	r15, r15
    2946:	00 1f       	adc	r16, r16
    2948:	11 1f       	adc	r17, r17
    294a:	96 94       	lsr	r9
    294c:	87 94       	ror	r8
    294e:	77 94       	ror	r7
    2950:	67 94       	ror	r6
    2952:	c6 cf       	rjmp	.-116    	; 0x28e0 <__mulsf3+0xae>
    2954:	6b 89       	ldd	r22, Y+19	; 0x13
    2956:	7c 89       	ldd	r23, Y+20	; 0x14
    2958:	eb 85       	ldd	r30, Y+11	; 0x0b
    295a:	fc 85       	ldd	r31, Y+12	; 0x0c
    295c:	6e 0f       	add	r22, r30
    295e:	7f 1f       	adc	r23, r31
    2960:	6e 5f       	subi	r22, 0xFE	; 254
    2962:	7f 4f       	sbci	r23, 0xFF	; 255
    2964:	7c 8f       	std	Y+28, r23	; 0x1c
    2966:	6b 8f       	std	Y+27, r22	; 0x1b
    2968:	61 e0       	ldi	r22, 0x01	; 1
    296a:	ea 85       	ldd	r30, Y+10	; 0x0a
    296c:	7a 89       	ldd	r23, Y+18	; 0x12
    296e:	e7 17       	cp	r30, r23
    2970:	09 f4       	brne	.+2      	; 0x2974 <__mulsf3+0x142>
    2972:	60 e0       	ldi	r22, 0x00	; 0
    2974:	6a 8f       	std	Y+26, r22	; 0x1a
    2976:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2978:	7c 8d       	ldd	r23, Y+28	; 0x1c
    297a:	10 c0       	rjmp	.+32     	; 0x299c <__mulsf3+0x16a>
    297c:	fc 01       	movw	r30, r24
    297e:	e1 70       	andi	r30, 0x01	; 1
    2980:	f0 70       	andi	r31, 0x00	; 0
    2982:	30 97       	sbiw	r30, 0x00	; 0
    2984:	29 f0       	breq	.+10     	; 0x2990 <__mulsf3+0x15e>
    2986:	56 95       	lsr	r21
    2988:	47 95       	ror	r20
    298a:	37 95       	ror	r19
    298c:	27 95       	ror	r18
    298e:	50 68       	ori	r21, 0x80	; 128
    2990:	b6 95       	lsr	r27
    2992:	a7 95       	ror	r26
    2994:	97 95       	ror	r25
    2996:	87 95       	ror	r24
    2998:	6f 5f       	subi	r22, 0xFF	; 255
    299a:	7f 4f       	sbci	r23, 0xFF	; 255
    299c:	b7 fd       	sbrc	r27, 7
    299e:	ee cf       	rjmp	.-36     	; 0x297c <__mulsf3+0x14a>
    29a0:	0c c0       	rjmp	.+24     	; 0x29ba <__mulsf3+0x188>
    29a2:	88 0f       	add	r24, r24
    29a4:	99 1f       	adc	r25, r25
    29a6:	aa 1f       	adc	r26, r26
    29a8:	bb 1f       	adc	r27, r27
    29aa:	57 fd       	sbrc	r21, 7
    29ac:	81 60       	ori	r24, 0x01	; 1
    29ae:	22 0f       	add	r18, r18
    29b0:	33 1f       	adc	r19, r19
    29b2:	44 1f       	adc	r20, r20
    29b4:	55 1f       	adc	r21, r21
    29b6:	61 50       	subi	r22, 0x01	; 1
    29b8:	70 40       	sbci	r23, 0x00	; 0
    29ba:	80 30       	cpi	r24, 0x00	; 0
    29bc:	e0 e0       	ldi	r30, 0x00	; 0
    29be:	9e 07       	cpc	r25, r30
    29c0:	e0 e0       	ldi	r30, 0x00	; 0
    29c2:	ae 07       	cpc	r26, r30
    29c4:	e0 e4       	ldi	r30, 0x40	; 64
    29c6:	be 07       	cpc	r27, r30
    29c8:	60 f3       	brcs	.-40     	; 0x29a2 <__mulsf3+0x170>
    29ca:	6b 8f       	std	Y+27, r22	; 0x1b
    29cc:	7c 8f       	std	Y+28, r23	; 0x1c
    29ce:	6f e7       	ldi	r22, 0x7F	; 127
    29d0:	e6 2e       	mov	r14, r22
    29d2:	f1 2c       	mov	r15, r1
    29d4:	01 2d       	mov	r16, r1
    29d6:	11 2d       	mov	r17, r1
    29d8:	e8 22       	and	r14, r24
    29da:	f9 22       	and	r15, r25
    29dc:	0a 23       	and	r16, r26
    29de:	1b 23       	and	r17, r27
    29e0:	60 e4       	ldi	r22, 0x40	; 64
    29e2:	e6 16       	cp	r14, r22
    29e4:	f1 04       	cpc	r15, r1
    29e6:	01 05       	cpc	r16, r1
    29e8:	11 05       	cpc	r17, r1
    29ea:	61 f4       	brne	.+24     	; 0x2a04 <__mulsf3+0x1d2>
    29ec:	87 fd       	sbrc	r24, 7
    29ee:	0a c0       	rjmp	.+20     	; 0x2a04 <__mulsf3+0x1d2>
    29f0:	21 15       	cp	r18, r1
    29f2:	31 05       	cpc	r19, r1
    29f4:	41 05       	cpc	r20, r1
    29f6:	51 05       	cpc	r21, r1
    29f8:	29 f0       	breq	.+10     	; 0x2a04 <__mulsf3+0x1d2>
    29fa:	80 5c       	subi	r24, 0xC0	; 192
    29fc:	9f 4f       	sbci	r25, 0xFF	; 255
    29fe:	af 4f       	sbci	r26, 0xFF	; 255
    2a00:	bf 4f       	sbci	r27, 0xFF	; 255
    2a02:	80 78       	andi	r24, 0x80	; 128
    2a04:	8d 8f       	std	Y+29, r24	; 0x1d
    2a06:	9e 8f       	std	Y+30, r25	; 0x1e
    2a08:	af 8f       	std	Y+31, r26	; 0x1f
    2a0a:	b8 a3       	std	Y+32, r27	; 0x20
    2a0c:	83 e0       	ldi	r24, 0x03	; 3
    2a0e:	89 8f       	std	Y+25, r24	; 0x19
    2a10:	ce 01       	movw	r24, r28
    2a12:	49 96       	adiw	r24, 0x19	; 25
    2a14:	02 c0       	rjmp	.+4      	; 0x2a1a <__mulsf3+0x1e8>
    2a16:	80 e4       	ldi	r24, 0x40	; 64
    2a18:	91 e0       	ldi	r25, 0x01	; 1
    2a1a:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <__pack_f>
    2a1e:	a0 96       	adiw	r28, 0x20	; 32
    2a20:	e2 e1       	ldi	r30, 0x12	; 18
    2a22:	0c 94 d0 17 	jmp	0x2fa0	; 0x2fa0 <__epilogue_restores__>

00002a26 <__gtsf2>:
    2a26:	a8 e1       	ldi	r26, 0x18	; 24
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	e9 e1       	ldi	r30, 0x19	; 25
    2a2c:	f5 e1       	ldi	r31, 0x15	; 21
    2a2e:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <__prologue_saves__+0x18>
    2a32:	69 83       	std	Y+1, r22	; 0x01
    2a34:	7a 83       	std	Y+2, r23	; 0x02
    2a36:	8b 83       	std	Y+3, r24	; 0x03
    2a38:	9c 83       	std	Y+4, r25	; 0x04
    2a3a:	2d 83       	std	Y+5, r18	; 0x05
    2a3c:	3e 83       	std	Y+6, r19	; 0x06
    2a3e:	4f 83       	std	Y+7, r20	; 0x07
    2a40:	58 87       	std	Y+8, r21	; 0x08
    2a42:	8e 01       	movw	r16, r28
    2a44:	07 5f       	subi	r16, 0xF7	; 247
    2a46:	1f 4f       	sbci	r17, 0xFF	; 255
    2a48:	ce 01       	movw	r24, r28
    2a4a:	01 96       	adiw	r24, 0x01	; 1
    2a4c:	b8 01       	movw	r22, r16
    2a4e:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__unpack_f>
    2a52:	81 e1       	ldi	r24, 0x11	; 17
    2a54:	e8 2e       	mov	r14, r24
    2a56:	f1 2c       	mov	r15, r1
    2a58:	ec 0e       	add	r14, r28
    2a5a:	fd 1e       	adc	r15, r29
    2a5c:	ce 01       	movw	r24, r28
    2a5e:	05 96       	adiw	r24, 0x05	; 5
    2a60:	b7 01       	movw	r22, r14
    2a62:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <__unpack_f>
    2a66:	89 85       	ldd	r24, Y+9	; 0x09
    2a68:	82 30       	cpi	r24, 0x02	; 2
    2a6a:	40 f0       	brcs	.+16     	; 0x2a7c <__gtsf2+0x56>
    2a6c:	89 89       	ldd	r24, Y+17	; 0x11
    2a6e:	82 30       	cpi	r24, 0x02	; 2
    2a70:	28 f0       	brcs	.+10     	; 0x2a7c <__gtsf2+0x56>
    2a72:	c8 01       	movw	r24, r16
    2a74:	b7 01       	movw	r22, r14
    2a76:	0e 94 34 17 	call	0x2e68	; 0x2e68 <__fpcmp_parts_f>
    2a7a:	01 c0       	rjmp	.+2      	; 0x2a7e <__gtsf2+0x58>
    2a7c:	8f ef       	ldi	r24, 0xFF	; 255
    2a7e:	68 96       	adiw	r28, 0x18	; 24
    2a80:	e6 e0       	ldi	r30, 0x06	; 6
    2a82:	0c 94 dc 17 	jmp	0x2fb8	; 0x2fb8 <__epilogue_restores__+0x18>

00002a86 <__floatsisf>:
    2a86:	a8 e0       	ldi	r26, 0x08	; 8
    2a88:	b0 e0       	ldi	r27, 0x00	; 0
    2a8a:	e9 e4       	ldi	r30, 0x49	; 73
    2a8c:	f5 e1       	ldi	r31, 0x15	; 21
    2a8e:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <__prologue_saves__+0x18>
    2a92:	7b 01       	movw	r14, r22
    2a94:	8c 01       	movw	r16, r24
    2a96:	83 e0       	ldi	r24, 0x03	; 3
    2a98:	89 83       	std	Y+1, r24	; 0x01
    2a9a:	d8 01       	movw	r26, r16
    2a9c:	c7 01       	movw	r24, r14
    2a9e:	88 27       	eor	r24, r24
    2aa0:	b7 fd       	sbrc	r27, 7
    2aa2:	83 95       	inc	r24
    2aa4:	99 27       	eor	r25, r25
    2aa6:	aa 27       	eor	r26, r26
    2aa8:	bb 27       	eor	r27, r27
    2aaa:	28 2f       	mov	r18, r24
    2aac:	8a 83       	std	Y+2, r24	; 0x02
    2aae:	e1 14       	cp	r14, r1
    2ab0:	f1 04       	cpc	r15, r1
    2ab2:	01 05       	cpc	r16, r1
    2ab4:	11 05       	cpc	r17, r1
    2ab6:	19 f4       	brne	.+6      	; 0x2abe <__floatsisf+0x38>
    2ab8:	82 e0       	ldi	r24, 0x02	; 2
    2aba:	89 83       	std	Y+1, r24	; 0x01
    2abc:	37 c0       	rjmp	.+110    	; 0x2b2c <__floatsisf+0xa6>
    2abe:	8e e1       	ldi	r24, 0x1E	; 30
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	9c 83       	std	Y+4, r25	; 0x04
    2ac4:	8b 83       	std	Y+3, r24	; 0x03
    2ac6:	22 23       	and	r18, r18
    2ac8:	89 f0       	breq	.+34     	; 0x2aec <__floatsisf+0x66>
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	e8 16       	cp	r14, r24
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	f8 06       	cpc	r15, r24
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	08 07       	cpc	r16, r24
    2ad6:	80 e8       	ldi	r24, 0x80	; 128
    2ad8:	18 07       	cpc	r17, r24
    2ada:	69 f1       	breq	.+90     	; 0x2b36 <__floatsisf+0xb0>
    2adc:	10 95       	com	r17
    2ade:	00 95       	com	r16
    2ae0:	f0 94       	com	r15
    2ae2:	e0 94       	com	r14
    2ae4:	e1 1c       	adc	r14, r1
    2ae6:	f1 1c       	adc	r15, r1
    2ae8:	01 1d       	adc	r16, r1
    2aea:	11 1d       	adc	r17, r1
    2aec:	ed 82       	std	Y+5, r14	; 0x05
    2aee:	fe 82       	std	Y+6, r15	; 0x06
    2af0:	0f 83       	std	Y+7, r16	; 0x07
    2af2:	18 87       	std	Y+8, r17	; 0x08
    2af4:	c8 01       	movw	r24, r16
    2af6:	b7 01       	movw	r22, r14
    2af8:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__clzsi2>
    2afc:	9c 01       	movw	r18, r24
    2afe:	21 50       	subi	r18, 0x01	; 1
    2b00:	30 40       	sbci	r19, 0x00	; 0
    2b02:	12 16       	cp	r1, r18
    2b04:	13 06       	cpc	r1, r19
    2b06:	94 f4       	brge	.+36     	; 0x2b2c <__floatsisf+0xa6>
    2b08:	02 2e       	mov	r0, r18
    2b0a:	04 c0       	rjmp	.+8      	; 0x2b14 <__floatsisf+0x8e>
    2b0c:	ee 0c       	add	r14, r14
    2b0e:	ff 1c       	adc	r15, r15
    2b10:	00 1f       	adc	r16, r16
    2b12:	11 1f       	adc	r17, r17
    2b14:	0a 94       	dec	r0
    2b16:	d2 f7       	brpl	.-12     	; 0x2b0c <__floatsisf+0x86>
    2b18:	ed 82       	std	Y+5, r14	; 0x05
    2b1a:	fe 82       	std	Y+6, r15	; 0x06
    2b1c:	0f 83       	std	Y+7, r16	; 0x07
    2b1e:	18 87       	std	Y+8, r17	; 0x08
    2b20:	8e e1       	ldi	r24, 0x1E	; 30
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	82 1b       	sub	r24, r18
    2b26:	93 0b       	sbc	r25, r19
    2b28:	9c 83       	std	Y+4, r25	; 0x04
    2b2a:	8b 83       	std	Y+3, r24	; 0x03
    2b2c:	ce 01       	movw	r24, r28
    2b2e:	01 96       	adiw	r24, 0x01	; 1
    2b30:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <__pack_f>
    2b34:	04 c0       	rjmp	.+8      	; 0x2b3e <__floatsisf+0xb8>
    2b36:	60 e0       	ldi	r22, 0x00	; 0
    2b38:	70 e0       	ldi	r23, 0x00	; 0
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	9f ec       	ldi	r25, 0xCF	; 207
    2b3e:	28 96       	adiw	r28, 0x08	; 8
    2b40:	e6 e0       	ldi	r30, 0x06	; 6
    2b42:	0c 94 dc 17 	jmp	0x2fb8	; 0x2fb8 <__epilogue_restores__+0x18>

00002b46 <__clzsi2>:
    2b46:	af 92       	push	r10
    2b48:	bf 92       	push	r11
    2b4a:	cf 92       	push	r12
    2b4c:	df 92       	push	r13
    2b4e:	ef 92       	push	r14
    2b50:	ff 92       	push	r15
    2b52:	0f 93       	push	r16
    2b54:	1f 93       	push	r17
    2b56:	7b 01       	movw	r14, r22
    2b58:	8c 01       	movw	r16, r24
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	e8 16       	cp	r14, r24
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	f8 06       	cpc	r15, r24
    2b62:	81 e0       	ldi	r24, 0x01	; 1
    2b64:	08 07       	cpc	r16, r24
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	18 07       	cpc	r17, r24
    2b6a:	58 f4       	brcc	.+22     	; 0x2b82 <__clzsi2+0x3c>
    2b6c:	ef ef       	ldi	r30, 0xFF	; 255
    2b6e:	ee 16       	cp	r14, r30
    2b70:	f1 04       	cpc	r15, r1
    2b72:	01 05       	cpc	r16, r1
    2b74:	11 05       	cpc	r17, r1
    2b76:	09 f0       	breq	.+2      	; 0x2b7a <__clzsi2+0x34>
    2b78:	90 f4       	brcc	.+36     	; 0x2b9e <__clzsi2+0x58>
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	dc 01       	movw	r26, r24
    2b80:	17 c0       	rjmp	.+46     	; 0x2bb0 <__clzsi2+0x6a>
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	ef 16       	cp	r14, r31
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	ff 06       	cpc	r15, r31
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	0f 07       	cpc	r16, r31
    2b8e:	f1 e0       	ldi	r31, 0x01	; 1
    2b90:	1f 07       	cpc	r17, r31
    2b92:	50 f4       	brcc	.+20     	; 0x2ba8 <__clzsi2+0x62>
    2b94:	80 e1       	ldi	r24, 0x10	; 16
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	a0 e0       	ldi	r26, 0x00	; 0
    2b9a:	b0 e0       	ldi	r27, 0x00	; 0
    2b9c:	09 c0       	rjmp	.+18     	; 0x2bb0 <__clzsi2+0x6a>
    2b9e:	88 e0       	ldi	r24, 0x08	; 8
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	a0 e0       	ldi	r26, 0x00	; 0
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	04 c0       	rjmp	.+8      	; 0x2bb0 <__clzsi2+0x6a>
    2ba8:	88 e1       	ldi	r24, 0x18	; 24
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	a0 e0       	ldi	r26, 0x00	; 0
    2bae:	b0 e0       	ldi	r27, 0x00	; 0
    2bb0:	20 e2       	ldi	r18, 0x20	; 32
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	40 e0       	ldi	r20, 0x00	; 0
    2bb6:	50 e0       	ldi	r21, 0x00	; 0
    2bb8:	28 1b       	sub	r18, r24
    2bba:	39 0b       	sbc	r19, r25
    2bbc:	4a 0b       	sbc	r20, r26
    2bbe:	5b 0b       	sbc	r21, r27
    2bc0:	57 01       	movw	r10, r14
    2bc2:	68 01       	movw	r12, r16
    2bc4:	04 c0       	rjmp	.+8      	; 0x2bce <__clzsi2+0x88>
    2bc6:	d6 94       	lsr	r13
    2bc8:	c7 94       	ror	r12
    2bca:	b7 94       	ror	r11
    2bcc:	a7 94       	ror	r10
    2bce:	8a 95       	dec	r24
    2bd0:	d2 f7       	brpl	.-12     	; 0x2bc6 <__clzsi2+0x80>
    2bd2:	d6 01       	movw	r26, r12
    2bd4:	c5 01       	movw	r24, r10
    2bd6:	88 5b       	subi	r24, 0xB8	; 184
    2bd8:	9e 4f       	sbci	r25, 0xFE	; 254
    2bda:	fc 01       	movw	r30, r24
    2bdc:	80 81       	ld	r24, Z
    2bde:	28 1b       	sub	r18, r24
    2be0:	31 09       	sbc	r19, r1
    2be2:	41 09       	sbc	r20, r1
    2be4:	51 09       	sbc	r21, r1
    2be6:	c9 01       	movw	r24, r18
    2be8:	1f 91       	pop	r17
    2bea:	0f 91       	pop	r16
    2bec:	ff 90       	pop	r15
    2bee:	ef 90       	pop	r14
    2bf0:	df 90       	pop	r13
    2bf2:	cf 90       	pop	r12
    2bf4:	bf 90       	pop	r11
    2bf6:	af 90       	pop	r10
    2bf8:	08 95       	ret

00002bfa <__pack_f>:
    2bfa:	ef 92       	push	r14
    2bfc:	ff 92       	push	r15
    2bfe:	0f 93       	push	r16
    2c00:	1f 93       	push	r17
    2c02:	cf 93       	push	r28
    2c04:	df 93       	push	r29
    2c06:	fc 01       	movw	r30, r24
    2c08:	24 81       	ldd	r18, Z+4	; 0x04
    2c0a:	35 81       	ldd	r19, Z+5	; 0x05
    2c0c:	46 81       	ldd	r20, Z+6	; 0x06
    2c0e:	57 81       	ldd	r21, Z+7	; 0x07
    2c10:	61 81       	ldd	r22, Z+1	; 0x01
    2c12:	80 81       	ld	r24, Z
    2c14:	82 30       	cpi	r24, 0x02	; 2
    2c16:	20 f4       	brcc	.+8      	; 0x2c20 <__pack_f+0x26>
    2c18:	40 61       	ori	r20, 0x10	; 16
    2c1a:	ef ef       	ldi	r30, 0xFF	; 255
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	a3 c0       	rjmp	.+326    	; 0x2d66 <__pack_f+0x16c>
    2c20:	84 30       	cpi	r24, 0x04	; 4
    2c22:	09 f4       	brne	.+2      	; 0x2c26 <__pack_f+0x2c>
    2c24:	9b c0       	rjmp	.+310    	; 0x2d5c <__pack_f+0x162>
    2c26:	82 30       	cpi	r24, 0x02	; 2
    2c28:	09 f4       	brne	.+2      	; 0x2c2c <__pack_f+0x32>
    2c2a:	92 c0       	rjmp	.+292    	; 0x2d50 <__pack_f+0x156>
    2c2c:	21 15       	cp	r18, r1
    2c2e:	31 05       	cpc	r19, r1
    2c30:	41 05       	cpc	r20, r1
    2c32:	51 05       	cpc	r21, r1
    2c34:	09 f4       	brne	.+2      	; 0x2c38 <__pack_f+0x3e>
    2c36:	8f c0       	rjmp	.+286    	; 0x2d56 <__pack_f+0x15c>
    2c38:	02 80       	ldd	r0, Z+2	; 0x02
    2c3a:	f3 81       	ldd	r31, Z+3	; 0x03
    2c3c:	e0 2d       	mov	r30, r0
    2c3e:	8f ef       	ldi	r24, 0xFF	; 255
    2c40:	e2 38       	cpi	r30, 0x82	; 130
    2c42:	f8 07       	cpc	r31, r24
    2c44:	0c f0       	brlt	.+2      	; 0x2c48 <__pack_f+0x4e>
    2c46:	5a c0       	rjmp	.+180    	; 0x2cfc <__pack_f+0x102>
    2c48:	c2 e8       	ldi	r28, 0x82	; 130
    2c4a:	df ef       	ldi	r29, 0xFF	; 255
    2c4c:	ce 1b       	sub	r28, r30
    2c4e:	df 0b       	sbc	r29, r31
    2c50:	ca 31       	cpi	r28, 0x1A	; 26
    2c52:	d1 05       	cpc	r29, r1
    2c54:	6c f5       	brge	.+90     	; 0x2cb0 <__pack_f+0xb6>
    2c56:	79 01       	movw	r14, r18
    2c58:	8a 01       	movw	r16, r20
    2c5a:	0c 2e       	mov	r0, r28
    2c5c:	04 c0       	rjmp	.+8      	; 0x2c66 <__pack_f+0x6c>
    2c5e:	16 95       	lsr	r17
    2c60:	07 95       	ror	r16
    2c62:	f7 94       	ror	r15
    2c64:	e7 94       	ror	r14
    2c66:	0a 94       	dec	r0
    2c68:	d2 f7       	brpl	.-12     	; 0x2c5e <__pack_f+0x64>
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	a0 e0       	ldi	r26, 0x00	; 0
    2c70:	b0 e0       	ldi	r27, 0x00	; 0
    2c72:	0c 2e       	mov	r0, r28
    2c74:	04 c0       	rjmp	.+8      	; 0x2c7e <__pack_f+0x84>
    2c76:	88 0f       	add	r24, r24
    2c78:	99 1f       	adc	r25, r25
    2c7a:	aa 1f       	adc	r26, r26
    2c7c:	bb 1f       	adc	r27, r27
    2c7e:	0a 94       	dec	r0
    2c80:	d2 f7       	brpl	.-12     	; 0x2c76 <__pack_f+0x7c>
    2c82:	01 97       	sbiw	r24, 0x01	; 1
    2c84:	a1 09       	sbc	r26, r1
    2c86:	b1 09       	sbc	r27, r1
    2c88:	82 23       	and	r24, r18
    2c8a:	93 23       	and	r25, r19
    2c8c:	a4 23       	and	r26, r20
    2c8e:	b5 23       	and	r27, r21
    2c90:	21 e0       	ldi	r18, 0x01	; 1
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	40 e0       	ldi	r20, 0x00	; 0
    2c96:	50 e0       	ldi	r21, 0x00	; 0
    2c98:	00 97       	sbiw	r24, 0x00	; 0
    2c9a:	a1 05       	cpc	r26, r1
    2c9c:	b1 05       	cpc	r27, r1
    2c9e:	19 f4       	brne	.+6      	; 0x2ca6 <__pack_f+0xac>
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	a9 01       	movw	r20, r18
    2ca6:	2e 29       	or	r18, r14
    2ca8:	3f 29       	or	r19, r15
    2caa:	40 2b       	or	r20, r16
    2cac:	51 2b       	or	r21, r17
    2cae:	03 c0       	rjmp	.+6      	; 0x2cb6 <__pack_f+0xbc>
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	a9 01       	movw	r20, r18
    2cb6:	da 01       	movw	r26, r20
    2cb8:	c9 01       	movw	r24, r18
    2cba:	8f 77       	andi	r24, 0x7F	; 127
    2cbc:	90 70       	andi	r25, 0x00	; 0
    2cbe:	a0 70       	andi	r26, 0x00	; 0
    2cc0:	b0 70       	andi	r27, 0x00	; 0
    2cc2:	80 34       	cpi	r24, 0x40	; 64
    2cc4:	91 05       	cpc	r25, r1
    2cc6:	a1 05       	cpc	r26, r1
    2cc8:	b1 05       	cpc	r27, r1
    2cca:	39 f4       	brne	.+14     	; 0x2cda <__pack_f+0xe0>
    2ccc:	27 ff       	sbrs	r18, 7
    2cce:	09 c0       	rjmp	.+18     	; 0x2ce2 <__pack_f+0xe8>
    2cd0:	20 5c       	subi	r18, 0xC0	; 192
    2cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cd4:	4f 4f       	sbci	r20, 0xFF	; 255
    2cd6:	5f 4f       	sbci	r21, 0xFF	; 255
    2cd8:	04 c0       	rjmp	.+8      	; 0x2ce2 <__pack_f+0xe8>
    2cda:	21 5c       	subi	r18, 0xC1	; 193
    2cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cde:	4f 4f       	sbci	r20, 0xFF	; 255
    2ce0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ce2:	e1 e0       	ldi	r30, 0x01	; 1
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	20 30       	cpi	r18, 0x00	; 0
    2ce8:	80 e0       	ldi	r24, 0x00	; 0
    2cea:	38 07       	cpc	r19, r24
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	48 07       	cpc	r20, r24
    2cf0:	80 e4       	ldi	r24, 0x40	; 64
    2cf2:	58 07       	cpc	r21, r24
    2cf4:	28 f5       	brcc	.+74     	; 0x2d40 <__pack_f+0x146>
    2cf6:	e0 e0       	ldi	r30, 0x00	; 0
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	22 c0       	rjmp	.+68     	; 0x2d40 <__pack_f+0x146>
    2cfc:	e0 38       	cpi	r30, 0x80	; 128
    2cfe:	f1 05       	cpc	r31, r1
    2d00:	6c f5       	brge	.+90     	; 0x2d5c <__pack_f+0x162>
    2d02:	e1 58       	subi	r30, 0x81	; 129
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	da 01       	movw	r26, r20
    2d08:	c9 01       	movw	r24, r18
    2d0a:	8f 77       	andi	r24, 0x7F	; 127
    2d0c:	90 70       	andi	r25, 0x00	; 0
    2d0e:	a0 70       	andi	r26, 0x00	; 0
    2d10:	b0 70       	andi	r27, 0x00	; 0
    2d12:	80 34       	cpi	r24, 0x40	; 64
    2d14:	91 05       	cpc	r25, r1
    2d16:	a1 05       	cpc	r26, r1
    2d18:	b1 05       	cpc	r27, r1
    2d1a:	39 f4       	brne	.+14     	; 0x2d2a <__pack_f+0x130>
    2d1c:	27 ff       	sbrs	r18, 7
    2d1e:	09 c0       	rjmp	.+18     	; 0x2d32 <__pack_f+0x138>
    2d20:	20 5c       	subi	r18, 0xC0	; 192
    2d22:	3f 4f       	sbci	r19, 0xFF	; 255
    2d24:	4f 4f       	sbci	r20, 0xFF	; 255
    2d26:	5f 4f       	sbci	r21, 0xFF	; 255
    2d28:	04 c0       	rjmp	.+8      	; 0x2d32 <__pack_f+0x138>
    2d2a:	21 5c       	subi	r18, 0xC1	; 193
    2d2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d2e:	4f 4f       	sbci	r20, 0xFF	; 255
    2d30:	5f 4f       	sbci	r21, 0xFF	; 255
    2d32:	57 ff       	sbrs	r21, 7
    2d34:	05 c0       	rjmp	.+10     	; 0x2d40 <__pack_f+0x146>
    2d36:	56 95       	lsr	r21
    2d38:	47 95       	ror	r20
    2d3a:	37 95       	ror	r19
    2d3c:	27 95       	ror	r18
    2d3e:	31 96       	adiw	r30, 0x01	; 1
    2d40:	87 e0       	ldi	r24, 0x07	; 7
    2d42:	56 95       	lsr	r21
    2d44:	47 95       	ror	r20
    2d46:	37 95       	ror	r19
    2d48:	27 95       	ror	r18
    2d4a:	8a 95       	dec	r24
    2d4c:	d1 f7       	brne	.-12     	; 0x2d42 <__pack_f+0x148>
    2d4e:	0b c0       	rjmp	.+22     	; 0x2d66 <__pack_f+0x16c>
    2d50:	e0 e0       	ldi	r30, 0x00	; 0
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	05 c0       	rjmp	.+10     	; 0x2d60 <__pack_f+0x166>
    2d56:	e0 e0       	ldi	r30, 0x00	; 0
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	05 c0       	rjmp	.+10     	; 0x2d66 <__pack_f+0x16c>
    2d5c:	ef ef       	ldi	r30, 0xFF	; 255
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	a9 01       	movw	r20, r18
    2d66:	8e 2f       	mov	r24, r30
    2d68:	87 95       	ror	r24
    2d6a:	88 27       	eor	r24, r24
    2d6c:	87 95       	ror	r24
    2d6e:	94 2f       	mov	r25, r20
    2d70:	9f 77       	andi	r25, 0x7F	; 127
    2d72:	67 95       	ror	r22
    2d74:	66 27       	eor	r22, r22
    2d76:	67 95       	ror	r22
    2d78:	e6 95       	lsr	r30
    2d7a:	e2 2e       	mov	r14, r18
    2d7c:	a9 2f       	mov	r26, r25
    2d7e:	a8 2b       	or	r26, r24
    2d80:	fe 2f       	mov	r31, r30
    2d82:	f6 2b       	or	r31, r22
    2d84:	62 2f       	mov	r22, r18
    2d86:	73 2f       	mov	r23, r19
    2d88:	8a 2f       	mov	r24, r26
    2d8a:	9f 2f       	mov	r25, r31
    2d8c:	cd b7       	in	r28, 0x3d	; 61
    2d8e:	de b7       	in	r29, 0x3e	; 62
    2d90:	e6 e0       	ldi	r30, 0x06	; 6
    2d92:	0c 94 dc 17 	jmp	0x2fb8	; 0x2fb8 <__epilogue_restores__+0x18>

00002d96 <__unpack_f>:
    2d96:	dc 01       	movw	r26, r24
    2d98:	fb 01       	movw	r30, r22
    2d9a:	2c 91       	ld	r18, X
    2d9c:	11 96       	adiw	r26, 0x01	; 1
    2d9e:	3c 91       	ld	r19, X
    2da0:	11 97       	sbiw	r26, 0x01	; 1
    2da2:	12 96       	adiw	r26, 0x02	; 2
    2da4:	8c 91       	ld	r24, X
    2da6:	12 97       	sbiw	r26, 0x02	; 2
    2da8:	48 2f       	mov	r20, r24
    2daa:	4f 77       	andi	r20, 0x7F	; 127
    2dac:	50 e0       	ldi	r21, 0x00	; 0
    2dae:	98 2f       	mov	r25, r24
    2db0:	99 1f       	adc	r25, r25
    2db2:	99 27       	eor	r25, r25
    2db4:	99 1f       	adc	r25, r25
    2db6:	13 96       	adiw	r26, 0x03	; 3
    2db8:	6c 91       	ld	r22, X
    2dba:	13 97       	sbiw	r26, 0x03	; 3
    2dbc:	86 2f       	mov	r24, r22
    2dbe:	88 0f       	add	r24, r24
    2dc0:	89 2b       	or	r24, r25
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	66 1f       	adc	r22, r22
    2dc6:	66 27       	eor	r22, r22
    2dc8:	66 1f       	adc	r22, r22
    2dca:	61 83       	std	Z+1, r22	; 0x01
    2dcc:	00 97       	sbiw	r24, 0x00	; 0
    2dce:	39 f5       	brne	.+78     	; 0x2e1e <__unpack_f+0x88>
    2dd0:	21 15       	cp	r18, r1
    2dd2:	31 05       	cpc	r19, r1
    2dd4:	41 05       	cpc	r20, r1
    2dd6:	51 05       	cpc	r21, r1
    2dd8:	11 f4       	brne	.+4      	; 0x2dde <__unpack_f+0x48>
    2dda:	82 e0       	ldi	r24, 0x02	; 2
    2ddc:	29 c0       	rjmp	.+82     	; 0x2e30 <__unpack_f+0x9a>
    2dde:	82 e8       	ldi	r24, 0x82	; 130
    2de0:	9f ef       	ldi	r25, 0xFF	; 255
    2de2:	93 83       	std	Z+3, r25	; 0x03
    2de4:	82 83       	std	Z+2, r24	; 0x02
    2de6:	67 e0       	ldi	r22, 0x07	; 7
    2de8:	22 0f       	add	r18, r18
    2dea:	33 1f       	adc	r19, r19
    2dec:	44 1f       	adc	r20, r20
    2dee:	55 1f       	adc	r21, r21
    2df0:	6a 95       	dec	r22
    2df2:	d1 f7       	brne	.-12     	; 0x2de8 <__unpack_f+0x52>
    2df4:	83 e0       	ldi	r24, 0x03	; 3
    2df6:	80 83       	st	Z, r24
    2df8:	09 c0       	rjmp	.+18     	; 0x2e0c <__unpack_f+0x76>
    2dfa:	22 0f       	add	r18, r18
    2dfc:	33 1f       	adc	r19, r19
    2dfe:	44 1f       	adc	r20, r20
    2e00:	55 1f       	adc	r21, r21
    2e02:	82 81       	ldd	r24, Z+2	; 0x02
    2e04:	93 81       	ldd	r25, Z+3	; 0x03
    2e06:	01 97       	sbiw	r24, 0x01	; 1
    2e08:	93 83       	std	Z+3, r25	; 0x03
    2e0a:	82 83       	std	Z+2, r24	; 0x02
    2e0c:	20 30       	cpi	r18, 0x00	; 0
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	38 07       	cpc	r19, r24
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	48 07       	cpc	r20, r24
    2e16:	80 e4       	ldi	r24, 0x40	; 64
    2e18:	58 07       	cpc	r21, r24
    2e1a:	78 f3       	brcs	.-34     	; 0x2dfa <__unpack_f+0x64>
    2e1c:	20 c0       	rjmp	.+64     	; 0x2e5e <__unpack_f+0xc8>
    2e1e:	8f 3f       	cpi	r24, 0xFF	; 255
    2e20:	91 05       	cpc	r25, r1
    2e22:	79 f4       	brne	.+30     	; 0x2e42 <__unpack_f+0xac>
    2e24:	21 15       	cp	r18, r1
    2e26:	31 05       	cpc	r19, r1
    2e28:	41 05       	cpc	r20, r1
    2e2a:	51 05       	cpc	r21, r1
    2e2c:	19 f4       	brne	.+6      	; 0x2e34 <__unpack_f+0x9e>
    2e2e:	84 e0       	ldi	r24, 0x04	; 4
    2e30:	80 83       	st	Z, r24
    2e32:	08 95       	ret
    2e34:	44 ff       	sbrs	r20, 4
    2e36:	03 c0       	rjmp	.+6      	; 0x2e3e <__unpack_f+0xa8>
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	80 83       	st	Z, r24
    2e3c:	10 c0       	rjmp	.+32     	; 0x2e5e <__unpack_f+0xc8>
    2e3e:	10 82       	st	Z, r1
    2e40:	0e c0       	rjmp	.+28     	; 0x2e5e <__unpack_f+0xc8>
    2e42:	8f 57       	subi	r24, 0x7F	; 127
    2e44:	90 40       	sbci	r25, 0x00	; 0
    2e46:	93 83       	std	Z+3, r25	; 0x03
    2e48:	82 83       	std	Z+2, r24	; 0x02
    2e4a:	83 e0       	ldi	r24, 0x03	; 3
    2e4c:	80 83       	st	Z, r24
    2e4e:	87 e0       	ldi	r24, 0x07	; 7
    2e50:	22 0f       	add	r18, r18
    2e52:	33 1f       	adc	r19, r19
    2e54:	44 1f       	adc	r20, r20
    2e56:	55 1f       	adc	r21, r21
    2e58:	8a 95       	dec	r24
    2e5a:	d1 f7       	brne	.-12     	; 0x2e50 <__unpack_f+0xba>
    2e5c:	50 64       	ori	r21, 0x40	; 64
    2e5e:	24 83       	std	Z+4, r18	; 0x04
    2e60:	35 83       	std	Z+5, r19	; 0x05
    2e62:	46 83       	std	Z+6, r20	; 0x06
    2e64:	57 83       	std	Z+7, r21	; 0x07
    2e66:	08 95       	ret

00002e68 <__fpcmp_parts_f>:
    2e68:	fc 01       	movw	r30, r24
    2e6a:	db 01       	movw	r26, r22
    2e6c:	90 81       	ld	r25, Z
    2e6e:	92 30       	cpi	r25, 0x02	; 2
    2e70:	08 f4       	brcc	.+2      	; 0x2e74 <__fpcmp_parts_f+0xc>
    2e72:	49 c0       	rjmp	.+146    	; 0x2f06 <__fpcmp_parts_f+0x9e>
    2e74:	8c 91       	ld	r24, X
    2e76:	82 30       	cpi	r24, 0x02	; 2
    2e78:	08 f4       	brcc	.+2      	; 0x2e7c <__fpcmp_parts_f+0x14>
    2e7a:	45 c0       	rjmp	.+138    	; 0x2f06 <__fpcmp_parts_f+0x9e>
    2e7c:	94 30       	cpi	r25, 0x04	; 4
    2e7e:	51 f4       	brne	.+20     	; 0x2e94 <__fpcmp_parts_f+0x2c>
    2e80:	61 81       	ldd	r22, Z+1	; 0x01
    2e82:	84 30       	cpi	r24, 0x04	; 4
    2e84:	b1 f5       	brne	.+108    	; 0x2ef2 <__fpcmp_parts_f+0x8a>
    2e86:	11 96       	adiw	r26, 0x01	; 1
    2e88:	2c 91       	ld	r18, X
    2e8a:	11 97       	sbiw	r26, 0x01	; 1
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	26 1b       	sub	r18, r22
    2e90:	31 09       	sbc	r19, r1
    2e92:	41 c0       	rjmp	.+130    	; 0x2f16 <__fpcmp_parts_f+0xae>
    2e94:	84 30       	cpi	r24, 0x04	; 4
    2e96:	21 f0       	breq	.+8      	; 0x2ea0 <__fpcmp_parts_f+0x38>
    2e98:	92 30       	cpi	r25, 0x02	; 2
    2e9a:	41 f4       	brne	.+16     	; 0x2eac <__fpcmp_parts_f+0x44>
    2e9c:	82 30       	cpi	r24, 0x02	; 2
    2e9e:	b1 f1       	breq	.+108    	; 0x2f0c <__fpcmp_parts_f+0xa4>
    2ea0:	11 96       	adiw	r26, 0x01	; 1
    2ea2:	8c 91       	ld	r24, X
    2ea4:	11 97       	sbiw	r26, 0x01	; 1
    2ea6:	88 23       	and	r24, r24
    2ea8:	a1 f1       	breq	.+104    	; 0x2f12 <__fpcmp_parts_f+0xaa>
    2eaa:	2d c0       	rjmp	.+90     	; 0x2f06 <__fpcmp_parts_f+0x9e>
    2eac:	61 81       	ldd	r22, Z+1	; 0x01
    2eae:	82 30       	cpi	r24, 0x02	; 2
    2eb0:	01 f1       	breq	.+64     	; 0x2ef2 <__fpcmp_parts_f+0x8a>
    2eb2:	11 96       	adiw	r26, 0x01	; 1
    2eb4:	8c 91       	ld	r24, X
    2eb6:	11 97       	sbiw	r26, 0x01	; 1
    2eb8:	68 17       	cp	r22, r24
    2eba:	d9 f4       	brne	.+54     	; 0x2ef2 <__fpcmp_parts_f+0x8a>
    2ebc:	22 81       	ldd	r18, Z+2	; 0x02
    2ebe:	33 81       	ldd	r19, Z+3	; 0x03
    2ec0:	12 96       	adiw	r26, 0x02	; 2
    2ec2:	8d 91       	ld	r24, X+
    2ec4:	9c 91       	ld	r25, X
    2ec6:	13 97       	sbiw	r26, 0x03	; 3
    2ec8:	82 17       	cp	r24, r18
    2eca:	93 07       	cpc	r25, r19
    2ecc:	94 f0       	brlt	.+36     	; 0x2ef2 <__fpcmp_parts_f+0x8a>
    2ece:	28 17       	cp	r18, r24
    2ed0:	39 07       	cpc	r19, r25
    2ed2:	bc f0       	brlt	.+46     	; 0x2f02 <__fpcmp_parts_f+0x9a>
    2ed4:	24 81       	ldd	r18, Z+4	; 0x04
    2ed6:	35 81       	ldd	r19, Z+5	; 0x05
    2ed8:	46 81       	ldd	r20, Z+6	; 0x06
    2eda:	57 81       	ldd	r21, Z+7	; 0x07
    2edc:	14 96       	adiw	r26, 0x04	; 4
    2ede:	8d 91       	ld	r24, X+
    2ee0:	9d 91       	ld	r25, X+
    2ee2:	0d 90       	ld	r0, X+
    2ee4:	bc 91       	ld	r27, X
    2ee6:	a0 2d       	mov	r26, r0
    2ee8:	82 17       	cp	r24, r18
    2eea:	93 07       	cpc	r25, r19
    2eec:	a4 07       	cpc	r26, r20
    2eee:	b5 07       	cpc	r27, r21
    2ef0:	18 f4       	brcc	.+6      	; 0x2ef8 <__fpcmp_parts_f+0x90>
    2ef2:	66 23       	and	r22, r22
    2ef4:	41 f0       	breq	.+16     	; 0x2f06 <__fpcmp_parts_f+0x9e>
    2ef6:	0d c0       	rjmp	.+26     	; 0x2f12 <__fpcmp_parts_f+0xaa>
    2ef8:	28 17       	cp	r18, r24
    2efa:	39 07       	cpc	r19, r25
    2efc:	4a 07       	cpc	r20, r26
    2efe:	5b 07       	cpc	r21, r27
    2f00:	28 f4       	brcc	.+10     	; 0x2f0c <__fpcmp_parts_f+0xa4>
    2f02:	66 23       	and	r22, r22
    2f04:	31 f0       	breq	.+12     	; 0x2f12 <__fpcmp_parts_f+0xaa>
    2f06:	21 e0       	ldi	r18, 0x01	; 1
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	05 c0       	rjmp	.+10     	; 0x2f16 <__fpcmp_parts_f+0xae>
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	02 c0       	rjmp	.+4      	; 0x2f16 <__fpcmp_parts_f+0xae>
    2f12:	2f ef       	ldi	r18, 0xFF	; 255
    2f14:	3f ef       	ldi	r19, 0xFF	; 255
    2f16:	c9 01       	movw	r24, r18
    2f18:	08 95       	ret

00002f1a <__udivmodhi4>:
    2f1a:	aa 1b       	sub	r26, r26
    2f1c:	bb 1b       	sub	r27, r27
    2f1e:	51 e1       	ldi	r21, 0x11	; 17
    2f20:	07 c0       	rjmp	.+14     	; 0x2f30 <__udivmodhi4_ep>

00002f22 <__udivmodhi4_loop>:
    2f22:	aa 1f       	adc	r26, r26
    2f24:	bb 1f       	adc	r27, r27
    2f26:	a6 17       	cp	r26, r22
    2f28:	b7 07       	cpc	r27, r23
    2f2a:	10 f0       	brcs	.+4      	; 0x2f30 <__udivmodhi4_ep>
    2f2c:	a6 1b       	sub	r26, r22
    2f2e:	b7 0b       	sbc	r27, r23

00002f30 <__udivmodhi4_ep>:
    2f30:	88 1f       	adc	r24, r24
    2f32:	99 1f       	adc	r25, r25
    2f34:	5a 95       	dec	r21
    2f36:	a9 f7       	brne	.-22     	; 0x2f22 <__udivmodhi4_loop>
    2f38:	80 95       	com	r24
    2f3a:	90 95       	com	r25
    2f3c:	bc 01       	movw	r22, r24
    2f3e:	cd 01       	movw	r24, r26
    2f40:	08 95       	ret

00002f42 <__divmodhi4>:
    2f42:	97 fb       	bst	r25, 7
    2f44:	09 2e       	mov	r0, r25
    2f46:	07 26       	eor	r0, r23
    2f48:	0a d0       	rcall	.+20     	; 0x2f5e <__divmodhi4_neg1>
    2f4a:	77 fd       	sbrc	r23, 7
    2f4c:	04 d0       	rcall	.+8      	; 0x2f56 <__divmodhi4_neg2>
    2f4e:	e5 df       	rcall	.-54     	; 0x2f1a <__udivmodhi4>
    2f50:	06 d0       	rcall	.+12     	; 0x2f5e <__divmodhi4_neg1>
    2f52:	00 20       	and	r0, r0
    2f54:	1a f4       	brpl	.+6      	; 0x2f5c <__divmodhi4_exit>

00002f56 <__divmodhi4_neg2>:
    2f56:	70 95       	com	r23
    2f58:	61 95       	neg	r22
    2f5a:	7f 4f       	sbci	r23, 0xFF	; 255

00002f5c <__divmodhi4_exit>:
    2f5c:	08 95       	ret

00002f5e <__divmodhi4_neg1>:
    2f5e:	f6 f7       	brtc	.-4      	; 0x2f5c <__divmodhi4_exit>
    2f60:	90 95       	com	r25
    2f62:	81 95       	neg	r24
    2f64:	9f 4f       	sbci	r25, 0xFF	; 255
    2f66:	08 95       	ret

00002f68 <__prologue_saves__>:
    2f68:	2f 92       	push	r2
    2f6a:	3f 92       	push	r3
    2f6c:	4f 92       	push	r4
    2f6e:	5f 92       	push	r5
    2f70:	6f 92       	push	r6
    2f72:	7f 92       	push	r7
    2f74:	8f 92       	push	r8
    2f76:	9f 92       	push	r9
    2f78:	af 92       	push	r10
    2f7a:	bf 92       	push	r11
    2f7c:	cf 92       	push	r12
    2f7e:	df 92       	push	r13
    2f80:	ef 92       	push	r14
    2f82:	ff 92       	push	r15
    2f84:	0f 93       	push	r16
    2f86:	1f 93       	push	r17
    2f88:	cf 93       	push	r28
    2f8a:	df 93       	push	r29
    2f8c:	cd b7       	in	r28, 0x3d	; 61
    2f8e:	de b7       	in	r29, 0x3e	; 62
    2f90:	ca 1b       	sub	r28, r26
    2f92:	db 0b       	sbc	r29, r27
    2f94:	0f b6       	in	r0, 0x3f	; 63
    2f96:	f8 94       	cli
    2f98:	de bf       	out	0x3e, r29	; 62
    2f9a:	0f be       	out	0x3f, r0	; 63
    2f9c:	cd bf       	out	0x3d, r28	; 61
    2f9e:	09 94       	ijmp

00002fa0 <__epilogue_restores__>:
    2fa0:	2a 88       	ldd	r2, Y+18	; 0x12
    2fa2:	39 88       	ldd	r3, Y+17	; 0x11
    2fa4:	48 88       	ldd	r4, Y+16	; 0x10
    2fa6:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fa8:	6e 84       	ldd	r6, Y+14	; 0x0e
    2faa:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fac:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fae:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fb0:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fb2:	b9 84       	ldd	r11, Y+9	; 0x09
    2fb4:	c8 84       	ldd	r12, Y+8	; 0x08
    2fb6:	df 80       	ldd	r13, Y+7	; 0x07
    2fb8:	ee 80       	ldd	r14, Y+6	; 0x06
    2fba:	fd 80       	ldd	r15, Y+5	; 0x05
    2fbc:	0c 81       	ldd	r16, Y+4	; 0x04
    2fbe:	1b 81       	ldd	r17, Y+3	; 0x03
    2fc0:	aa 81       	ldd	r26, Y+2	; 0x02
    2fc2:	b9 81       	ldd	r27, Y+1	; 0x01
    2fc4:	ce 0f       	add	r28, r30
    2fc6:	d1 1d       	adc	r29, r1
    2fc8:	0f b6       	in	r0, 0x3f	; 63
    2fca:	f8 94       	cli
    2fcc:	de bf       	out	0x3e, r29	; 62
    2fce:	0f be       	out	0x3f, r0	; 63
    2fd0:	cd bf       	out	0x3d, r28	; 61
    2fd2:	ed 01       	movw	r28, r26
    2fd4:	08 95       	ret

00002fd6 <calloc>:
    2fd6:	ef 92       	push	r14
    2fd8:	ff 92       	push	r15
    2fda:	0f 93       	push	r16
    2fdc:	1f 93       	push	r17
    2fde:	cf 93       	push	r28
    2fe0:	df 93       	push	r29
    2fe2:	68 9f       	mul	r22, r24
    2fe4:	80 01       	movw	r16, r0
    2fe6:	69 9f       	mul	r22, r25
    2fe8:	10 0d       	add	r17, r0
    2fea:	78 9f       	mul	r23, r24
    2fec:	10 0d       	add	r17, r0
    2fee:	11 24       	eor	r1, r1
    2ff0:	c8 01       	movw	r24, r16
    2ff2:	0e 94 10 18 	call	0x3020	; 0x3020 <malloc>
    2ff6:	e8 2e       	mov	r14, r24
    2ff8:	e7 01       	movw	r28, r14
    2ffa:	7e 01       	movw	r14, r28
    2ffc:	f9 2e       	mov	r15, r25
    2ffe:	e7 01       	movw	r28, r14
    3000:	20 97       	sbiw	r28, 0x00	; 0
    3002:	31 f0       	breq	.+12     	; 0x3010 <calloc+0x3a>
    3004:	8e 2d       	mov	r24, r14
    3006:	60 e0       	ldi	r22, 0x00	; 0
    3008:	70 e0       	ldi	r23, 0x00	; 0
    300a:	a8 01       	movw	r20, r16
    300c:	0e 94 a1 19 	call	0x3342	; 0x3342 <memset>
    3010:	ce 01       	movw	r24, r28
    3012:	df 91       	pop	r29
    3014:	cf 91       	pop	r28
    3016:	1f 91       	pop	r17
    3018:	0f 91       	pop	r16
    301a:	ff 90       	pop	r15
    301c:	ef 90       	pop	r14
    301e:	08 95       	ret

00003020 <malloc>:
    3020:	cf 93       	push	r28
    3022:	df 93       	push	r29
    3024:	82 30       	cpi	r24, 0x02	; 2
    3026:	91 05       	cpc	r25, r1
    3028:	10 f4       	brcc	.+4      	; 0x302e <malloc+0xe>
    302a:	82 e0       	ldi	r24, 0x02	; 2
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	e0 91 31 03 	lds	r30, 0x0331
    3032:	f0 91 32 03 	lds	r31, 0x0332
    3036:	40 e0       	ldi	r20, 0x00	; 0
    3038:	50 e0       	ldi	r21, 0x00	; 0
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	26 c0       	rjmp	.+76     	; 0x308c <malloc+0x6c>
    3040:	60 81       	ld	r22, Z
    3042:	71 81       	ldd	r23, Z+1	; 0x01
    3044:	68 17       	cp	r22, r24
    3046:	79 07       	cpc	r23, r25
    3048:	e0 f0       	brcs	.+56     	; 0x3082 <malloc+0x62>
    304a:	68 17       	cp	r22, r24
    304c:	79 07       	cpc	r23, r25
    304e:	81 f4       	brne	.+32     	; 0x3070 <malloc+0x50>
    3050:	82 81       	ldd	r24, Z+2	; 0x02
    3052:	93 81       	ldd	r25, Z+3	; 0x03
    3054:	21 15       	cp	r18, r1
    3056:	31 05       	cpc	r19, r1
    3058:	31 f0       	breq	.+12     	; 0x3066 <malloc+0x46>
    305a:	d9 01       	movw	r26, r18
    305c:	13 96       	adiw	r26, 0x03	; 3
    305e:	9c 93       	st	X, r25
    3060:	8e 93       	st	-X, r24
    3062:	12 97       	sbiw	r26, 0x02	; 2
    3064:	2b c0       	rjmp	.+86     	; 0x30bc <malloc+0x9c>
    3066:	90 93 32 03 	sts	0x0332, r25
    306a:	80 93 31 03 	sts	0x0331, r24
    306e:	26 c0       	rjmp	.+76     	; 0x30bc <malloc+0x9c>
    3070:	41 15       	cp	r20, r1
    3072:	51 05       	cpc	r21, r1
    3074:	19 f0       	breq	.+6      	; 0x307c <malloc+0x5c>
    3076:	64 17       	cp	r22, r20
    3078:	75 07       	cpc	r23, r21
    307a:	18 f4       	brcc	.+6      	; 0x3082 <malloc+0x62>
    307c:	ab 01       	movw	r20, r22
    307e:	e9 01       	movw	r28, r18
    3080:	df 01       	movw	r26, r30
    3082:	9f 01       	movw	r18, r30
    3084:	72 81       	ldd	r23, Z+2	; 0x02
    3086:	63 81       	ldd	r22, Z+3	; 0x03
    3088:	e7 2f       	mov	r30, r23
    308a:	f6 2f       	mov	r31, r22
    308c:	30 97       	sbiw	r30, 0x00	; 0
    308e:	c1 f6       	brne	.-80     	; 0x3040 <malloc+0x20>
    3090:	41 15       	cp	r20, r1
    3092:	51 05       	cpc	r21, r1
    3094:	01 f1       	breq	.+64     	; 0x30d6 <malloc+0xb6>
    3096:	48 1b       	sub	r20, r24
    3098:	59 0b       	sbc	r21, r25
    309a:	44 30       	cpi	r20, 0x04	; 4
    309c:	51 05       	cpc	r21, r1
    309e:	80 f4       	brcc	.+32     	; 0x30c0 <malloc+0xa0>
    30a0:	12 96       	adiw	r26, 0x02	; 2
    30a2:	8d 91       	ld	r24, X+
    30a4:	9c 91       	ld	r25, X
    30a6:	13 97       	sbiw	r26, 0x03	; 3
    30a8:	20 97       	sbiw	r28, 0x00	; 0
    30aa:	19 f0       	breq	.+6      	; 0x30b2 <malloc+0x92>
    30ac:	9b 83       	std	Y+3, r25	; 0x03
    30ae:	8a 83       	std	Y+2, r24	; 0x02
    30b0:	04 c0       	rjmp	.+8      	; 0x30ba <malloc+0x9a>
    30b2:	90 93 32 03 	sts	0x0332, r25
    30b6:	80 93 31 03 	sts	0x0331, r24
    30ba:	fd 01       	movw	r30, r26
    30bc:	32 96       	adiw	r30, 0x02	; 2
    30be:	46 c0       	rjmp	.+140    	; 0x314c <malloc+0x12c>
    30c0:	fd 01       	movw	r30, r26
    30c2:	e4 0f       	add	r30, r20
    30c4:	f5 1f       	adc	r31, r21
    30c6:	81 93       	st	Z+, r24
    30c8:	91 93       	st	Z+, r25
    30ca:	42 50       	subi	r20, 0x02	; 2
    30cc:	50 40       	sbci	r21, 0x00	; 0
    30ce:	11 96       	adiw	r26, 0x01	; 1
    30d0:	5c 93       	st	X, r21
    30d2:	4e 93       	st	-X, r20
    30d4:	3b c0       	rjmp	.+118    	; 0x314c <malloc+0x12c>
    30d6:	20 91 2f 03 	lds	r18, 0x032F
    30da:	30 91 30 03 	lds	r19, 0x0330
    30de:	21 15       	cp	r18, r1
    30e0:	31 05       	cpc	r19, r1
    30e2:	41 f4       	brne	.+16     	; 0x30f4 <malloc+0xd4>
    30e4:	20 91 4a 02 	lds	r18, 0x024A
    30e8:	30 91 4b 02 	lds	r19, 0x024B
    30ec:	30 93 30 03 	sts	0x0330, r19
    30f0:	20 93 2f 03 	sts	0x032F, r18
    30f4:	20 91 4c 02 	lds	r18, 0x024C
    30f8:	30 91 4d 02 	lds	r19, 0x024D
    30fc:	21 15       	cp	r18, r1
    30fe:	31 05       	cpc	r19, r1
    3100:	41 f4       	brne	.+16     	; 0x3112 <malloc+0xf2>
    3102:	2d b7       	in	r18, 0x3d	; 61
    3104:	3e b7       	in	r19, 0x3e	; 62
    3106:	40 91 48 02 	lds	r20, 0x0248
    310a:	50 91 49 02 	lds	r21, 0x0249
    310e:	24 1b       	sub	r18, r20
    3110:	35 0b       	sbc	r19, r21
    3112:	e0 91 2f 03 	lds	r30, 0x032F
    3116:	f0 91 30 03 	lds	r31, 0x0330
    311a:	e2 17       	cp	r30, r18
    311c:	f3 07       	cpc	r31, r19
    311e:	a0 f4       	brcc	.+40     	; 0x3148 <malloc+0x128>
    3120:	2e 1b       	sub	r18, r30
    3122:	3f 0b       	sbc	r19, r31
    3124:	28 17       	cp	r18, r24
    3126:	39 07       	cpc	r19, r25
    3128:	78 f0       	brcs	.+30     	; 0x3148 <malloc+0x128>
    312a:	ac 01       	movw	r20, r24
    312c:	4e 5f       	subi	r20, 0xFE	; 254
    312e:	5f 4f       	sbci	r21, 0xFF	; 255
    3130:	24 17       	cp	r18, r20
    3132:	35 07       	cpc	r19, r21
    3134:	48 f0       	brcs	.+18     	; 0x3148 <malloc+0x128>
    3136:	4e 0f       	add	r20, r30
    3138:	5f 1f       	adc	r21, r31
    313a:	50 93 30 03 	sts	0x0330, r21
    313e:	40 93 2f 03 	sts	0x032F, r20
    3142:	81 93       	st	Z+, r24
    3144:	91 93       	st	Z+, r25
    3146:	02 c0       	rjmp	.+4      	; 0x314c <malloc+0x12c>
    3148:	e0 e0       	ldi	r30, 0x00	; 0
    314a:	f0 e0       	ldi	r31, 0x00	; 0
    314c:	cf 01       	movw	r24, r30
    314e:	df 91       	pop	r29
    3150:	cf 91       	pop	r28
    3152:	08 95       	ret

00003154 <free>:
    3154:	cf 93       	push	r28
    3156:	df 93       	push	r29
    3158:	00 97       	sbiw	r24, 0x00	; 0
    315a:	09 f4       	brne	.+2      	; 0x315e <free+0xa>
    315c:	91 c0       	rjmp	.+290    	; 0x3280 <free+0x12c>
    315e:	fc 01       	movw	r30, r24
    3160:	32 97       	sbiw	r30, 0x02	; 2
    3162:	13 82       	std	Z+3, r1	; 0x03
    3164:	12 82       	std	Z+2, r1	; 0x02
    3166:	60 91 31 03 	lds	r22, 0x0331
    316a:	70 91 32 03 	lds	r23, 0x0332
    316e:	61 15       	cp	r22, r1
    3170:	71 05       	cpc	r23, r1
    3172:	81 f4       	brne	.+32     	; 0x3194 <free+0x40>
    3174:	20 81       	ld	r18, Z
    3176:	31 81       	ldd	r19, Z+1	; 0x01
    3178:	28 0f       	add	r18, r24
    317a:	39 1f       	adc	r19, r25
    317c:	80 91 2f 03 	lds	r24, 0x032F
    3180:	90 91 30 03 	lds	r25, 0x0330
    3184:	82 17       	cp	r24, r18
    3186:	93 07       	cpc	r25, r19
    3188:	99 f5       	brne	.+102    	; 0x31f0 <free+0x9c>
    318a:	f0 93 30 03 	sts	0x0330, r31
    318e:	e0 93 2f 03 	sts	0x032F, r30
    3192:	76 c0       	rjmp	.+236    	; 0x3280 <free+0x12c>
    3194:	db 01       	movw	r26, r22
    3196:	80 e0       	ldi	r24, 0x00	; 0
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	02 c0       	rjmp	.+4      	; 0x31a0 <free+0x4c>
    319c:	cd 01       	movw	r24, r26
    319e:	d9 01       	movw	r26, r18
    31a0:	ae 17       	cp	r26, r30
    31a2:	bf 07       	cpc	r27, r31
    31a4:	48 f4       	brcc	.+18     	; 0x31b8 <free+0x64>
    31a6:	12 96       	adiw	r26, 0x02	; 2
    31a8:	2d 91       	ld	r18, X+
    31aa:	3c 91       	ld	r19, X
    31ac:	13 97       	sbiw	r26, 0x03	; 3
    31ae:	21 15       	cp	r18, r1
    31b0:	31 05       	cpc	r19, r1
    31b2:	a1 f7       	brne	.-24     	; 0x319c <free+0x48>
    31b4:	cd 01       	movw	r24, r26
    31b6:	21 c0       	rjmp	.+66     	; 0x31fa <free+0xa6>
    31b8:	b3 83       	std	Z+3, r27	; 0x03
    31ba:	a2 83       	std	Z+2, r26	; 0x02
    31bc:	ef 01       	movw	r28, r30
    31be:	49 91       	ld	r20, Y+
    31c0:	59 91       	ld	r21, Y+
    31c2:	9e 01       	movw	r18, r28
    31c4:	24 0f       	add	r18, r20
    31c6:	35 1f       	adc	r19, r21
    31c8:	a2 17       	cp	r26, r18
    31ca:	b3 07       	cpc	r27, r19
    31cc:	79 f4       	brne	.+30     	; 0x31ec <free+0x98>
    31ce:	2d 91       	ld	r18, X+
    31d0:	3c 91       	ld	r19, X
    31d2:	11 97       	sbiw	r26, 0x01	; 1
    31d4:	24 0f       	add	r18, r20
    31d6:	35 1f       	adc	r19, r21
    31d8:	2e 5f       	subi	r18, 0xFE	; 254
    31da:	3f 4f       	sbci	r19, 0xFF	; 255
    31dc:	31 83       	std	Z+1, r19	; 0x01
    31de:	20 83       	st	Z, r18
    31e0:	12 96       	adiw	r26, 0x02	; 2
    31e2:	2d 91       	ld	r18, X+
    31e4:	3c 91       	ld	r19, X
    31e6:	13 97       	sbiw	r26, 0x03	; 3
    31e8:	33 83       	std	Z+3, r19	; 0x03
    31ea:	22 83       	std	Z+2, r18	; 0x02
    31ec:	00 97       	sbiw	r24, 0x00	; 0
    31ee:	29 f4       	brne	.+10     	; 0x31fa <free+0xa6>
    31f0:	f0 93 32 03 	sts	0x0332, r31
    31f4:	e0 93 31 03 	sts	0x0331, r30
    31f8:	43 c0       	rjmp	.+134    	; 0x3280 <free+0x12c>
    31fa:	dc 01       	movw	r26, r24
    31fc:	13 96       	adiw	r26, 0x03	; 3
    31fe:	fc 93       	st	X, r31
    3200:	ee 93       	st	-X, r30
    3202:	12 97       	sbiw	r26, 0x02	; 2
    3204:	4d 91       	ld	r20, X+
    3206:	5d 91       	ld	r21, X+
    3208:	a4 0f       	add	r26, r20
    320a:	b5 1f       	adc	r27, r21
    320c:	ea 17       	cp	r30, r26
    320e:	fb 07       	cpc	r31, r27
    3210:	69 f4       	brne	.+26     	; 0x322c <free+0xd8>
    3212:	20 81       	ld	r18, Z
    3214:	31 81       	ldd	r19, Z+1	; 0x01
    3216:	24 0f       	add	r18, r20
    3218:	35 1f       	adc	r19, r21
    321a:	2e 5f       	subi	r18, 0xFE	; 254
    321c:	3f 4f       	sbci	r19, 0xFF	; 255
    321e:	ec 01       	movw	r28, r24
    3220:	39 83       	std	Y+1, r19	; 0x01
    3222:	28 83       	st	Y, r18
    3224:	22 81       	ldd	r18, Z+2	; 0x02
    3226:	33 81       	ldd	r19, Z+3	; 0x03
    3228:	3b 83       	std	Y+3, r19	; 0x03
    322a:	2a 83       	std	Y+2, r18	; 0x02
    322c:	e0 e0       	ldi	r30, 0x00	; 0
    322e:	f0 e0       	ldi	r31, 0x00	; 0
    3230:	02 c0       	rjmp	.+4      	; 0x3236 <free+0xe2>
    3232:	fb 01       	movw	r30, r22
    3234:	bc 01       	movw	r22, r24
    3236:	db 01       	movw	r26, r22
    3238:	12 96       	adiw	r26, 0x02	; 2
    323a:	8d 91       	ld	r24, X+
    323c:	9c 91       	ld	r25, X
    323e:	13 97       	sbiw	r26, 0x03	; 3
    3240:	00 97       	sbiw	r24, 0x00	; 0
    3242:	b9 f7       	brne	.-18     	; 0x3232 <free+0xde>
    3244:	9b 01       	movw	r18, r22
    3246:	2e 5f       	subi	r18, 0xFE	; 254
    3248:	3f 4f       	sbci	r19, 0xFF	; 255
    324a:	8d 91       	ld	r24, X+
    324c:	9c 91       	ld	r25, X
    324e:	11 97       	sbiw	r26, 0x01	; 1
    3250:	82 0f       	add	r24, r18
    3252:	93 1f       	adc	r25, r19
    3254:	40 91 2f 03 	lds	r20, 0x032F
    3258:	50 91 30 03 	lds	r21, 0x0330
    325c:	48 17       	cp	r20, r24
    325e:	59 07       	cpc	r21, r25
    3260:	79 f4       	brne	.+30     	; 0x3280 <free+0x12c>
    3262:	30 97       	sbiw	r30, 0x00	; 0
    3264:	29 f4       	brne	.+10     	; 0x3270 <free+0x11c>
    3266:	10 92 32 03 	sts	0x0332, r1
    326a:	10 92 31 03 	sts	0x0331, r1
    326e:	02 c0       	rjmp	.+4      	; 0x3274 <free+0x120>
    3270:	13 82       	std	Z+3, r1	; 0x03
    3272:	12 82       	std	Z+2, r1	; 0x02
    3274:	22 50       	subi	r18, 0x02	; 2
    3276:	30 40       	sbci	r19, 0x00	; 0
    3278:	30 93 30 03 	sts	0x0330, r19
    327c:	20 93 2f 03 	sts	0x032F, r18
    3280:	df 91       	pop	r29
    3282:	cf 91       	pop	r28
    3284:	08 95       	ret

00003286 <do_rand>:
    3286:	af 92       	push	r10
    3288:	bf 92       	push	r11
    328a:	cf 92       	push	r12
    328c:	df 92       	push	r13
    328e:	ef 92       	push	r14
    3290:	ff 92       	push	r15
    3292:	0f 93       	push	r16
    3294:	1f 93       	push	r17
    3296:	cf 93       	push	r28
    3298:	df 93       	push	r29
    329a:	ec 01       	movw	r28, r24
    329c:	68 81       	ld	r22, Y
    329e:	79 81       	ldd	r23, Y+1	; 0x01
    32a0:	8a 81       	ldd	r24, Y+2	; 0x02
    32a2:	9b 81       	ldd	r25, Y+3	; 0x03
    32a4:	61 15       	cp	r22, r1
    32a6:	71 05       	cpc	r23, r1
    32a8:	81 05       	cpc	r24, r1
    32aa:	91 05       	cpc	r25, r1
    32ac:	21 f4       	brne	.+8      	; 0x32b6 <do_rand+0x30>
    32ae:	64 e2       	ldi	r22, 0x24	; 36
    32b0:	79 ed       	ldi	r23, 0xD9	; 217
    32b2:	8b e5       	ldi	r24, 0x5B	; 91
    32b4:	97 e0       	ldi	r25, 0x07	; 7
    32b6:	2d e1       	ldi	r18, 0x1D	; 29
    32b8:	33 ef       	ldi	r19, 0xF3	; 243
    32ba:	41 e0       	ldi	r20, 0x01	; 1
    32bc:	50 e0       	ldi	r21, 0x00	; 0
    32be:	0e 94 29 1a 	call	0x3452	; 0x3452 <__divmodsi4>
    32c2:	79 01       	movw	r14, r18
    32c4:	8a 01       	movw	r16, r20
    32c6:	27 ea       	ldi	r18, 0xA7	; 167
    32c8:	31 e4       	ldi	r19, 0x41	; 65
    32ca:	40 e0       	ldi	r20, 0x00	; 0
    32cc:	50 e0       	ldi	r21, 0x00	; 0
    32ce:	0e 94 0a 1a 	call	0x3414	; 0x3414 <__mulsi3>
    32d2:	5b 01       	movw	r10, r22
    32d4:	6c 01       	movw	r12, r24
    32d6:	c8 01       	movw	r24, r16
    32d8:	b7 01       	movw	r22, r14
    32da:	2c ee       	ldi	r18, 0xEC	; 236
    32dc:	34 ef       	ldi	r19, 0xF4	; 244
    32de:	4f ef       	ldi	r20, 0xFF	; 255
    32e0:	5f ef       	ldi	r21, 0xFF	; 255
    32e2:	0e 94 0a 1a 	call	0x3414	; 0x3414 <__mulsi3>
    32e6:	6a 0d       	add	r22, r10
    32e8:	7b 1d       	adc	r23, r11
    32ea:	8c 1d       	adc	r24, r12
    32ec:	9d 1d       	adc	r25, r13
    32ee:	97 ff       	sbrs	r25, 7
    32f0:	04 c0       	rjmp	.+8      	; 0x32fa <do_rand+0x74>
    32f2:	61 50       	subi	r22, 0x01	; 1
    32f4:	70 40       	sbci	r23, 0x00	; 0
    32f6:	80 40       	sbci	r24, 0x00	; 0
    32f8:	90 48       	sbci	r25, 0x80	; 128
    32fa:	68 83       	st	Y, r22
    32fc:	79 83       	std	Y+1, r23	; 0x01
    32fe:	8a 83       	std	Y+2, r24	; 0x02
    3300:	9b 83       	std	Y+3, r25	; 0x03
    3302:	7f 77       	andi	r23, 0x7F	; 127
    3304:	cb 01       	movw	r24, r22
    3306:	df 91       	pop	r29
    3308:	cf 91       	pop	r28
    330a:	1f 91       	pop	r17
    330c:	0f 91       	pop	r16
    330e:	ff 90       	pop	r15
    3310:	ef 90       	pop	r14
    3312:	df 90       	pop	r13
    3314:	cf 90       	pop	r12
    3316:	bf 90       	pop	r11
    3318:	af 90       	pop	r10
    331a:	08 95       	ret

0000331c <rand_r>:
    331c:	0e 94 43 19 	call	0x3286	; 0x3286 <do_rand>
    3320:	08 95       	ret

00003322 <rand>:
    3322:	8e e4       	ldi	r24, 0x4E	; 78
    3324:	92 e0       	ldi	r25, 0x02	; 2
    3326:	0e 94 43 19 	call	0x3286	; 0x3286 <do_rand>
    332a:	08 95       	ret

0000332c <srand>:
    332c:	a0 e0       	ldi	r26, 0x00	; 0
    332e:	b0 e0       	ldi	r27, 0x00	; 0
    3330:	80 93 4e 02 	sts	0x024E, r24
    3334:	90 93 4f 02 	sts	0x024F, r25
    3338:	a0 93 50 02 	sts	0x0250, r26
    333c:	b0 93 51 02 	sts	0x0251, r27
    3340:	08 95       	ret

00003342 <memset>:
    3342:	dc 01       	movw	r26, r24
    3344:	01 c0       	rjmp	.+2      	; 0x3348 <memset+0x6>
    3346:	6d 93       	st	X+, r22
    3348:	41 50       	subi	r20, 0x01	; 1
    334a:	50 40       	sbci	r21, 0x00	; 0
    334c:	e0 f7       	brcc	.-8      	; 0x3346 <memset+0x4>
    334e:	08 95       	ret

00003350 <itoa>:
    3350:	fb 01       	movw	r30, r22
    3352:	9f 01       	movw	r18, r30
    3354:	e8 94       	clt
    3356:	42 30       	cpi	r20, 0x02	; 2
    3358:	c4 f0       	brlt	.+48     	; 0x338a <itoa+0x3a>
    335a:	45 32       	cpi	r20, 0x25	; 37
    335c:	b4 f4       	brge	.+44     	; 0x338a <itoa+0x3a>
    335e:	4a 30       	cpi	r20, 0x0A	; 10
    3360:	29 f4       	brne	.+10     	; 0x336c <itoa+0x1c>
    3362:	97 fb       	bst	r25, 7
    3364:	1e f4       	brtc	.+6      	; 0x336c <itoa+0x1c>
    3366:	90 95       	com	r25
    3368:	81 95       	neg	r24
    336a:	9f 4f       	sbci	r25, 0xFF	; 255
    336c:	64 2f       	mov	r22, r20
    336e:	77 27       	eor	r23, r23
    3370:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__udivmodhi4>
    3374:	80 5d       	subi	r24, 0xD0	; 208
    3376:	8a 33       	cpi	r24, 0x3A	; 58
    3378:	0c f0       	brlt	.+2      	; 0x337c <itoa+0x2c>
    337a:	89 5d       	subi	r24, 0xD9	; 217
    337c:	81 93       	st	Z+, r24
    337e:	cb 01       	movw	r24, r22
    3380:	00 97       	sbiw	r24, 0x00	; 0
    3382:	a1 f7       	brne	.-24     	; 0x336c <itoa+0x1c>
    3384:	16 f4       	brtc	.+4      	; 0x338a <itoa+0x3a>
    3386:	5d e2       	ldi	r21, 0x2D	; 45
    3388:	51 93       	st	Z+, r21
    338a:	10 82       	st	Z, r1
    338c:	c9 01       	movw	r24, r18
    338e:	0c 94 dc 19 	jmp	0x33b8	; 0x33b8 <strrev>

00003392 <__eerd_byte_usb1287>:
    3392:	f9 99       	sbic	0x1f, 1	; 31
    3394:	fe cf       	rjmp	.-4      	; 0x3392 <__eerd_byte_usb1287>
    3396:	92 bd       	out	0x22, r25	; 34
    3398:	81 bd       	out	0x21, r24	; 33
    339a:	f8 9a       	sbi	0x1f, 0	; 31
    339c:	99 27       	eor	r25, r25
    339e:	80 b5       	in	r24, 0x20	; 32
    33a0:	08 95       	ret

000033a2 <__eerd_word_usb1287>:
    33a2:	a8 e1       	ldi	r26, 0x18	; 24
    33a4:	b0 e0       	ldi	r27, 0x00	; 0
    33a6:	42 e0       	ldi	r20, 0x02	; 2
    33a8:	50 e0       	ldi	r21, 0x00	; 0
    33aa:	0c 94 ee 19 	jmp	0x33dc	; 0x33dc <__eerd_blraw_usb1287>

000033ae <__eewr_word_usb1287>:
    33ae:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <__eewr_byte_usb1287>
    33b2:	27 2f       	mov	r18, r23
    33b4:	0c 94 fd 19 	jmp	0x33fa	; 0x33fa <__eewr_r18_usb1287>

000033b8 <strrev>:
    33b8:	dc 01       	movw	r26, r24
    33ba:	fc 01       	movw	r30, r24
    33bc:	67 2f       	mov	r22, r23
    33be:	71 91       	ld	r23, Z+
    33c0:	77 23       	and	r23, r23
    33c2:	e1 f7       	brne	.-8      	; 0x33bc <strrev+0x4>
    33c4:	32 97       	sbiw	r30, 0x02	; 2
    33c6:	04 c0       	rjmp	.+8      	; 0x33d0 <strrev+0x18>
    33c8:	7c 91       	ld	r23, X
    33ca:	6d 93       	st	X+, r22
    33cc:	70 83       	st	Z, r23
    33ce:	62 91       	ld	r22, -Z
    33d0:	ae 17       	cp	r26, r30
    33d2:	bf 07       	cpc	r27, r31
    33d4:	c8 f3       	brcs	.-14     	; 0x33c8 <strrev+0x10>
    33d6:	08 95       	ret

000033d8 <__eerd_block_usb1287>:
    33d8:	dc 01       	movw	r26, r24
    33da:	cb 01       	movw	r24, r22

000033dc <__eerd_blraw_usb1287>:
    33dc:	fc 01       	movw	r30, r24
    33de:	f9 99       	sbic	0x1f, 1	; 31
    33e0:	fe cf       	rjmp	.-4      	; 0x33de <__eerd_blraw_usb1287+0x2>
    33e2:	06 c0       	rjmp	.+12     	; 0x33f0 <__eerd_blraw_usb1287+0x14>
    33e4:	f2 bd       	out	0x22, r31	; 34
    33e6:	e1 bd       	out	0x21, r30	; 33
    33e8:	f8 9a       	sbi	0x1f, 0	; 31
    33ea:	31 96       	adiw	r30, 0x01	; 1
    33ec:	00 b4       	in	r0, 0x20	; 32
    33ee:	0d 92       	st	X+, r0
    33f0:	41 50       	subi	r20, 0x01	; 1
    33f2:	50 40       	sbci	r21, 0x00	; 0
    33f4:	b8 f7       	brcc	.-18     	; 0x33e4 <__eerd_blraw_usb1287+0x8>
    33f6:	08 95       	ret

000033f8 <__eewr_byte_usb1287>:
    33f8:	26 2f       	mov	r18, r22

000033fa <__eewr_r18_usb1287>:
    33fa:	f9 99       	sbic	0x1f, 1	; 31
    33fc:	fe cf       	rjmp	.-4      	; 0x33fa <__eewr_r18_usb1287>
    33fe:	1f ba       	out	0x1f, r1	; 31
    3400:	92 bd       	out	0x22, r25	; 34
    3402:	81 bd       	out	0x21, r24	; 33
    3404:	20 bd       	out	0x20, r18	; 32
    3406:	0f b6       	in	r0, 0x3f	; 63
    3408:	f8 94       	cli
    340a:	fa 9a       	sbi	0x1f, 2	; 31
    340c:	f9 9a       	sbi	0x1f, 1	; 31
    340e:	0f be       	out	0x3f, r0	; 63
    3410:	01 96       	adiw	r24, 0x01	; 1
    3412:	08 95       	ret

00003414 <__mulsi3>:
    3414:	62 9f       	mul	r22, r18
    3416:	d0 01       	movw	r26, r0
    3418:	73 9f       	mul	r23, r19
    341a:	f0 01       	movw	r30, r0
    341c:	82 9f       	mul	r24, r18
    341e:	e0 0d       	add	r30, r0
    3420:	f1 1d       	adc	r31, r1
    3422:	64 9f       	mul	r22, r20
    3424:	e0 0d       	add	r30, r0
    3426:	f1 1d       	adc	r31, r1
    3428:	92 9f       	mul	r25, r18
    342a:	f0 0d       	add	r31, r0
    342c:	83 9f       	mul	r24, r19
    342e:	f0 0d       	add	r31, r0
    3430:	74 9f       	mul	r23, r20
    3432:	f0 0d       	add	r31, r0
    3434:	65 9f       	mul	r22, r21
    3436:	f0 0d       	add	r31, r0
    3438:	99 27       	eor	r25, r25
    343a:	72 9f       	mul	r23, r18
    343c:	b0 0d       	add	r27, r0
    343e:	e1 1d       	adc	r30, r1
    3440:	f9 1f       	adc	r31, r25
    3442:	63 9f       	mul	r22, r19
    3444:	b0 0d       	add	r27, r0
    3446:	e1 1d       	adc	r30, r1
    3448:	f9 1f       	adc	r31, r25
    344a:	bd 01       	movw	r22, r26
    344c:	cf 01       	movw	r24, r30
    344e:	11 24       	eor	r1, r1
    3450:	08 95       	ret

00003452 <__divmodsi4>:
    3452:	97 fb       	bst	r25, 7
    3454:	09 2e       	mov	r0, r25
    3456:	05 26       	eor	r0, r21
    3458:	0e d0       	rcall	.+28     	; 0x3476 <__divmodsi4_neg1>
    345a:	57 fd       	sbrc	r21, 7
    345c:	04 d0       	rcall	.+8      	; 0x3466 <__divmodsi4_neg2>
    345e:	14 d0       	rcall	.+40     	; 0x3488 <__udivmodsi4>
    3460:	0a d0       	rcall	.+20     	; 0x3476 <__divmodsi4_neg1>
    3462:	00 1c       	adc	r0, r0
    3464:	38 f4       	brcc	.+14     	; 0x3474 <__divmodsi4_exit>

00003466 <__divmodsi4_neg2>:
    3466:	50 95       	com	r21
    3468:	40 95       	com	r20
    346a:	30 95       	com	r19
    346c:	21 95       	neg	r18
    346e:	3f 4f       	sbci	r19, 0xFF	; 255
    3470:	4f 4f       	sbci	r20, 0xFF	; 255
    3472:	5f 4f       	sbci	r21, 0xFF	; 255

00003474 <__divmodsi4_exit>:
    3474:	08 95       	ret

00003476 <__divmodsi4_neg1>:
    3476:	f6 f7       	brtc	.-4      	; 0x3474 <__divmodsi4_exit>
    3478:	90 95       	com	r25
    347a:	80 95       	com	r24
    347c:	70 95       	com	r23
    347e:	61 95       	neg	r22
    3480:	7f 4f       	sbci	r23, 0xFF	; 255
    3482:	8f 4f       	sbci	r24, 0xFF	; 255
    3484:	9f 4f       	sbci	r25, 0xFF	; 255
    3486:	08 95       	ret

00003488 <__udivmodsi4>:
    3488:	a1 e2       	ldi	r26, 0x21	; 33
    348a:	1a 2e       	mov	r1, r26
    348c:	aa 1b       	sub	r26, r26
    348e:	bb 1b       	sub	r27, r27
    3490:	fd 01       	movw	r30, r26
    3492:	0d c0       	rjmp	.+26     	; 0x34ae <__udivmodsi4_ep>

00003494 <__udivmodsi4_loop>:
    3494:	aa 1f       	adc	r26, r26
    3496:	bb 1f       	adc	r27, r27
    3498:	ee 1f       	adc	r30, r30
    349a:	ff 1f       	adc	r31, r31
    349c:	a2 17       	cp	r26, r18
    349e:	b3 07       	cpc	r27, r19
    34a0:	e4 07       	cpc	r30, r20
    34a2:	f5 07       	cpc	r31, r21
    34a4:	20 f0       	brcs	.+8      	; 0x34ae <__udivmodsi4_ep>
    34a6:	a2 1b       	sub	r26, r18
    34a8:	b3 0b       	sbc	r27, r19
    34aa:	e4 0b       	sbc	r30, r20
    34ac:	f5 0b       	sbc	r31, r21

000034ae <__udivmodsi4_ep>:
    34ae:	66 1f       	adc	r22, r22
    34b0:	77 1f       	adc	r23, r23
    34b2:	88 1f       	adc	r24, r24
    34b4:	99 1f       	adc	r25, r25
    34b6:	1a 94       	dec	r1
    34b8:	69 f7       	brne	.-38     	; 0x3494 <__udivmodsi4_loop>
    34ba:	60 95       	com	r22
    34bc:	70 95       	com	r23
    34be:	80 95       	com	r24
    34c0:	90 95       	com	r25
    34c2:	9b 01       	movw	r18, r22
    34c4:	ac 01       	movw	r20, r24
    34c6:	bd 01       	movw	r22, r26
    34c8:	cf 01       	movw	r24, r30
    34ca:	08 95       	ret

000034cc <_exit>:
    34cc:	f8 94       	cli

000034ce <__stop_program>:
    34ce:	ff cf       	rjmp	.-2      	; 0x34ce <__stop_program>
